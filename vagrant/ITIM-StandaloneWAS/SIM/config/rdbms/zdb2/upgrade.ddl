/**********************************************************
 *							  
 *  The section below contains the database schema 
 *  changes from ITIM 4.6 Base to FP14 (L3_itim_46_5763)
 *                                                        
 **********************************************************/ 

/** ALTER TABLE AUDIT_EVENT 
ALTER ENTITY_NAME SET DATA TYPE VARCHAR(1000)
ALTER INITIATOR_NAME SET DATA TYPE VARCHAR(1000)
ALTER CONTAINER_NAME SET DATA TYPE VARCHAR(1000);

ALTER TABLE AUDIT_MGMT_TARGET 
ALTER TARGET_ENTITY_NAME SET DATA TYPE VARCHAR(1000);

ALTER TABLE AUDIT_MGMT_PROVISIONING 
ALTER OWNER_NAME SET DATA TYPE VARCHAR(1000) 
ALTER SERVICE_NAME SET DATA TYPE VARCHAR(1000);

ALTER TABLE AUDIT_MGMT_DELEGATE
ALTER DELEGATE_NAME SET DATA TYPE VARCHAR(1000);
*/

/**********************************************************
 *							  
 *  The section below contains the database schema 
 *  changes from FP14 to FP25 (L3_itim_46_5791)
 *                                                        
 * Note: Refer to upgradeData.ddl for the DB data changes
 *                                                        
 **********************************************************/

ALTER TABLE RESOURCE_PROVIDERS ADD SERVER VARCHAR(20);


CREATE TABLE SUMMARY_ORDER (
    RESULT_SUMMARY VARCHAR(2) NOT NULL,
    RESULT_SEVERITY SMALLINT NOT NULL,
    CONSTRAINT Uni_ResultSummary PRIMARY KEY(RESULT_SUMMARY)
)IN itimdbTag.TMTS4SM;

CREATE UNIQUE INDEX TIMPMKY250
  ON SUMMARY_ORDER(RESULT_SUMMARY)
  USING STOGROUP itimsgTag PRIQTY 10000 SECQTY 1000;

/**********************************************************
 *							  
 *  The section below contains the database schema 
 *  changes from FP25 to FP33 (L3_itim_46_5795)
 *                                                        
 **********************************************************/

ALTER TABLE ENTITLEMENT_PROVISIONINGPARAMS
ALTER ATTRIBUTEVALUE SET DATA TYPE VARCHAR(4000);


/**********************************************************
 *							  
 *  The section below contains the database schema 
 *  changes from the latest 4.6 fix pack level (FP33) to ITIM 5.0
 *                                                        
 **********************************************************/
 
ALTER TABLE RESOURCE_PROVIDERS 
  ALTER SERVER SET DATA TYPE VARCHAR(255);

CREATE INDEX RESPROVSTATUSX on RESOURCE_PROVIDERS (RESOURCE_STATUS ASC, RESTART_TIME ASC, PROVIDER_ID ASC)
  BUFFERPOOL BP0
  USING STOGROUP itimsgTag PRIQTY 10000 SECQTY 1000;

ALTER TABLE REMOTE_RESOURCES_RECONS 
  ADD COLUMN RECON_NAME VARCHAR (300)
  ADD COLUMN DESCRIPTION VARCHAR (300);

ALTER TABLE REMOTE_RESOURCES_RECON_QUERIES 
  ADD COLUMN SUPPORT_DATA_ONLY SMALLINT;

ALTER TABLE LCR_INPROGRESS_TABLE VOLATILE;
CREATE INDEX LCR_CHILD_ID_X ON LCR_INPROGRESS_TABLE (CHILD_ID ASC) ALLOW REVERSE SCANS;

ALTER TABLE PO_TOPIC_TABLE 
  ALTER SERVER SET DATA TYPE VARCHAR(255);

ALTER TABLE SCHEDULED_MESSAGE 
  ADD COLUMN SMALL_MESSAGE VARCHAR(4000)
  ALTER SERVER SET DATA TYPE VARCHAR(255);

CREATE INDEX SCH_MSG_SVR_X on SCHEDULED_MESSAGE (SERVER ASC) ALLOW REVERSE SCANS;

ALTER TABLE PROCESS
  ADD COLUMN SUBJECT_ACCESS_ID VARCHAR(2000)
  ADD COLUMN SUBJECT_ACCESS_NAME VARCHAR(100)
  ADD COLUMN SHORT_DETAIL VARCHAR(4000);
  
CREATE INDEX PROCESS_SUB_X ON PROCESS (SUBMITTED DESC, PARENT_ID ASC);
CREATE INDEX PROCESS_ID_ST ON PROCESS (ID ASC, STATE ASC);


ALTER TABLE ACTIVITY
  ADD COLUMN SHORT_DETAIL VARCHAR(4000);
  
CREATE INDEX PROCESSDATA_ID_DEF on PROCESSDATA (PROCESS_ID ASC, DEF_ID ASC, VALUE_LAST_MODIFIED ASC);


ALTER TABLE PROCESSLOG
  ADD COLUMN SMALL_NEW_DATA VARCHAR(4000);


ALTER TABLE LISTDATA VOLATILE;


CREATE TABLE SERVICE_ACCOUNT_MAPPING (
  SERVICEPROFILE VARCHAR (255) NOT NULL,
  ACCOUNTPROFILE VARCHAR (255) NOT NULL,
  PRIMARY KEY (SERVICEPROFILE, ACCOUNTPROFILE)
)IN itimdbTag.TMTSMISC;

CREATE UNIQUE INDEX TIMPMKY210
  ON SERVICE_ACCOUNT_MAPPING(SERVICEPROFILE, ACCOUNTPROFILE)
  USING STOGROUP itimsgTag PRIQTY 10000 SECQTY 1000;
  
  
ALTER TABLE RECONCILIATION 
  ADD COLUMN ACTIVITY_ID DECIMAL(19,0);
  
ALTER TABLE RECONCILIATION_INFO 
  ADD COLUMN HANDLE DECIMAL(19,0);
  
ALTER TABLE WORKFLOW_CALLBACK VOLATILE;
CREATE INDEX WF_CALLBACK_PID_X ON WORKFLOW_CALLBACK (PROCESS_ID ASC) ALLOW REVERSE SCANS;

CREATE INDEX POL_ANALY_ACC_X on POLICY_ANALYSIS (LAST_ACCESSED ASC, ANALYSIS_ID);

/* ALTER TABLE POLICY_ANALYSIS_ERROR 
  ALTER ERROR_MESSAGE SET DATA TYPE CLOB(100K) NOT NULL;*/
  
ALTER TABLE AUDIT_MGMT_PROVISIONING
  ADD COLUMN access_name VARCHAR (1000) 
  ADD COLUMN access_dn VARCHAR (1000);
  
CREATE TABLE RECERTIFICATIONLOG (
  PROCESS_ID DECIMAL(19,0) NOT NULL,
  ACTIVITY_ID DECIMAL(19,0) NOT NULL,
  ENTITY_DN VARCHAR(255),
  ACCESS_DN VARCHAR(255),
  ACCOUNT_ID VARCHAR(100),
  ACCOUNT_OWNER_NAME VARCHAR(100),
  ACCOUNT_OWNER VARCHAR(255),
  ACCESS_NAME VARCHAR(100),
  ACCESS_TYPE VARCHAR(100),
  TYPE VARCHAR(2) NOT NULL,
  SERVICE VARCHAR(255),
  SERVICE_NAME VARCHAR(100),
  SERVICE_PROFILE VARCHAR(100),
  PARTICIPANT VARCHAR(255),
  PARTICIPANT_NAME VARCHAR(100),
  PARTICIPANT_ID VARCHAR(100),
  RECERT_RESULT VARCHAR(2),
  ACTION VARCHAR(2),
  COMMENTS VARCHAR(2000),
  STARTED VARCHAR(50),
  COMPLETED VARCHAR(50),
  RESULT_SUMMARY VARCHAR(2),
  TENANT VARCHAR(255),
  CONSTRAINT RECERT_PK PRIMARY KEY(PROCESS_ID, ACTIVITY_ID)
) IN itimdbTag.TMTS32LG;

CREATE UNIQUE INDEX TIMPMKY215
  ON RECERTIFICATIONLOG(PROCESS_ID, ACTIVITY_ID)
  USING STOGROUP itimsgTag PRIQTY 10000 SECQTY 1000;
  

CREATE TABLE SCRIPT  (
		  TYPE CHAR(1) NOT NULL,
		  ID VARCHAR(50) NOT NULL,
		  JOIN_ORDER SMALLINT NOT NULL,
		  PERSON_ATTRIBUTE VARCHAR(100) NOT NULL,
		  FIRST_LAST SMALLINT,
		  CONCATENATE_CHAR CHAR(10),
		  CONSTRAINT SCRIPT_PK PRIMARY KEY(TYPE, ID, JOIN_ORDER)
) IN itimdbTag.TMTSMISC;

CREATE UNIQUE INDEX TIMPMKY225
  ON SCRIPT(TYPE, ID, JOIN_ORDER)
  USING STOGROUP itimsgTag PRIQTY 10000 SECQTY 1000;


DROP VIEW ROOTPROCESSVIEW;

CREATE VIEW ROOTPROCESSVIEW (ID, TYPE, REQUESTER) AS
(
  SELECT ID, TYPE, REQUESTER
  FROM PROCESS
  WHERE  PROCESS.ROOT_PROCESS_ID  = 0
  OR PROCESS.ROOT_PROCESS_ID  = PROCESS.ID
  AND PROCESS.TYPE IN ('OP','AA','AC','UA','UC','UD','US','UR','UO','SR','OA','OC','AD',
            'AS','AR','AP','LO','AO','LS','LR','LP','LD','MS','MR','MD','DA','DC',
            'DD','PA','PC','PD','SA','SC','SD','PS','EN','RC','PE','LC','CP','EP','RP','SM','MA','EA','ER','HR')
);

DROP VIEW SUBPROCESSVIEW;

CREATE VIEW SUBPROCESSVIEW (ROOT_PROCESS_ID, SUBMITTED, COMPLETED, SUBJECT_PROFILE,
  SUBJECT_SERVICE, SUBJECT, TYPE, REQUESTER, RESULT_SUMMARY)
AS
(
  SELECT ROOT_PROCESS_ID, SUBMITTED, COMPLETED, SUBJECT_PROFILE,
    SUBJECT_SERVICE, SUBJECT, TYPE, REQUESTER,
    CASE
      WHEN RESULT_SUMMARY = '' THEN 'PE'
      ELSE RESULT_SUMMARY
    END as RESULT_SUMMARY
  FROM PROCESS 
  WHERE TYPE IN ('OA', 'OC', 'AD', 'AS', 'AR', 'AP')
);

DROP VIEW PENDING_APPROVAL;

CREATE VIEW PENDING_APPROVAL (PROCESSID, RESULT_SUMMARY)
AS
(
  SELECT PROCESS.ID,
    CASE
      WHEN WORKITEM.LOCK_OWNER IS NULL THEN ACTIVITY.RESULT_SUMMARY
      ELSE 'LK'
    END
  FROM PROCESS, ACTIVITY, WORKITEM
  WHERE WORKITEM.PROCESS_ID = PROCESS.ID AND WORKITEM.ACTIVITY_ID = ACTIVITY.ID
);

CREATE VIEW SUSPENDED_USERS (REQUESTEE, COMPLETED) AS
(
  SELECT PROCESS.REQUESTEE, MAX(PROCESS.COMPLETED)
  FROM PROCESS 
  WHERE PROCESS.TYPE = 'US'
  GROUP BY PROCESS.REQUESTEE
);

CREATE VIEW SUSPENDED_ACCOUNT_OPERATIONS (REQUESTEE, SUBJECT_SERVICE, SUBJECT, SUBJECT_PROFILE, COMPLETED) AS
(
  SELECT PROCESS.REQUESTEE, PROCESS.SUBJECT_SERVICE, PROCESS.SUBJECT, PROCESS.SUBJECT_PROFILE, MAX(PROCESS.COMPLETED)
  FROM PROCESS 
  WHERE PROCESS.TYPE = 'AS'
  GROUP BY PROCESS.REQUESTEE, PROCESS.SUBJECT_SERVICE, PROCESS.SUBJECT, PROCESS.SUBJECT_PROFILE
);

CREATE VIEW PROCESS_VIEW (ID, REQUESTER, REQUESTEE)
AS
(
  SELECT PROCESS.ID, COALESCE(PROCESS.REQUESTER, ' ') as REQUESTER, COALESCE(PROCESS.REQUESTEE, ' ') as REQUESTEE
  FROM PROCESS
);

CREATE TABLE MANUAL_SERVICE_RECON_ACCOUNTS (
  GLOBAL_ID VARCHAR(255) NOT NULL,
  ACCOUNTS CLOB(10M),
  ROW_ID ROWID GENERATED ALWAYS NOT NULL,
  PRIMARY KEY (GLOBAL_ID)
)IN itimdbTag.TMTSMISC;

CREATE UNIQUE INDEX TIMPMKY230
  ON MANUAL_SERVICE_RECON_ACCOUNTS(GLOBAL_ID)
  USING STOGROUP itimsgTag PRIQTY 10000 SECQTY 1000;

CREATE LOB TABLESPACE TMTSLO17 IN itimdbTag LOG NO
BUFFERPOOL BP0 LOCKSIZE ANY;

CREATE AUXILIARY TABLE TMTBLO17 IN itimdbTag.TMTSLO17
  STORES MANUAL_SERVICE_RECON_ACCOUNTS
  COLUMN ACCOUNTS;

CREATE UNIQUE INDEX TMLONX17 ON TMTBLO17
  USING STOGROUP itimsgTag PRIQTY 10000 SECQTY 1000;


CREATE TABLE VIEW_DEFINITION (
  ID INT NOT NULL,
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(2000),
  CONSTRAINT VIEW_DEFINITION_PK PRIMARY KEY(ID)
)IN itimdbTag.TMTS4SM;

CREATE UNIQUE INDEX TIMPMKY235
  ON VIEW_DEFINITION(ID)
  USING STOGROUP itimsgTag PRIQTY 10000 SECQTY 1000;


CREATE TABLE TASKS_VIEWABLE (
  TASK_ID VARCHAR(255) NOT NULL,
  VIEW_ID INT NOT NULL,
  VIEWABLE CHAR(1) NOT NULL DEFAULT 'N',
  CONSTRAINT TASKS_VIEWABLE_PK PRIMARY KEY(TASK_ID, VIEW_ID),
  CONSTRAINT VIEW_ID_FK FOREIGN KEY (VIEW_ID) REFERENCES VIEW_DEFINITION (ID)
)IN itimdbTag.TMTS4SM;

CREATE UNIQUE INDEX TIMPMKY240
  ON TASKS_VIEWABLE(TASK_ID, VIEW_ID)
  USING STOGROUP itimsgTag PRIQTY 10000 SECQTY 1000;
  


ALTER TABLE PENDING VOLATILE;
ALTER TABLE SYNCH_POINT VOLATILE;

ALTER TABLE BULK_DATA_SERVICE
  ADD COLUMN FILENAME VARCHAR(255)
  ADD COLUMN DESCNAME VARCHAR(255);

ALTER TABLE MIGRATION_STATUS 
  ADD COLUMN SERVICEID DECIMAL(19,0);
  
CREATE TABLE COMMON_TASKS  (
	PERSONA VARCHAR(100) NOT NULL, 
	TASK_ID VARCHAR(255) NOT NULL,
	CONSTRAINT COMMON_TASKS_PK PRIMARY KEY(PERSONA, TASK_ID) 
) IN itimdbTag.TMTS4SM;  

CREATE UNIQUE INDEX TIMPMKY245
  ON COMMON_TASKS(PERSONA, TASK_ID)
  USING STOGROUP itimsgTag PRIQTY 10000 SECQTY 1000;

/** Tablespace for the following table(s):
 --Volatile ACTIVITY_LOCK table (new in 5.0)
 */
CREATE TABLESPACE TMTSWF12 IN itimdbTag BUFFERPOOL BP0
 COMPRESS YES
 USING STOGROUP itimsgTag
       PRIQTY 128000
       SECQTY 32000
 ERASE YES PCTFREE 0 SEGSIZE 32 LOCKSIZE ROW CLOSE YES  GBPCACHE ALL;  
  
CREATE TABLE ACTIVITY_LOCK (
  PROCESS_ID DECIMAL(19,0) NOT NULL,
  ACTIVITY_ID DECIMAL(19,0) NOT NULL,
  SERVER VARCHAR(255) NOT NULL,
  THREAD_ID DECIMAL(19,0) NOT NULL,
  LOCK_COUNT INTEGER,
  CONSTRAINT ACTIVITY_LOCK_PK PRIMARY KEY(PROCESS_ID, ACTIVITY_ID, SERVER, THREAD_ID),
  CONSTRAINT ACTIVITY_LOCK_PFK FOREIGN KEY(PROCESS_ID) REFERENCES PROCESS(ID),
  CONSTRAINT ACTIVITY_LOCK_AFK FOREIGN KEY(ACTIVITY_ID) REFERENCES ACTIVITY(ID) 
) IN itimdbTag.TMTSWF12 VOLATILE;

CREATE UNIQUE INDEX TIMPMKY220
  ON ACTIVITY_LOCK(PROCESS_ID, ACTIVITY_ID, SERVER, THREAD_ID)
  USING STOGROUP itimsgTag PRIQTY 10000 SECQTY 1000;
  
ALTER TABLE RESOURCE_PROVIDERS 
  ADD COLUMN RESOURCE_TEST_STATUS SMALLINT
  ADD COLUMN LAST_TEST_STATUS_TIME TIMESTAMP;
CREATE INDEX AUDIT_REPORT1 ON AUDIT_EVENT (TIMESTAMP ASC, ITIM_EVENT_CATEGORY ASC) USING STOGROUP itimsgTag PRIQTY 10000 SECQTY 1000;

/**********************************************************
 *                                                        
 *  The section below contains the database schema 
 *  changes from the ITIM 5.0 FP01 to FP02
 *                                                        
 **********************************************************/

CREATE TABLE PASSWORD_SYNCH (
    ACTIVITY_ID DECIMAL(19,0) NOT NULL,
    ACCOUNT_DN VARCHAR(512),
    TIME_REQUESTED VARCHAR(50),
    PASSWORD VARCHAR(500),

    CONSTRAINT PWD_SYNCH_PK PRIMARY KEY(ACTIVITY_ID)
) IN itimdbTag.TMTSMISC;

CREATE UNIQUE INDEX TIMPMKY255
  ON PASSWORD_SYNCH(ACTIVITY_ID)
  USING STOGROUP itimsgTag PRIQTY 10000 SECQTY 1000;

CREATE INDEX PS_ACCDN_X ON PASSWORD_SYNCH(ACCOUNT_DN)
  USING STOGROUP itimsgTag PRIQTY 10000 SECQTY 1000;

CREATE INDEX PS_TIME_X ON PASSWORD_SYNCH(TIME_REQUESTED)
  USING STOGROUP itimsgTag PRIQTY 10000 SECQTY 1000;

ALTER TABLE ENTITLEMENT_PROVISIONINGPARAMS
   ADD COLUMN SERVICETARGETNAME VARCHAR (255)
   ADD COLUMN SERVICE_DN VARCHAR (255);