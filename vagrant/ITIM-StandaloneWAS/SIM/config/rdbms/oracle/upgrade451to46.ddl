ALTER TABLE REMOTE_SERVICES_REQUESTS
MODIFY(DATA CLOB);
COMMIT;

ALTER INDEX REMOTE_SVR_REQ_PK REBUILD;
COMMIT;

CREATE INDEX RS_REQ_PID_X ON REMOTE_SERVICES_REQUESTS(PROVIDER_ID)
  TABLESPACE enrole_indexes;

CREATE INDEX RS_REQ_RTIME_X ON REMOTE_SERVICES_REQUESTS(REQUEST_TIME)
  TABLESPACE enrole_indexes;

CREATE TABLE LCR_INPROGRESS_TABLE (
  TENANT VARCHAR(256) NOT NULL,
  RULE_ID NUMBER(20) NOT NULL,
  RULE_OP VARCHAR(256),
  CHILD_ID NUMBER(20),
  START_TIME NUMBER(20),
  ENTITY_ID VARCHAR(256) NOT NULL,
  CONSTRAINT Unique_RuleEntity PRIMARY KEY(RULE_ID,ENTITY_ID)
  USING
  INDEX
  TABLESPACE enrole_indexes
   )
  TABLESPACE enrole_data;

  CREATE TABLE PO_TOPIC_TABLE
  (
  TENANT            VARCHAR(256) NOT NULL,
  TOPIC            VARCHAR(256) NOT NULL,
  SERVER            VARCHAR(20),
  CHECKPOINT_TIME        NUMBER(20),
  TOPIC_ID            NUMBER(20) NOT NULL,
  CONSTRAINT Unique_TenantTopic PRIMARY KEY(TENANT,
                      TOPIC),
  CONSTRAINT Unique_TopicID UNIQUE(TOPIC_ID)
  USING
  INDEX
  TABLESPACE enrole_indexes
   )
  TABLESPACE enrole_data;


CREATE TABLE PO_NOTIFICATION_TABLE
  (
  NOTIFICATION_ID   NUMBER(20) NOT NULL,
  TOPIC_ID        NUMBER(20) NOT NULL,
  SUBJECT       VARCHAR(2000),
  TEXTBODY        Long,
  RECEIVE_TIME      NUMBER(20) NOT NULL,
  RECIPIENT_EADDR   VARCHAR(320) NOT NULL,
  RECIPIENT_LOCALE    VARCHAR(256),
  CONSTRAINT TenantTopic_parent FOREIGN KEY(TOPIC_ID) REFERENCES PO_TOPIC_TABLE(TOPIC_ID),
  CONSTRAINT NOTIFICATION_ID_PK PRIMARY KEY(NOTIFICATION_ID)
  USING
  INDEX
  TABLESPACE enrole_indexes
   )
  TABLESPACE enrole_data;
CREATE INDEX PO_NotifyIndex ON PO_NOTIFICATION_TABLE(TOPIC_ID)
  TABLESPACE enrole_indexes;


CREATE TABLE PO_NOTIFICATION_HTMLBODY_TABLE (
  NOTIFICATION_ID        NUMBER(20) NOT NULL,
  HTMLBODY            Long,
  CONSTRAINT NotificationIDLinkage FOREIGN KEY(NOTIFICATION_ID) REFERENCES PO_NOTIFICATION_TABLE(NOTIFICATION_ID) ON DELETE CASCADE,
  CONSTRAINT NOTIFICATION_ID_HTML_PK PRIMARY KEY(NOTIFICATION_ID)
  USING
  INDEX
  TABLESPACE enrole_indexes
)
TABLESPACE enrole_data;
COMMIT;

ALTER TABLE PROCESS ADD SUBJECT_PROFILE VARCHAR2(100);
COMMIT;

ALTER TABLE PROCESS ADD SUBJECT_SERVICE VARCHAR2(100);
COMMIT;

ALTER TABLE PROCESS ADD ROOT_PROCESS_ID NUMBER(20) DEFAULT 0 NOT NULL;
COMMIT;

CREATE INDEX PROCESS_PARENT_X ON PROCESS(PARENT_ID) TABLESPACE enrole_indexes;
COMMIT;

ALTER TABLE ACTIVITY
  MODIFY  RESULT_SUMMARY VARCHAR2 (5);
COMMIT;

ALTER TABLE PROCESSDATA ADD VALUE_LAST_MODIFIED NUMBER(20) DEFAULT 0;

ALTER TABLE SCHEDULED_MESSAGE
ADD REFERENCE2_ID VARCHAR2(50);
COMMIT;

CREATE INDEX SCHEDULED_MSG_X ON SCHEDULED_MESSAGE (REFERENCE2_ID)
  TABLESPACE enrole_indexes;

ALTER TABLE RESOURCE_PROVIDERS
ADD RESTART_TIME DATE;
COMMIT;

CREATE TABLE WI_PARTICIPANT (
  ID    NUMBER(20)  NOT NULL,
  WORKITEM_ID   NUMBER(20)  NOT NULL,
  PARTICIPANT   VARCHAR2 (512) NOT NULL,
    PARTICIPANT_TYPE   VARCHAR2 (2)     NOT NULL,
   CONSTRAINT WI_PARTICIPANT_PK PRIMARY KEY(ID) USING
    INDEX
  TABLESPACE enrole_indexes
)TABLESPACE enrole_data;
COMMIT;

CREATE INDEX WIPART_WIID_X ON WI_PARTICIPANT (WORKITEM_ID)
TABLESPACE enrole_indexes;
CREATE INDEX WIPART_DN_X ON WI_PARTICIPANT (PARTICIPANT)
TABLESPACE enrole_indexes;
COMMIT;

INSERT INTO enrole.WI_PARTICIPANT (ID,WORKITEM_ID, PARTICIPANT, PARTICIPANT_TYPE)
SELECT workitem.ID, workitem.ID,workitem.PARTICIPANT, workitem.PARTICIPANT_TYPE
FROM enrole.WORKITEM;
COMMIT;


ALTER TABLE enrole.WORKITEM
DROP COLUMN PARTICIPANT_TYPE;

ALTER TABLE enrole.WORKITEM
DROP COLUMN PARTICIPANT;

ALTER TABLE enrole.WORKITEM
ADD (DUE_DATE NUMBER(20), LOCK_OWNER varchar2(512), DESCRIPTION varchar2(4000),
PROCESS_DEFINITION_ID varchar2(512), ACTIVITY_DEFINITION_ID varchar2(100),
ACTIVITY_TYPE varchar2(1), ACTIVITY_SUBTYPE varchar2(2), ACTIVITY_NAME varchar2(100),
REQUESTEE_NAME varchar2(100), REQUESTER_NAME varchar2(100), SUBJECT varchar2(2000) );
COMMIT;

UPDATE enrole.WORKITEM SET PROCESS_DEFINITION_ID =
  (SELECT process.DEFINITION_ID FROM enrole.PROCESS where workitem.PROCESS_ID=process.ID);

UPDATE enrole.WORKITEM SET ACTIVITY_DEFINITION_ID =
  (SELECT activity.DEFINITION_ID FROM enrole.ACTIVITY where workitem.ACTIVITY_ID=activity.ID);

UPDATE enrole.WORKITEM SET ACTIVITY_TYPE =
  (SELECT activity.TYPE FROM enrole.ACTIVITY where workitem.ACTIVITY_ID=activity.ID);
COMMIT;

UPDATE enrole.WORKITEM SET ACTIVITY_SUBTYPE =
  (SELECT activity.SUBTYPE FROM enrole.ACTIVITY where workitem.ACTIVITY_ID=activity.ID);
COMMIT;

UPDATE enrole.WORKITEM SET ACTIVITY_NAME =
  (SELECT activity.NAME FROM enrole.ACTIVITY where workitem.ACTIVITY_ID=activity.ID);
COMMIT;

UPDATE enrole.WORKITEM SET REQUESTEE_NAME =
  (SELECT process.REQUESTEE_NAME FROM enrole.PROCESS where workitem.PROCESS_ID=process.ID);

UPDATE enrole.WORKITEM SET REQUESTER_NAME =
  (SELECT process.REQUESTER_NAME FROM enrole.PROCESS where workitem.PROCESS_ID=process.ID);

UPDATE enrole.WORKITEM SET SUBJECT =
  (SELECT process.SUBJECT FROM enrole.PROCESS where workitem.PROCESS_ID=process.ID);

ALTER TABLE enrole.WORKITEM
MODIFY (PROCESS_DEFINITION_ID varchar2(512) NOT NULL,ACTIVITY_DEFINITION_ID varchar2(100) NOT NULL);
COMMIT;


CREATE INDEX WORKITEM_PID_X ON WORKITEM (PROCESS_ID)
TABLESPACE enrole_indexes;
CREATE INDEX WORKITEM_AID_X ON WORKITEM (ACTIVITY_ID)
TABLESPACE enrole_indexes;
CREATE INDEX WORKITEM_ADEF_X ON WORKITEM (ACTIVITY_DEFINITION_ID)
TABLESPACE enrole_indexes;
CREATE INDEX WORKITEM_PDEF_X ON WORKITEM (PROCESS_DEFINITION_ID)
TABLESPACE enrole_indexes;


ALTER TABLE enrole.WI_PARTICIPANT ADD CONSTRAINT
  WORKITEM_ID_FK FOREIGN KEY
  (
  WORKITEM_ID
  ) REFERENCES enrole.WORKITEM
  (
  ID
  ) ON DELETE CASCADE;
COMMIT;

CREATE TABLE WORKFLOW_CALLBACK (
  ID NUMBER(20) NOT NULL,
  PROCESS_ID NUMBER(20) NOT NULL,
  MESSAGE_OBJECT VARCHAR(2000) NOT NULL,
  EVENT_TRIGGER  CHAR(1),
  CONSTRAINT WF_CALLBACK_FK FOREIGN KEY(PROCESS_ID) REFERENCES PROCESS(ID),
  CONSTRAINT WF_CALLBACK_PK PRIMARY KEY(ID) USING
  INDEX
  TABLESPACE enrole_indexes
)
TABLESPACE enrole_data;
COMMIT;

CREATE TABLE SYNCH_POINT (
  PROCESS_ID NUMBER(20) NOT NULL,
  DEFINITION_ID varchar2(100) NOT NULL,
  ACTIVITY_INDEX NUMBER(10) NOT NULL,
  WAIT_LOCK NUMBER(10) NOT NULL,
  JOIN_ENABLED NUMBER NOT NULL,
  CONSTRAINT SYNCH_POINT_PK PRIMARY KEY(PROCESS_ID, DEFINITION_ID, ACTIVITY_INDEX) USING
  INDEX
  TABLESPACE enrole_indexes
)
TABLESPACE enrole_data;

CREATE INDEX SYNCH_POINT_PID_X ON SYNCH_POINT (PROCESS_ID DESC)
TABLESPACE enrole_indexes;
COMMIT;

ALTER TABLE REPORT ADD REPORTCATEGORY VARCHAR(255) DEFAULT 'customReports' NOT NULL;
COMMIT;
ALTER TABLE REPORT ADD REPORTSUBTYPE VARCHAR(255) DEFAULT 'custom' NOT NULL;
COMMIT;
ALTER TABLE REPORT ADD EDITABLE CHAR(1);
COMMIT;

UPDATE REPORT SET EDITABLE='Y';
COMMIT;

ALTER TABLE ACI ADD OBJECTFILTER VARCHAR(1023);
COMMIT;
ALTER TABLE ACI ADD CATEGORY VARCHAR(255);
COMMIT;
UPDATE ACI SET OBJECTFILTER='', CATEGORY='';
COMMIT;

ALTER TABLE ENTITY_COLUMN ADD IMPLICITLY_MAPPED CHAR(1);
COMMIT;
UPDATE ENTITY_COLUMN SET IMPLICITLY_MAPPED='N';
COMMIT;

CREATE TABLE AUTHORIZATION_OWNERS (
  USERDN VARCHAR(255) NOT NULL,
  CONTAINERDN VARCHAR(255) NOT NULL,
  PRIMARY KEY (USERDN, CONTAINERDN)
)
TABLESPACE enrole_data;
COMMIT;

CREATE TABLE RECONCILIATION (
  RECONID VARCHAR(255) NOT NULL,
  SERVICEDN VARCHAR(2000) NOT NULL,
  PROCESSEDACCOUNTS INTEGER NOT NULL,
  LOCALACCOUNTS INTEGER NOT NULL,
  TIMUSERACCOUNTS INTEGER NOT NULL,
  POLICYVIOLATIONS INTEGER NOT NULL,
  STARTED DATE NOT NULL,
  COMPLETED DATE NOT NULL,
  PRIMARY KEY (RECONID)
)
TABLESPACE enrole_data;
COMMIT;

CREATE TABLE RECONCILIATION_INFO (
  RECONID VARCHAR(255) NOT NULL,
  ACCOUNTID VARCHAR(255),
  POLICYCOMPLIANCESTATUS VARCHAR(20),
  USERNAME VARCHAR(255),
  OPERATION VARCHAR(20),
  REMARKS VARCHAR(1000),
  FOREIGN KEY (RECONID) REFERENCES RECONCILIATION (RECONID)
)
TABLESPACE enrole_data;

/**
--
-- POLICY_ANALYSIS
--
-- This table is used to store policy analysis session information
--
--
*/
CREATE TABLE POLICY_ANALYSIS (
  ANALYSIS_ID VARCHAR(32) NOT NULL,
  TENANT_NAME VARCHAR(64),
  STATUS NUMBER(2) NOT NULL,
  REASON NUMBER(2) NOT NULL,
  CONTEXT NUMBER(2) NOT NULL,
  CHANGE_TYPE NUMBER(2) NOT NULL,
  LAST_ACCESSED DATE NOT NULL,
  WORKERS_STARTED NUMBER(10) DEFAULT 0 NOT NULL,
  WORKERS_COMPLETED NUMBER(10) DEFAULT 0 NOT NULL,
  WORKERS_TOTAL NUMBER(10) DEFAULT 0 NOT NULL,
  ACCOUNTS_EVALUATED NUMBER(10) DEFAULT 0 NOT NULL,
  CONSTRAINT PK_POLICY_ANALYSIS PRIMARY KEY(ANALYSIS_ID)
  USING INDEX
  TABLESPACE enrole_indexes
)
TABLESPACE enrole_data;

/**
--
-- ACCT_CHANGE, ATTR_CHANGE, POLICY_ANALYSIS_ERROR are used to stage policy change preview data
--
*/
CREATE TABLE ACCT_CHANGE (
  CHANGE_ID VARCHAR(32) NOT NULL,
  ACCT_UID VARCHAR(60) NOT NULL,
  ACCT_IDENTIFIER VARCHAR(255) NOT NULL,
  SERVICE_NAME VARCHAR(200) NOT NULL,
  SERVICE_IDENTIFIER VARCHAR(255) NOT NULL,
  OWNER_NAME VARCHAR(200) NOT NULL,
  OWNER_IDENTIFIER VARCHAR(255) NOT NULL,
  OPERATION_TYPE NUMBER(2) NOT NULL,
  PROVISION_PRIORITY NUMBER(5),
  SEQUENCE_NR NUMBER(5),
  REASON NUMBER(2) NOT NULL,
  REVOKE_CHANGE NUMBER(2) NOT NULL,
  STATUS NUMBER(2),
  POLICY_ANALYSIS_ID VARCHAR(32) NOT NULL,
  CONSTRAINT FK_POLICY_ANALYSIS FOREIGN KEY(POLICY_ANALYSIS_ID) REFERENCES POLICY_ANALYSIS(ANALYSIS_ID)
  ON DELETE CASCADE,
  CONSTRAINT PK_ACCT_CHANGE PRIMARY KEY(POLICY_ANALYSIS_ID, CHANGE_ID)
  USING INDEX
  TABLESPACE enrole_indexes
)
TABLESPACE enrole_data;

CREATE TABLE ATTR_CHANGE (
  CHANGE_ID VARCHAR(32) NOT NULL,
  ATTR_NAME VARCHAR(100) NOT NULL,
  ATTR_VALUE VARCHAR(2000),
  OPERATION_TYPE NUMBER(2) NOT NULL,
  PRIVILEGE_ACTION_TYPE NUMBER(2) NOT NULL,
  ATTR_VALUE_PRESENCE NUMBER(2) NOT NULL,
  POLICY_ANALYSIS_ID VARCHAR(32) NOT NULL,
  ACCT_CHANGE_ID VARCHAR(32) NOT NULL,
  CONSTRAINT FK_ATTR_CHANGE FOREIGN KEY(POLICY_ANALYSIS_ID, ACCT_CHANGE_ID)
  REFERENCES ACCT_CHANGE(POLICY_ANALYSIS_ID, CHANGE_ID)
  ON DELETE CASCADE,
  CONSTRAINT PK_ATTR_CHANGE PRIMARY KEY(POLICY_ANALYSIS_ID, ACCT_CHANGE_ID, CHANGE_ID)
  USING INDEX
  TABLESPACE enrole_indexes
)
TABLESPACE enrole_data;

CREATE TABLE POLICY_ANALYSIS_ERROR (
  ERROR_ID  VARCHAR(32) NOT NULL,
  ENTITY_NAME VARCHAR(100),
  ENTITY_IDENTIFIER VARCHAR(255),
  ENTITY_TYPE  NUMBER(2),
  SERVICE_NAME VARCHAR(200),
  SERVICE_IDENTIFIER VARCHAR(255),
  PERSON_NAME  VARCHAR(200),
  PERSON_IDENTIFIER VARCHAR(255),
  POLICY_NAME VARCHAR(100),
  POLICY_IDENTIFIER VARCHAR(255),
  ATTR_NAME VARCHAR(100),
  ERROR_TYPE NUMBER(5) NOT NULL,
  ENTITY_ERROR_TYPE  NUMBER(5),
  ERROR_MESSAGE LONG NOT NULL,
  POLICY_ANALYSIS_ID VARCHAR(32) NOT NULL,
  CONSTRAINT FK_ANALYSIS_ERROR FOREIGN KEY(POLICY_ANALYSIS_ID) REFERENCES POLICY_ANALYSIS(ANALYSIS_ID)
  ON DELETE CASCADE,
  CONSTRAINT PK_ANALYSIS_ERROR PRIMARY KEY(ERROR_ID)
  USING INDEX
  TABLESPACE enrole_indexes
)
TABLESPACE enrole_data;

CREATE TABLE COMPLIANCE_ALERT (
  CA_PROC_ID   NUMBER(20),
  CA_ISSUE_DN VARCHAR(512) NOT NULL,
  ACTIVITY_ID   NUMBER(20),
  ACCOUNT_DN  VARCHAR(512) NOT NULL,
  PARTICIPANT_DN  VARCHAR(512),
  STARTED   CHAR(1),
  CONSTRAINT PK_CA PRIMARY KEY(CA_ISSUE_DN)
  USING INDEX
  TABLESPACE enrole_indexes
)
TABLESPACE enrole_data;
CREATE INDEX CA_PID_X ON COMPLIANCE_ALERT(CA_PROC_ID)
TABLESPACE enrole_indexes;
CREATE INDEX CA_ACCDN_X ON COMPLIANCE_ALERT(ACCOUNT_DN)
TABLESPACE enrole_indexes;
CREATE INDEX CA_ACTID_X ON COMPLIANCE_ALERT(ACTIVITY_ID)
TABLESPACE enrole_indexes;

create table enrole.AUDIT_EVENT
(
  id NUMBER(20) NOT NULL,
  itim_event_category VARCHAR2(50) NOT NULL,
  entity_name VARCHAR2(1000),
  entity_dn VARCHAR2(1000),
  entity_type VARCHAR2(50),
  action VARCHAR2(25) NOT NULL,
  initiator_name VARCHAR2(1000),
  initiator_dn VARCHAR2(1000),
  container_name VARCHAR2(1000),
  container_dn VARCHAR2(1000),
  workflow_process_id NUMBER(20),
  result_summary VARCHAR2(25),
  timestamp VARCHAR2(50) NOT NULL,
  comments VARCHAR2(1000),
CONSTRAINT AUDIT_EVENT_PK PRIMARY KEY(id) USING
  INDEX
  TABLESPACE enrole_indexes
)
TABLESPACE enrole_data;

create table enrole.AUDIT_MGMT_PROVISIONING
(
  event_id NUMBER(20) NOT NULL,
  owner_name VARCHAR2(1000),
  owner_dn VARCHAR2(1000),
  service_name VARCHAR2(1000) NOT NULL,
  service_dn VARCHAR2(1000) NOT NULL,
  CONSTRAINT AUDIT_PROV_FK FOREIGN KEY(event_id)
  REFERENCES enrole.AUDIT_EVENT(id)
)
TABLESPACE enrole_data;


create table enrole.AUDIT_MGMT_TARGET
(
  event_id NUMBER(20) NOT NULL,
  target_entity_name VARCHAR2(1000),
  target_entity_dn VARCHAR2(1000),
  target_entity_type VARCHAR2(50),
  CONSTRAINT AUDIT_TARGET_FK FOREIGN KEY(event_id)
  REFERENCES enrole.AUDIT_EVENT(id)
)
TABLESPACE enrole_data;

create table enrole.AUDIT_MGMT_DELEGATE
(
  event_id NUMBER(20) NOT NULL,
  delegate_name VARCHAR2(1000),
  delegate_dn VARCHAR2(1000),
  delegate_start_time VARCHAR2(1000),
  delegate_end_time VARCHAR2(1000),
  CONSTRAINT AUDIT_DELEGATE_FK FOREIGN KEY(event_id)
  REFERENCES enrole.AUDIT_EVENT(id)
)
TABLESPACE enrole_data;

CREATE TABLE enrole.I18NMESSAGES
(
  PROFILE VARCHAR2(256),
  NAME VARCHAR2(256) NOT NULL,
  MESSAGEKEY VARCHAR2(256) NOT NULL,
  MESSAGE VARCHAR2(2000)
)
TABLESPACE enrole_data;

create table enrole.BULK_DATA_SERVICE
(
  id NUMBER(20) NOT NULL,
  starttime DATE,
  endtime DATE,
  mimetype VARCHAR(50),
  name VARCHAR(50),
  data LONG RAW,
  filesize Number(20),
  CONSTRAINT BULK_DATA_SERVICE_PK PRIMARY KEY(id)
)
TABLESPACE enrole_data;

create table enrole.BULK_DATA_STORE
(
  id NUMBER(20) NOT NULL,
  serviceid NUMBER(20) NOT NULL,
  xml LONG RAW,
  CONSTRAINT BULK_DATA_STORE_FK FOREIGN KEY (serviceid)
  REFERENCES BULK_DATA_SERVICE (id) ON DELETE CASCADE,
  CONSTRAINT BULK_DATA_STORE_PK PRIMARY KEY(id)
)
TABLESPACE enrole_data;

create table enrole.BULK_DATA_INDEX
(
  id NUMBER(20) NOT NULL,
  storeid NUMBER(20) NOT NULL,
  dataobjectid VARCHAR(10),
  CONSTRAINT BULK_DATA_INDEX_FK FOREIGN KEY (storeid)
  REFERENCES BULK_DATA_STORE (id) ON DELETE CASCADE,
  CONSTRAINT BULK_DATA_INDEX_PK PRIMARY KEY(id)
)
TABLESPACE enrole_data;

create table enrole.MIGRATION_STATUS
(
  ID NUMBER(20) NOT NULL,
  processCount INTEGER,
  processStatus VARCHAR(50),
  CONSTRAINT MIG_STATUS_PK PRIMARY KEY(ID)
)
TABLESPACE enrole_data;


CREATE VIEW enrole.ROOTPROCESSVIEW (ID, TYPE, REQUESTER) AS
(
  (SELECT ID, TYPE, REQUESTER
  FROM enrole.PROCESS
  WHERE  PROCESS.ROOT_PROCESS_ID  = 0
  OR PROCESS.ROOT_PROCESS_ID  = PROCESS.ID
  AND PROCESS.TYPE IN ('OP','AA','AC','UA','UC','UD','US','UR','UO','SR','OA','OC','AD',
            'AS','AR','AP','LO','AO','LS','LR','LP','MS','MR','MD','DA','DC',
            'DD','PA','PC','PD','SA','SC','SD','PS','EN','RC','PE','LC','CP','EP','LD')
  )
  UNION
  (
  SELECT ID, 'AA', REQUESTER
  FROM enrole.PROCESS
  WHERE  PROCESS.ROOT_PROCESS_ID  = 0
  OR PROCESS.ROOT_PROCESS_ID  = PROCESS.ID
  AND PROCESS.TYPE IN ('OA')
  )
  UNION
  (
  SELECT ID, 'AC', REQUESTER
  FROM enrole.PROCESS
  WHERE  PROCESS.ROOT_PROCESS_ID  = 0
  OR PROCESS.ROOT_PROCESS_ID  = PROCESS.ID
  AND PROCESS.TYPE IN ('OC')
  )
);

CREATE VIEW enrole.SUBPROCESSVIEW (ROOT_PROCESS_ID, SUBMITTED,COMPLETED, SUBJECT_PROFILE, SUBJECT_SERVICE, SUBJECT,
  RESULT_SUMMARY, TYPE, REQUESTER)AS
(
  SELECT ROOT_PROCESS_ID, SUBMITTED,
    COMPLETED, SUBJECT_PROFILE, SUBJECT_SERVICE, SUBJECT,
    RESULT_SUMMARY, TYPE, REQUESTER
  FROM enrole.PROCESS
  WHERE PROCESS.TYPE IN ('OA','OC', 'AD', 'AS', 'AR', 'AP')
);

CREATE VIEW enrole.PENDING_APPROVAL
(PROCESSID, RESULT_SUMMARY)
AS
	(
		(
			SELECT PROCESS.ID, ACTIVITY.RESULT_SUMMARY
			FROM enrole.PROCESS, enrole.ACTIVITY, enrole.WORKITEM
			WHERE
				WORKITEM.PROCESS_ID = PROCESS.ID AND
				WORKITEM.ACTIVITY_ID = ACTIVITY.ID AND
				WORKITEM.LOCK_OWNER IS NULL
		)
		UNION
		(
			SELECT PROCESS.ID, 'LK'
			FROM enrole.PROCESS, enrole.ACTIVITY, enrole.WORKITEM
			WHERE
				WORKITEM.PROCESS_ID = PROCESS.ID AND
				WORKITEM.ACTIVITY_ID = ACTIVITY.ID AND
				WORKITEM.LOCK_OWNER IS NOT NULL
		)
);

COMMIT;

ALTER TABLE ENTITLEMENT_PROVISIONINGPARAMS 
MODIFY ATTRIBUTEVALUE VARCHAR(4000);
COMMIT;

ALTER TABLE RESOURCE_PROVIDERS ADD SERVER VARCHAR2(20);
COMMIT;

CREATE TABLE SUMMARY_ORDER (
    RESULT_SUMMARY varchar2(2) NOT NULL,
    RESULT_SEVERITY NUMBER NOT NULL UNIQUE,
    CONSTRAINT Uni_ResultSummary PRIMARY KEY(RESULT_SUMMARY),
    CONSTRAINT Range_Value CHECK (RESULT_SEVERITY >= 0 AND RESULT_SEVERITY <= 100)
)
TABLESPACE enrole_data;

INSERT INTO SUMMARY_ORDER(RESULT_SUMMARY, RESULT_SEVERITY) VALUES ('SF', 100);
INSERT INTO SUMMARY_ORDER(RESULT_SUMMARY, RESULT_SEVERITY) VALUES ('SW', 99);
INSERT INTO SUMMARY_ORDER(RESULT_SUMMARY, RESULT_SEVERITY) VALUES ('ST', 98);
INSERT INTO SUMMARY_ORDER(RESULT_SUMMARY, RESULT_SEVERITY) VALUES ('AR', 97);
INSERT INTO SUMMARY_ORDER(RESULT_SUMMARY, RESULT_SEVERITY) VALUES ('PF', 96);
INSERT INTO SUMMARY_ORDER(RESULT_SUMMARY, RESULT_SEVERITY) VALUES ('SK', 95);
INSERT INTO SUMMARY_ORDER(RESULT_SUMMARY, RESULT_SEVERITY) VALUES ('ES', 94);
INSERT INTO SUMMARY_ORDER(RESULT_SUMMARY, RESULT_SEVERITY) VALUES ('AA', 93);
INSERT INTO SUMMARY_ORDER(RESULT_SUMMARY, RESULT_SEVERITY) VALUES ('RS', 92);
INSERT INTO SUMMARY_ORDER(RESULT_SUMMARY, RESULT_SEVERITY) VALUES ('PE', 1);
INSERT INTO SUMMARY_ORDER(RESULT_SUMMARY, RESULT_SEVERITY) VALUES ('SS', 0);
COMMIT;

CREATE TABLE PASSWORD_SYNCH (
	ACTIVITY_ID NUMBER(20) NOT NULL,
	ACCOUNT_DN VARCHAR2(512),
	TIME_REQUESTED VARCHAR2(50),
	PASSWORD VARCHAR2(500),

	CONSTRAINT PWD_SYNCH_PK PRIMARY KEY(ACTIVITY_ID)
	USING INDEX
	TABLESPACE enrole_indexes
)
TABLESPACE enrole_data;

CREATE INDEX PS_ACCDN_X ON PASSWORD_SYNCH(ACCOUNT_DN)
TABLESPACE enrole_indexes;
CREATE INDEX PS_TIME_X ON PASSWORD_SYNCH(TIME_REQUESTED)
TABLESPACE enrole_indexes;

COMMIT;
