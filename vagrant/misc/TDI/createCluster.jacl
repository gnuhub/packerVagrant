#  The script expects some parameters:
#      arg1 - cluster name
#      arg2 - list of node names
#      arg3 - prefix to be used on server names
#      arg4 - number of servers to be created per node
#      arg5 - weight of each server in the group 
#      arg6 - application ear file to be loaded 
#      arg7 - application name (optional) 
#
#  This example demonstrates many wsadmin features:
#
#   - The use of the AdminApp object to install an application
#   - The use of the AdminControl object to locate running MBeans 
#   - The use of the AdminControl object to getAttributes from running MBeans 
#   - The use of the AdminControl object to invoke operations on running MBeans 
#   - The use of the AdminControl object's "startServer" command
#   - The use of the AdminConfig object to create objects in the configuration
#   - The use of the AdminConfig object to find objects in the configuration
#   - The use of the AdminConfig object to modify objects in the configuration
#   - The use of the AdminConfig object to save the configuration
#   - Methods for saving and synchronizing the configuration.
#-----------------------------------------------------------------
#
proc createCluster {clusterName cellname nodes namePrefix weight} {

   #--------------------------------------------------------------
   # set up globals
   #--------------------------------------------------------------
   global AdminConfig
   global AdminControl
   global AdminApp

  #---------------------------------------------------------
  # We assume that there is only one cell, and we are on it
  #---------------------------------------------------------
  puts $cellname
  set cellname [$AdminControl getCell]
  puts $cellname
  set cell [$AdminConfig getid /Cell:$cellname/]
  
  #---------------------------------------------------------
  # Construct the attribute list to be used in creating a ServerCluster 
  # attribute.      
  #---------------------------------------------------------
  set name_attr    [list name $clusterName]
  set desc_attr    [list description "test cluster"]
  set pref_attr    [list preferLocal true]
  set statem_attr  [list stateManagement [list [list initialState STOP]]]
  set attrs        [list $name_attr $desc_attr $pref_attr $statem_attr]

  #---------------------------------------------------------
  # Create the server cluster 
  #---------------------------------------------------------
  puts "createCluster: creating the ServerCluster $clusterName"
  set cluster [$AdminConfig create ServerCluster $cell $attrs]

  #---------------------------------------------------------
  # For each node, create the required number of servers
  #---------------------------------------------------------
  foreach nodeName $nodes {
     set node [$AdminConfig getid /Node:$nodeName/]
	 set servName ""
     append servName $namePrefix
     set name_attr   [list memberName $servName]
     set weight_attr [list weight $weight]
     set attrs [list $name_attr $weight_attr]
     puts "createCluster: creating server $servName on node $nodeName"
     set server [$AdminConfig createClusterMember $cluster $node $attrs]
  }

  #---------------------------------------------------------
  # save changes 
  #---------------------------------------------------------
  puts "createCluster: saving config changes."
  $AdminConfig save

  #---------------------------------------------------------
  # Ask the ClusterMgr to refresh its list of clusters 
  #---------------------------------------------------------
  set clusterMgr [$AdminControl completeObjectName type=ClusterMgr,cell=$cellname,*]
  if {[llength $clusterMgr] == 0} {
        puts "createCluster: Error -- clusterMgr MBean not found for cell $cellname"
        return 
     }
  $AdminControl invoke $clusterMgr retrieveClusters

  #---------------------------------------------------------
  # For each node, invoke a sync if necessary 
  #     -- Is a nodeSync MBean available on this node? 
  #     -- Find out if serverStartupSyncEnabled is true for this node
  #        We just created this server, so if this attribute is set to
  #        "false" we have to perform a sync.  If we do not, the node we
  #        are installing on may have an out-of-date copy of the config
  #        data. 
  #---------------------------------------------------------
  set index 1
  foreach nodeName $nodes {
     set node [$AdminConfig getid /Node:$nodeName/]
     puts "createCluster: checking for the existence of a NodeSync MBean on node $nodeName"
     set nodeSync [$AdminControl completeObjectName type=NodeSync,node=$nodeName,*]
     if {[llength $nodeSync] == 0} {
        puts "createCluster: Error -- NodeSync MBean not found for name $nodeName"
        return 
     }
     set enabled [$AdminControl getAttribute $nodeSync serverStartupSyncEnabled]
     if {[string compare $enabled "false"] == 0} {
        puts "createCluster: Invoking synchronization for node $nodeSync because serverStartupSyncEnabled is set to false..."
        $AdminControl invoke $nodeSync sync
        puts "createCluster: Done with synchronization."
     }
  }

  #---------------------------------------------------------
  # Ask the Cluster MBean to start the cluster
  #---------------------------------------------------------
  set cluster [$AdminControl completeObjectName type=Cluster,cell=$cellname,name=$clusterName,*]
  puts "createCluster: Invoking start for cluster $clusterName" 
  $AdminControl invoke $cluster start
}
 

#-----------------------------------------------------------------
# Main
#-----------------------------------------------------------------
if { !($argc == 4) } {
   puts "createCluster: this script requires 5 parameters:"
   puts "     cluster name"
   puts "     cell name"
   puts "     list of node names"
   puts "     server name"
   puts ""
   puts "e.g.:     createCluster ITIM_Application_Cluster C291Cell01 \"C291Node01 C292Node01\" ITIMAppServer"
} else { 
   set clusterName      [lindex $argv 0]
   set cellName         [lindex $argv 1]
   set nodes            [lindex $argv 2]
   set prefix           [lindex $argv 3]
   set perNode          [lindex $argv 4]
   set weight           [lindex $argv 5]
   createCluster $clusterName $cellName $nodes $prefix 10
}

