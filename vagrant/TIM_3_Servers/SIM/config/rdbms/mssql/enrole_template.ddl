/**
--
-- RESOURCE_PROVIDERS
--
-- Stores a cross reference between resource provider IDs, which are used as
-- the primary keys for the resource provider entity beans. Also stores
-- reconciliation data for each resource provider.
--
-- PROVIDER_ID - Unique ID used as the primary key for the resource provider
--   entity beans.
-- RESOURCE_DN - DN for the resource the resource provider is responsible for.
-- RECON_STATUS - Whether a reconciliation is currently running (0 = not reconciling,
--  1 = currently reconciling).
-- LAST_RECON_TIME - The amount of time the last reconcilation took.
-- MAX_RECON_DURATION - maximum duration allowed before timeout of the current
--    reconcilation (minutes).
-- LOCK_SERVICE - Lock the service during reconciliation ( 1 - lock, 0 = do not lock)
-- REQUEST_ID - Tracks the process locking the service
-- CURRENT_REQUEST_COUNT - current number of executing requests
-- MAX_REQUEST_COUNT - maximum number of concurrent executing requests (or -1 = unlimited)
-- LAST_RESPONSE_TIME - timestamp of last response (to detect failed resources)
-- RESOURCE_STATUS - resource status (0 = ok, 1 = failed, 2 = failed service being tested)
*/
CREATE TABLE RESOURCE_PROVIDERS
  (
  PROVIDER_ID   NVARCHAR(20) NOT NULL,
  RESOURCE_DN   NVARCHAR(200),
  RECON_STATUS   SMALLINT,
  LAST_RECON_TIME   DATETIME,
  MAX_RECON_DURATION   BIGINT,
  LOCK_SERVICE    SMALLINT,
  REQUEST_ID    VARCHAR(20),
  CURRENT_REQUEST_COUNT   BIGINT,
  MAX_REQUEST_COUNT   BIGINT,
  LAST_RESPONSE_TIME    DATETIME,
  RESOURCE_STATUS   SMALLINT,
  RESTART_TIME          DATETIME,
  SERVER    NVARCHAR(255),
  RESOURCE_TEST_STATUS   SMALLINT,
  LAST_TEST_STATUS_TIME    DATETIME,
  FIRST_RESOURCE_FAIL_TIME    DATETIME,
  LAST_ERROR NVARCHAR(2000),
CONSTRAINT RESOURCE_PROVIDERS_PK PRIMARY KEY(PROVIDER_ID)
  )

CREATE INDEX RESPROVSTATUSX ON RESOURCE_PROVIDERS (RESOURCE_STATUS ASC, RESTART_TIME ASC, PROVIDER_ID ASC);

CREATE INDEX RESPROVDNX on RESOURCE_PROVIDERS (RESOURCE_DN ASC);

/**
--
-- REMOTE_SERVICES_REQUESTS
--
-- Table of requests that were made in an asynchronous fashion, or were
-- made while a reconciliation was ongoing.
--
-- PROVIDER_ID - Unique ID used as the primary key for the resource provider
--   entity beans.
--
-- REQUEST_ID - the ID of the request that was made.
--
-- TYPE - The type of request (GENERIC_REQUEST = 0, ASYNCHRONOUS_REQUEST = 1,
--               INTRA_RECON_REQUEST = 2, SERVICE_DEFERRED_REQUEST = 3)
--
-- OPERATION - (NOOP = 0, ADD = 1, MODIFY = 2, DELETE = 3, SUSPEND = 4, RESTORE = 5, CHANGE_PASSWORD = 6)
--
-- REQUEST_TIME - The time the request was made.
--
-- EXPIRATION_TIME - The time the request expires. If null the request never expires. (Currently not used.)
--
-- TARGET - The owner of the account for add or the dn for other operations
--
-- SERVICE_DN - The distinguished name of the service instance in the directory
--
-- DATA - The data for the request (attribute values for add and modify).  Serialized Java Collection.
--
-- CONNECTION_POINT - The callback to complete the workflow process.  Serialized Java object.
--
*/
CREATE TABLE REMOTE_SERVICES_REQUESTS
  (
  PROVIDER_ID NVARCHAR(20),
  REQUEST_ID   NVARCHAR(20) NOT NULL,
  TYPE   SMALLINT,
  OPERATION   SMALLINT,
  REQUEST_TIME   DATETIME,
  EXPIRATION_TIME  DATETIME,
  TARGET   NVARCHAR(2000),
  SERVICE_DN  NVARCHAR(2000) NOT NULL,
  DATA  NTEXT,
  CONNECTION_POINT  IMAGE,
CONSTRAINT REMOTE_SVR_REQ_FK FOREIGN KEY (PROVIDER_ID)
  REFERENCES RESOURCE_PROVIDERS (PROVIDER_ID),
CONSTRAINT REMOTE_SVR_REQ_PK PRIMARY KEY(REQUEST_ID)
   )

CREATE INDEX RS_REQ_PID_X ON REMOTE_SERVICES_REQUESTS(PROVIDER_ID);

CREATE INDEX RS_REQ_RTIME_X ON REMOTE_SERVICES_REQUESTS(REQUEST_TIME);

CREATE INDEX RS_REQ_TYPE_ID_X ON REMOTE_SERVICES_REQUESTS (TYPE ASC, PROVIDER_ID DESC);

/**
--
-- REMOTE_RESOURCES_RECONS
--
-- Table of reconciliation units associates with a given resource provider.
--
-- PROVIDER_ID - Unique ID used as the primary key for the resource provider
--   entity beans.
-- RECON_ID - Unique ID for each reconcialation unit.
-- DAY_OF_MONTH - Number indicating which day of the month the recon should be
--  run on.
-- MONTH_NUM - Number indicating which month the recon should be run on.
-- DAY_OF_WEEK - Number indicating which day of the week the recon should be run on.
-- DAY_OF_WEEK - Number indicating which hour of the day the recon should be run on.
-- MINUTE_NUM - Number indicating which minute of the hour the recon should be run on.
-- MAX_DURATION - The maximum allowed duration allowed before the recon will time out (minutes)
-- LOCK_SERVICE - Lock the service during reconciliation ( 1 - lock, 0 = do not lock)
--
*/
CREATE TABLE REMOTE_RESOURCES_RECONS
  (
  PROVIDER_ID NVARCHAR(20) NOT NULL,
  RECON_ID   BIGINT  NOT NULL,
  DAY_OF_MONTH  SMALLINT,
  MONTH_NUM   SMALLINT,
  DAY_OF_WEEK   SMALLINT,
  HOUR_NUM  SMALLINT,
  MINUTE_NUM  SMALLINT,
  MAX_DURATION  BIGINT,
  LOCK_SERVICE  SMALLINT DEFAULT 1,
  RECON_NAME NVARCHAR (300),
  DESCRIPTION NVARCHAR (300),
  CONSTRAINT REMOTE_RES_RECONS_FK FOREIGN KEY(PROVIDER_ID)
  REFERENCES RESOURCE_PROVIDERS(PROVIDER_ID),
  CONSTRAINT REMOTE_RES_RECONS_PK PRIMARY KEY(PROVIDER_ID, RECON_ID)
   )
/**
--
-- REMOTE_RESOURCES_RECON_QUERIES
--
-- Table of reconciliation queries associates with a given reconciliation unit.
--
-- PROVIDER_ID - Unique ID used as the primary key for the resource provider
--   entity beans.
-- RECON_ID - Unique ID for each reconcialation unit.
-- QUERY_ID - Unique ID for each reconcialation query.
-- RECON_FILTER - Filter associated with this reconciliation query.
-- RECON_BASE - Search base associated with this reconciliation query.
-- MAX_DURATION - not used
-- MAX_ENTRIES - not used
-- ATTRIBUTES - attributes to return in a reconciliation
-- SUPPORT_DATA_ONLY - indicate if recon is for support data only
--
*/
CREATE TABLE REMOTE_RESOURCES_RECON_QUERIES
  (
  PROVIDER_ID NVARCHAR(20) NOT NULL,
  RECON_ID   BIGINT  NOT NULL,
  QUERY_ID   BIGINT  NOT NULL,
  RECON_FILTER   NVARCHAR(1000),
  RECON_BASE   NVARCHAR(1000),
  MAX_DURATION   BIGINT,
  MAX_ENTRIES BIGINT,
  ATTRIBUTES  NTEXT,
  SUPPORT_DATA_ONLY SMALLINT,
CONSTRAINT REMOTE_RECON_QUERIES_FK FOREIGN KEY(PROVIDER_ID,
       RECON_ID)
  REFERENCES REMOTE_RESOURCES_RECONS(PROVIDER_ID,
      RECON_ID),
CONSTRAINT REMOTE_RECON_QUERIES_PK PRIMARY KEY(PROVIDER_ID,
       RECON_ID,
       QUERY_ID)
   )

/**
--
-- LCR_INPROGRESS_TABLE
--
-- Table containing information for Lifecycle Rule (LC Rule) initiated processes in progress.
--
-- TENANT   non null tenant for this LC Rule (short name)
-- RULE_ID    non null Lifecycle Rule ID (long)
-- RULE_OP    LC Rule Operation (string)
-- CHILD_ID   process ID for the child process of this LC Rule
-- START_TIME time the LC Rule child process started
-- ENTITY_ID   non null entity this child process is operating on
--
*/
CREATE TABLE LCR_INPROGRESS_TABLE (
  TENANT NVARCHAR(256) NOT NULL,
  RULE_ID BIGINT NOT NULL,
  RULE_OP NVARCHAR(256),
  CHILD_ID BIGINT,
  START_TIME BIGINT,
  ENTITY_ID NVARCHAR(256) NOT NULL,
  CONSTRAINT Unique_RuleEntity PRIMARY KEY(RULE_ID,ENTITY_ID)
)

CREATE INDEX LCR_CHILD_ID_X ON LCR_INPROGRESS_TABLE (CHILD_ID ASC);

/**
--
-- PO_TOPIC_TABLE
--
-- Table containing topic information for Post Office feature
--
-- TENANT   non null tenant (short name)
-- TOPIC    non null topic name (string)
-- SERVER   identifies which cluster member is working on data
-- CHECKPOINT_TIME  identifies the time the cluster member started work
-- TOPIC_ID   guuid that maps to TENANT above (non null, unique)
--
*/

CREATE TABLE PO_TOPIC_TABLE
  (
  TENANT    NVARCHAR(256) NOT NULL,
  TOPIC  NVARCHAR(256) NOT NULL,
  SERVER    NVARCHAR(255),
  CHECKPOINT_TIME   BIGINT,
  TOPIC_ID    BIGINT NOT NULL,
  CONSTRAINT Unique_TenantTopic PRIMARY KEY(TENANT,
      TOPIC),
  CONSTRAINT Unique_TopicID UNIQUE(TOPIC_ID)
  )

CREATE INDEX PO_TopicIndex ON PO_TOPIC_TABLE(TOPIC_ID)


/**
--
-- PO_NOTIFICATION_TABLE
--
-- Table containing individual notification information for Post Office feature
--
-- NOTIFICATION_ID   guuid that identifies this notification (non null, unique)
-- TOPIC_ID guid that maps to TENANT above (non null, unique)
-- SUBJECT   subject of the notification
-- TEXTBODY text body of the notification
-- RECEIVE_TIME  non null time in millis this notification was received
-- RECIPIENT_EADDR   non null email address for this notification
-- RECIPIENT_LOCALE   locale for this recipient (ll_CC format)
*/

CREATE TABLE PO_NOTIFICATION_TABLE
  (
  NOTIFICATION_ID   BIGINT NOT NULL,
  TOPIC_ID    BIGINT NOT NULL,
  SUBJECT  NVARCHAR(2000),
  TEXTBODY    NTEXT,
  RECEIVE_TIME    BIGINT NOT NULL,
  RECIPIENT_EADDR   NVARCHAR(320) NOT NULL,
  RECIPIENT_LOCALE  NVARCHAR(256),
  CONSTRAINT TenantTopic_parent FOREIGN KEY(TOPIC_ID) REFERENCES PO_TOPIC_TABLE(TOPIC_ID),
  CONSTRAINT NOTIFICATION_ID_PK PRIMARY KEY(NOTIFICATION_ID)
  )

CREATE INDEX PO_NotifyIndex ON PO_NOTIFICATION_TABLE(TOPIC_ID)

/**
--
-- PO_NOTIFICATION_HTMLBODY_TABLE
--
-- Table containing the html body portion of each notification for Post Office feature
--
-- NOTIFICATION_ID   guid that identifies this notification (non null, unique)
-- HTMLBODY html body of the notification
*/
CREATE TABLE PO_NOTIFICATION_HTMLBODY_TABLE (
  NOTIFICATION_ID   BIGINT NOT NULL,
  HTMLBODY    NTEXT,
  CONSTRAINT NOTIF_IDHTML FOREIGN KEY(NOTIFICATION_ID) REFERENCES PO_NOTIFICATION_TABLE(NOTIFICATION_ID) ON DELETE CASCADE,
  CONSTRAINT NOTIFI_ID_HTML_PK PRIMARY KEY(NOTIFICATION_ID)
)
CREATE INDEX PO_NOTIF_HTML ON PO_NOTIFICATION_HTMLBODY_TABLE(NOTIFICATION_ID)


CREATE TABLE SCHEDULED_MESSAGE (
  SCHEDULED_TIME    BIGINT,
  SCHEDULED_MESSAGE_ID    BIGINT NOT NULL,
  MESSAGE    NTEXT,
  SMALL_MESSAGE NVARCHAR(4000),
  SERVER    NVARCHAR(255),
  CHECKPOINT_TIME  BIGINT,
  REFERENCE_ID    BIGINT,
  REFERENCE2_ID  NVARCHAR(50),
CONSTRAINT SCHEDULED_MESSAGE_PK PRIMARY KEY(
       SCHEDULED_MESSAGE_ID)
   )

CREATE INDEX SCHEDULED_MESSAGE_TIME_X ON SCHEDULED_MESSAGE (SCHEDULED_TIME, SERVER)

CREATE INDEX SCHEDULED_MESSAGE_CHECKPOINT_X ON SCHEDULED_MESSAGE (CHECKPOINT_TIME)

CREATE INDEX SCHEDULED_MESSAGE_REFERENCE_X ON SCHEDULED_MESSAGE (REFERENCE_ID)

CREATE INDEX SCHEDULED_MSG_X ON SCHEDULED_MESSAGE (REFERENCE2_ID ASC)

CREATE INDEX SCH_MSG_SVR_X ON SCHEDULED_MESSAGE (SERVER ASC);

/**
--
-- NEXTVALUE
-- Table to keep the current maximum value of primary key integer. It only contains
-- one record, for each identfier
--
-- ID -- The next primary key id to be used
--
*/
CREATE TABLE NEXTVALUE
  (
  ID    NVARCHAR(50) NOT NULL,
  NEXTID   INT NOT NULL,
CONSTRAINT NEXTVALUE_PK PRIMARY KEY(ID)
  )


/**
--
-- PROCESS
--
-- This table stores all pending, running and historical requests submitted
-- to the enrole workflow system. Each request is represented as a process.
--
-- ID - The process id
-- PARENT_ID - The parent process id if there is any
-- NAME - The process name
-- TYPE - The process type
-- DEFINITION_ID - The process definition ID
-- REQUESTER_TYPE - The requester type
-- REQUESTER  - The requester identity
-- REQUESTER_NAME - The requester name
-- DESCRIPTION - The process description
-- PRIORITY - The process priority
-- SCHEDULED - The scheduled starting time of the process
-- STARTED - The starting time of the process
-- COMPLETED - The completed time of the process
-- LASTMODIFIED - The last modified time of the process
-- SUBMITTED - The time the process is submitted
-- STATE - The process state
-- COMMENTS - The comments for the process
-- RESULT_SUMMARY - The result summary code of the process
-- RESULT_DETAIL - The result detail information of the process
-- TENANT - The DN of the tenant the requester beNTEXTs to
--
*/
CREATE TABLE PROCESS
  (
    ROOT_PROCESS_ID BIGINT NOT NULL,
  ID    BIGINT NOT NULL,
  PARENT_ID   BIGINT,
  PARENT_ACTIVITY_ID  BIGINT,
  NAME    NVARCHAR(100),
  TYPE    NVARCHAR(2) NOT NULL,
  DEFINITION_ID   NVARCHAR(200) NOT NULL,
  REQUESTER_TYPE  NVARCHAR(2),
  REQUESTER   NVARCHAR(200),
  REQUESTER_NAME  NVARCHAR(100),
  DESCRIPTION   NVARCHAR(300),
  PRIORITY  SMALLINT,
  SCHEDULED   NVARCHAR(50),
  STARTED   NVARCHAR(50),
  COMPLETED   NVARCHAR(50),
  LASTMODIFIED  NVARCHAR(50),
  SUBMITTED  NVARCHAR(50),
  STATE  NVARCHAR(1),
  NOTIFY     INT,
  REQUESTEE   NVARCHAR(200),
  REQUESTEE_NAME  NVARCHAR(100),
  SUBJECT   NVARCHAR(500),
  SUBJECT_PROFILE NVARCHAR(100),
  SUBJECT_SERVICE NVARCHAR(100),
      SUBJECT_ACCESS_ID NVARCHAR(2000),
      SUBJECT_ACCESS_NAME NVARCHAR(100),
  COMMENTS  NVARCHAR(2000),
  RESULT_SUMMARY  NVARCHAR(2),
  RESULT_DETAIL   NTEXT,
    SHORT_DETAIL NVARCHAR(4000),
  TENANT  NVARCHAR(200),
CONSTRAINT PROCESS_PK PRIMARY KEY(ID)
  )

CREATE INDEX PROC_STATE_X ON PROCESS(STATE)
CREATE INDEX PROCESS_VPC1_X ON PROCESS (PARENT_ID,SUBMITTED,ID,STATE)
CREATE INDEX PROCESS_SUB_X ON PROCESS (SUBMITTED DESC, PARENT_ID ASC);
CREATE INDEX PROCESS_ID_ST ON PROCESS (ID ASC, STATE ASC);
CREATE INDEX PROCESS_PACT_ID_X ON PROCESS (PARENT_ACTIVITY_ID ASC, ID DESC);
CREATE INDEX PROCESS_USERREQ_X ON PROCESS (REQUESTER ASC, PARENT_ID ASC, TENANT ASC);

/**
--
-- ACTIVITY
--
-- This table contains records to keep track of each process's execution status.
--
-- ID - The activity id
-- PROCESS_ID - The process id that the activity beNTEXTs to
-- DEFINITION_ID - The activity definition ID
-- ACTIVITY_INDEX - The index of the activity if it is inside a loop
-- SUBPROCESS_ID - The ID of the subprocess associated with the activity
-- NAME - The activity name
-- DESCRIPTION - The activity description
-- TYPE - The activity type
-- SUBTYPE - The activity subtype
-- PRIORITY - The activity priority (Currently not used)
-- STARTED - The time the activity started
-- COMPLETED - The time the activity completed
-- LASTMODIFIED - The time the activity was last modified
-- STATE - The activity state
-- RESULT_SUMMARY - The result summary code for the activity
-- RESULT_DETAIL - The result detail for the activity
--
*/
CREATE TABLE ACTIVITY (
  ID    BIGINT NOT NULL,
  PROCESS_ID  BIGINT NOT NULL,
  DEFINITION_ID   NVARCHAR(100) NOT NULL,
  ACTIVITY_INDEX  INT,
  LOOP_COUNT  INT,
  LOOP_RUNCOUNT   INT,
  RETRY_COUNT   INT,
  LOCK_COUNT  INT,
   SUBPROCESS_ID   BIGINT,
  NAME    NVARCHAR(100),
  DESCRIPTION   NVARCHAR(300),
  TYPE    NVARCHAR(1),
  SUBTYPE   NVARCHAR(2),
  PRIORITY  SMALLINT,
  STARTED   NVARCHAR(50),
  COMPLETED   NVARCHAR(50),
  LASTMODIFIED  NVARCHAR(50),
  STATE  NVARCHAR(1),
  RESULT_SUMMARY  NVARCHAR(5),
  RESULT_DETAIL   NTEXT,
    SHORT_DETAIL NVARCHAR(4000),
CONSTRAINT ACTIVITY_FK FOREIGN KEY(PROCESS_ID)
  REFERENCES PROCESS(ID),
CONSTRAINT ACTIVITY_PK PRIMARY KEY(ID)
  )

CREATE UNIQUE INDEX ACTIVITY_NATURAL_KEY ON ACTIVITY (PROCESS_ID, DEFINITION_ID, ACTIVITY_INDEX)
CREATE INDEX ACTIVITY_PID_X ON ACTIVITY (PROCESS_ID DESC);

/**
--
-- PROCESSDATA
--
-- This table keeps the runtime process data of a process
-- After process completion, this table will be removed
--
-- ID - The process data ID
-- PROCESS_ID - The process ID associated with the data
-- ACTIVITY_ID - The activity ID associated with the data if there is any
-- DEF_ID - The definition ID for the corresponding relevant data in process definition
-- NAME - The data name
-- DESCRIPTIOn - The data description
-- TYPE - Data type
-- REQUESTER_NAME - The requester name for user created data
-- REQUESTER_TYPE - The requester type
-- LENGTH - Data length
-- VALUE - Data value
-- VALUE_LAST_MODIFIED - tracks the time the value or small_value fields were last modified
--       in milliseconds form the system clock
--
*/
CREATE TABLE PROCESSDATA
   (
  PROCESS_ID  BIGINT NOT NULL,
  DEF_ID    NVARCHAR(100),
  NAME    NVARCHAR(100),
  CONTEXT NVARCHAR(100),
  DESCRIPTION   NVARCHAR(300),
  TYPE  NVARCHAR(500),
  COLLECTION_TYPE  NVARCHAR(500),
  VALUE  TEXT,
  SMALL_VALUE   NTEXT,
    VALUE_LAST_MODIFIED BIGINT,
CONSTRAINT PROCESSDATA_FK FOREIGN KEY(PROCESS_ID)
  REFERENCES PROCESS(ID),
CONSTRAINT PROCESSDATA_PK PRIMARY KEY(PROCESS_ID, DEF_ID)
   )
   
CREATE INDEX PROCESSDATA_ID_DEF ON PROCESSDATA (PROCESS_ID ASC, DEF_ID ASC, VALUE_LAST_MODIFIED ASC);   
   
/**
--
-- PROCESSLOG
--
-- This table keeps records of audit events associated with a process
--
-- ID - The processlog ID
-- PROCESS_ID - The ID of the process associated
-- ACTIVITY_ID - The ID of the activity associated
-- CREATED - Time the log record created
-- EVENTTYPE - Log event type
-- OLD_PARTICIPANT_TYPE - Old participant type for assignment change event
-- OLD_PARTICIPANT_ID - Old participant ID for assignment change event
-- NEW_PARTICIPANT_TYPE - New participant type for assignment change event
-- NEW_PARTICIPANT_ID - New participant ID for assignment change event
-- REQUESTOR_TYPE - The requester type for any user related event
-- REQUESTOR - The requester ID for any user related event
-- REQUESTOR_DN - The DN of the requester for any user related event
-- OLD_STATE - The old state for state change event
-- NEW_STATE - The new state for state change event
-- DATA_ID - The data id for data change event
-- NEW_DATA - The data value for data change event
--
*/
CREATE TABLE PROCESSLOG
   (
  ID    BIGINT NOT NULL,
  PROCESS_ID  BIGINT,
  ACTIVITY_ID   BIGINT,
  CREATED   NVARCHAR(50),
  EVENTTYPE   NVARCHAR(2) NOT NULL,
  OLD_PARTICIPANT_TYPE  NVARCHAR(2),
  OLD_PARTICIPANT_ID  NVARCHAR(200),
  NEW_PARTICIPANT_TYPE  NVARCHAR(2),
  NEW_PARTICIPANT_ID  NVARCHAR(200),
  REQUESTOR_TYPE  NVARCHAR(2),
  REQUESTOR   NVARCHAR(200),
  REQUESTOR_DN   NVARCHAR(200),
  OLD_STATE   NVARCHAR(1),
  NEW_STATE   NVARCHAR(1),
  DATA_ID   NVARCHAR(100),
  NEW_DATA  NTEXT,
    SMALL_NEW_DATA NVARCHAR(4000),
CONSTRAINT PROCESSLOG_FK FOREIGN KEY(PROCESS_ID)
  REFERENCES PROCESS(ID),
CONSTRAINT PROCESSLOG_PK PRIMARY KEY(ID)
  )
  
CREATE INDEX PROCESSLOG_PID_X ON PROCESSLOG (PROCESS_ID ASC);
CREATE INDEX PROCESSLOG_AID_X ON PROCESSLOG (ACTIVITY_ID ASC);  
  
/**
--
-- WORKITEM
--
-- This table keeps records of workitems associated with manual workflow activities
-- for running process. The records associated with a process will be removed after
-- process completion
--
-- ID  -  The workitem ID
-- PROCESS_ID - The process ID associated with the workitem
-- ACTIVITY_ID - The activity ID assciated with the workitem
-- PARTICIPANT_TYPE - The workitem participant type
-- PARTICIPANT  -  The workitem participant identity
-- CREATED - The time the workitem created
-- DUE_DATE - time in which workitem will be escalated
-- LOCK_OWNER - system user hold the lock..null if unlocked
-- DESCRIPTION - The activity description
-- PROCESS_DEFINITION_ID - the process definition id
-- ACTIVITY_DEFINITION_ID - the activity definition id
--
*/
CREATE TABLE WORKITEM
  (
  ID    BIGINT NOT NULL,
  PROCESS_ID  BIGINT NOT NULL,
  ACTIVITY_ID   BIGINT NOT NULL,
  CREATED   NVARCHAR(50),
  INPUT_PARAMETERS  NTEXT,
  DUE_DATE  BIGINT,
  LOCK_OWNER  NVARCHAR(512),
  DESCRIPTION   NVARCHAR(4000),
  PROCESS_DEFINITION_ID   NVARCHAR(512) NOT NULL,
  ACTIVITY_DEFINITION_ID  NVARCHAR(100) NOT NULL,
  ACTIVITY_TYPE NVARCHAR(1),
  ACTIVITY_SUBTYPE NVARCHAR(2),
  ACTIVITY_NAME NVARCHAR(100),
  REQUESTEE_NAME NVARCHAR(100),
  REQUESTER_NAME NVARCHAR(100),
  SUBJECT NVARCHAR(2000),

CONSTRAINT WORKITEM2_FK FOREIGN KEY(ACTIVITY_ID)
  REFERENCES ACTIVITY(ID),
CONSTRAINT WORKITEM_FK FOREIGN KEY(PROCESS_ID)
  REFERENCES PROCESS(ID),
CONSTRAINT WORKITEM_PK PRIMARY KEY(ID)
   )

CREATE INDEX WORKITEM_PID_X ON WORKITEM (PROCESS_ID)
CREATE INDEX WORKITEM_AID_X ON WORKITEM (ACTIVITY_ID)
CREATE INDEX WORKITEM_ADEF_X ON WORKITEM (ACTIVITY_DEFINITION_ID)
CREATE INDEX WORKITEM_PDEF_X ON WORKITEM (PROCESS_DEFINITION_ID)


/**
--
-- WI_PARTICIPANT
--
-- This table keeps the participants associated with manual workflow activities.
-- ID  -  The participant id
-- WORKITEM_ID - The work item ID associated with the participant
-- PARTICIPANT_TYPE - The workitem participant type
-- PARTICIPANT  -  The workitem participant identity
--
*/
CREATE TABLE WI_PARTICIPANT
  (
  ID    BIGINT NOT NULL,
  WORKITEM_ID   BIGINT NOT NULL,
  PARTICIPANT_TYPE  NVARCHAR(2) NOT NULL,
  PARTICIPANT   NVARCHAR(512) NOT NULL,
CONSTRAINT WORKITEM_ID_FK FOREIGN KEY(WORKITEM_ID)
  REFERENCES WORKITEM(ID) ON DELETE CASCADE,
CONSTRAINT PARTICIPANT_PK PRIMARY KEY(ID)
   )

CREATE INDEX WIPART_WIID_X ON WI_PARTICIPANT (WORKITEM_ID)
CREATE INDEX WIPART_DN_X ON WI_PARTICIPANT (PARTICIPANT)

CREATE TABLE SYNCH_POINT (
  PROCESS_ID BIGINT NOT NULL,
  DEFINITION_ID NVARCHAR(100) NOT NULL,
  ACTIVITY_INDEX INT NOT NULL,
  WAIT_LOCK INT NOT NULL,
  JOIN_ENABLED SMALLINT NOT NULL,
  CONSTRAINT SYNCH_POINT_PK PRIMARY KEY(PROCESS_ID, DEFINITION_ID, ACTIVITY_INDEX)
)

CREATE INDEX SYNCH_POINT_PID_X ON SYNCH_POINT (PROCESS_ID DESC)

CREATE TABLE ACTIVITY_LOCK (
  PROCESS_ID  BIGINT NOT NULL,
  ACTIVITY_ID   BIGINT NOT NULL,
  SERVER NVARCHAR(255) NOT NULL,
  THREAD_ID BIGINT NOT NULL,
  LOCK_COUNT INT,
  CONSTRAINT ACTIVITY_LOCK_PK PRIMARY KEY(PROCESS_ID, ACTIVITY_ID, SERVER, THREAD_ID),
  CONSTRAINT ACTIVITY_LOCK_PFK FOREIGN KEY(PROCESS_ID) REFERENCES PROCESS(ID),
  CONSTRAINT ACTIVITY_LOCK_AFK FOREIGN KEY(ACTIVITY_ID) REFERENCES ACTIVITY(ID)
)

CREATE INDEX ACTIVITY_LOCK_PIDX ON ACTIVITY_LOCK (PROCESS_ID ASC);

CREATE TABLE PASSWORD_TRANSACTION
  (
  TRANSACTION_ID   BIGINT NOT NULL,
  ACCOUNT_DN   NVARCHAR(2000),
  CREATION_DATE   NVARCHAR(50),
  PROCESS_ID  BIGINT NOT NULL,
  ACTIVITY_ID   BIGINT NOT NULL,
  PASSWORD  NVARCHAR(500),
CONSTRAINT PASSWORD_TRANSACTION_PK PRIMARY KEY(TRANSACTION_ID)
  )

/**
--
-- PENDING
--
-- This table keeps the pending provisioning processes
--
-- PROCESS_ID - The process ID associated with the data
-- PERSON_DN  - The definition ID for the corresponding relevant data in process definition
-- SERVICE_DN - The activity ID associated with the data if there is any
--
*/
CREATE TABLE PENDING
(
  PROCESS_ID  BIGINT NOT NULL,
  PERSON_DN   NVARCHAR(2000),
  SERVICE_DN  NVARCHAR(2000),
CONSTRAINT PENDING_FK FOREIGN KEY(PROCESS_ID)
  REFERENCES PROCESS(ID),
CONSTRAINT PENDING_PK PRIMARY KEY(PROCESS_ID)
)


/**
--
-- LISTDATA
--
-- This table is used to persist large data list for performance optimazation
--
-- DATA_ID - The unique identifier of the data
-- INDEX   - The index of the list element
-- VALUE   - The serialized list element
--
*/
CREATE TABLE LISTDATA
(
  DATA_ID  BIGINT NOT NULL,
  INDEX_ID  INT NOT NULL,
  VALUE NTEXT,
CONSTRAINT LISTDATA_PK PRIMARY KEY(DATA_ID, INDEX_ID)
)

CREATE INDEX PENDING_FOR_PERSON ON PENDING (PERSON_DN)

CREATE TABLE REPORT (
  ID INT NOT NULL,
  TITLE VARCHAR(255) NOT NULL,
  TYPE VARCHAR(255) NOT NULL,
  AUTHOR VARCHAR(255),
  REPORT_SIZE INT,
  REPORT_DATA IMAGE,
  STYLESHEET_NAME VARCHAR(255),
  EDITABLE CHAR(1),
  REPORTCATEGORY VARCHAR(255) NOT NULL,
  REPORTSUBTYPE VARCHAR(255) NOT NULL,
  CONSTRAINT REPORT_P PRIMARY KEY (ID)
)

CREATE TABLE ENTITY_COLUMN (
  ENTITY_NAME VARCHAR(255) NOT NULL,
  COLUMN_NAME VARCHAR(255) NOT NULL,
  ATTRIBUTE_NAME VARCHAR(255) NOT NULL,
  MULTI_VALUED CHAR(1),
  IMPLICITLY_MAPPED CHAR(1),
  AVAILABLE_FOR_REPORTING VARCHAR(255),
  TABLE_NAME VARCHAR(255),
  CONSTRAINT ENTITY_COLUMNP PRIMARY KEY (ENTITY_NAME, ATTRIBUTE_NAME)
)

CREATE TABLE COLUMN_REPORT (
  ENTITY_NAME VARCHAR(255) NOT NULL,
  COLUMN_NAME VARCHAR(255) NOT NULL,
  REPORT_ID INT NOT NULL,
  CONSTRAINT COLUMN_REPORT_P PRIMARY KEY (REPORT_ID, ENTITY_NAME, COLUMN_NAME)
)

CREATE TABLE AUTHORIZATION_OWNERS (
  USERDN VARCHAR(255) NOT NULL,
  CONTAINERDN VARCHAR(255) NOT NULL,
  PRIMARY KEY(USERDN, CONTAINERDN)
)

CREATE TABLE ACI (
  DN VARCHAR(255) NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  SCOPE VARCHAR(255),
  TARGET VARCHAR(255) NOT NULL,
  PARENT VARCHAR(255),
  CATEGORY VARCHAR(255),
  ObjectFilter VARCHAR(1023),
  PRIMARY KEY(DN, NAME, TARGET)
)

CREATE TABLE ACI_ROLEDNS (
  DN VARCHAR(255) NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  TARGET VARCHAR(255) NOT NULL,
  ROLEDN VARCHAR(255) NOT NULL
)

CREATE TABLE ACI_PRINCIPALS (
  DN VARCHAR(255) NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  TARGET VARCHAR(255) NOT NULL,
  PRINCIPALNAME VARCHAR(255) NOT NULL
)

CREATE TABLE ACI_PERMISSION_ATTRIBUTERIGHT (
  DN VARCHAR(255) NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  TARGET VARCHAR(255) NOT NULL,
  ACTION VARCHAR(6) NOT NULL,
  OPERATION VARCHAR(3) NOT NULL,
  ATTRIBUTERIGHT VARCHAR(255) NOT NULL
)

CREATE TABLE ACI_PERMISSION_CLASSRIGHT (
  DN VARCHAR(255) NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  TARGET VARCHAR(255) NOT NULL,
  ACTION VARCHAR(6) NOT NULL,
  CLASSRIGHT VARCHAR(255) NOT NULL
)

CREATE TABLE ENTITLEMENT (
  DN VARCHAR(255) NOT NULL,
  TYPE VARCHAR(255) NOT NULL,
  SERVICETARGETTYPE VARCHAR(255),
  SERVICETARGETNAME VARCHAR(255),
  PROCESSDN VARCHAR(255)
)

CREATE TABLE ENTITLEMENT_PROVISIONINGPARAMS (
  DN VARCHAR(255) NOT NULL,
  ATTRIBUTEVALUE VARCHAR(4000) NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  ENFORCEMENT VARCHAR(255),
  EXPRTYPE VARCHAR(255),
  SERVICETARGETNAME VARCHAR(255),
  SERVICE_DN VARCHAR(255)
)

CREATE TABLE SYNCHRONIZATION_HISTORY (
  SYNC_ID BIGINT  NOT NULL ,
  REQUESTOR VARCHAR (255) NOT NULL,
  REQ_TYPE VARCHAR (255),
  REQ_NAME VARCHAR (255),
  STATUS VARCHAR (255),
  TENANT VARCHAR (255),
  STATUS_DETAIL VARCHAR (255),
  SCHEDULED_TIME BIGINT,
  SUBMITTED_TIME BIGINT,
  STARTED_TIME BIGINT NOT NULL,
  COMPLETED_TIME BIGINT,
  SERVER_NAME VARCHAR (255),
  PRIMARY KEY (SYNC_ID, STARTED_TIME)
)

CREATE TABLE SYNCHRONIZATION_LOCK (
  HOST VARCHAR (255) NOT NULL,
  PRIMARY KEY (HOST)
)

CREATE TABLE RESOURCES_SYNCHRONIZATIONS (
  SYNC_ID BIGINT  NOT NULL,
  DAY_OF_MONTH INTEGER  NOT NULL,
  MONTH_NUM INTEGER  NOT NULL,
  DAY_OF_WEEK INTEGER  NOT NULL,
  HOUR_NUM INTEGER  NOT NULL,
  MINUTE_NUM INTEGER  NOT NULL,
  MAX_DURATION BIGINT,
  PRIMARY KEY (SYNC_ID)
)

CREATE TABLE CHANGELOG(
CHANGE_NUMBER INTEGER NOT NULL
)

CREATE TABLE SERVICE_ACCOUNT_MAPPING (
  SERVICEPROFILE VARCHAR (255) NOT NULL,
  ACCOUNTPROFILE VARCHAR (255) NOT NULL,
  PRIMARY KEY (SERVICEPROFILE, ACCOUNTPROFILE)
)

CREATE TABLE RECONCILIATION (
  RECONID VARCHAR(255) NOT NULL,
  SERVICEDN VARCHAR(2000) NOT NULL,
  PROCESSEDACCOUNTS INTEGER NOT NULL,
  LOCALACCOUNTS INTEGER NOT NULL,
  TIMUSERACCOUNTS INTEGER NOT NULL,
  POLICYVIOLATIONS INTEGER NOT NULL,
  STARTED DATETIME NOT NULL,
  COMPLETED DATETIME NOT NULL,
  ACTIVITY_ID BIGINT,
  PRIMARY KEY (RECONID)
)

CREATE INDEX RECON_COMPLETED ON RECONCILIATION (COMPLETED ASC);

CREATE TABLE RECONCILIATION_INFO (
  RECONID VARCHAR(255) NOT NULL,
  ACCOUNTID VARCHAR(255),
  POLICYCOMPLIANCESTATUS VARCHAR(20),
  USERNAME VARCHAR(255),
  OPERATION VARCHAR(20),
  REMARKS VARCHAR(1000),
  HANDLE  BIGINT,
  FOREIGN KEY (RECONID) REFERENCES RECONCILIATION (RECONID)
)

CREATE INDEX RECON_INFO_ACCT_ID ON RECONCILIATION_INFO (ACCOUNTID ASC, RECONID DESC);
CREATE INDEX RECON_INFO_ID_OP ON RECONCILIATION_INFO (RECONID ASC, OPERATION ASC);

/**
--
-- AUTH_KEY
--
-- This table is used to store the keys for signing and verifying authentication requests.
--
-- Y   - The public key in the DSA algorithm
-- P   - The prime number in the DSA algorithm
-- Q   - The sub-prime number in the DSA algorithm
-- G   - The modulus in the DSA algorithm
-- X   - The private key in the DSA algorithm
--
*/
CREATE TABLE AUTH_KEY (
  Y NVARCHAR(2000) NOT NULL,
  P NVARCHAR(2000) NOT NULL,
  Q NVARCHAR(2000) NOT NULL,
  G NVARCHAR(2000) NOT NULL,
  X NVARCHAR(2000) NOT NULL
)

/**
--
-- WORKFLOW_CALLBACK
--
-- This table is used to store information for the workflow callback API.
--
-- ID - The primary key
-- PROCESS_ID   - The process identifier this callback is associated
-- MESSAGE_OBJECT  - The callback message object.
-- EVENT_TRIGGER   - The process state the callback should be called.
--
*/
CREATE TABLE WORKFLOW_CALLBACK (
  ID BIGINT NOT NULL,
  PROCESS_ID BIGINT NOT NULL,
  MESSAGE_OBJECT NVARCHAR(2000) NOT NULL,
  EVENT_TRIGGER  CHAR(1),
  CONSTRAINT WF_CALLBACK_FK FOREIGN KEY(PROCESS_ID) REFERENCES PROCESS(ID),
  CONSTRAINT WF_CALLBACK_PK PRIMARY KEY(ID)
)

CREATE INDEX WF_CALLBACK_PID_X ON WORKFLOW_CALLBACK (PROCESS_ID ASC);

/**
--
-- POLICY_ANALYSIS
--
-- This table is used to temporarily store information about policy change analysis.
-- session
--
--
*/
CREATE TABLE POLICY_ANALYSIS (
 ANALYSIS_ID VARCHAR ( 32 ) NOT NULL,
 TENANT_NAME NVARCHAR ( 64 ),
 STATUS SMALLINT DEFAULT 0 NOT NULL,
 REASON SMALLINT NOT NULL,
 CONTEXT SMALLINT NOT NULL,
 CHANGE_TYPE SMALLINT NOT NULL,
 LAST_ACCESSED DATETIME NOT NULL,
 WORKERS_STARTED INTEGER DEFAULT 0,
 WORKERS_COMPLETED INTEGER DEFAULT 0,
 WORKERS_TOTAL INTEGER DEFAULT 0,
 ACCOUNTS_EVALUATED INTEGER DEFAULT 0,
 CONSTRAINT PK_POLICY_ANALYSIS PRIMARY KEY (ANALYSIS_ID),
 CONSTRAINT UC_POLICY_ANALYSIS UNIQUE (ANALYSIS_ID)
 );

CREATE INDEX POL_ANALY_ACC_X ON POLICY_ANALYSIS (LAST_ACCESSED ASC, ANALYSIS_ID);
 
/**
--
-- ACCT_CHANGE
--
-- This table is used to temporarily store information about account changes found during
-- policy change analysis.
--
--
*/
CREATE TABLE ACCT_CHANGE (
 CHANGE_ID VARCHAR ( 32 ) NOT NULL,
 ACCT_UID NVARCHAR ( 60 ) NOT NULL,
 ACCT_IDENTIFIER VARCHAR ( 255 ) NOT NULL,
 SERVICE_NAME NVARCHAR ( 200 ) NOT NULL,
 SERVICE_IDENTIFIER VARCHAR ( 255 ) NOT NULL,
 OWNER_NAME NVARCHAR ( 200 ) NOT NULL,
 OWNER_IDENTIFIER VARCHAR ( 255 ) NOT NULL,
 OPERATION_TYPE SMALLINT NOT NULL,
 PROVISION_PRIORITY SMALLINT,
 SEQUENCE_NR SMALLINT,
 REASON SMALLINT NOT NULL,
 STATUS SMALLINT,
 REVOKE_CHANGE SMALLINT NOT NULL,
 POLICY_ANALYSIS_ID VARCHAR ( 32 ) NOT NULL,
 CONSTRAINT PK_ACCT_CHANGE PRIMARY KEY (POLICY_ANALYSIS_ID, CHANGE_ID)
 );

CREATE INDEX ACCT_CHANGE_PREV_X ON ACCT_CHANGE (POLICY_ANALYSIS_ID ASC, OPERATION_TYPE ASC, REASON ASC); 
 
/**
--
-- ATTR_CHANGE
--
-- This table is used to temporarily store information about attribute changes found during
-- policy change analysis.
--
--
*/
CREATE TABLE ATTR_CHANGE (
 CHANGE_ID VARCHAR ( 32 ) NOT NULL,
 ATTR_NAME NVARCHAR ( 100 ) NOT NULL,
 ATTR_VALUE NVARCHAR ( 2000 ),
 OPERATION_TYPE SMALLINT NOT NULL,
 PRIVILEGE_ACTION_TYPE SMALLINT NOT NULL,
 ATTR_VALUE_PRESENCE SMALLINT NOT NULL,
 POLICY_ANALYSIS_ID VARCHAR ( 32 ) NOT NULL,
 ACCT_CHANGE_ID VARCHAR ( 32 ) NOT NULL,
 CONSTRAINT PK_ATTR_CHANGE PRIMARY KEY (POLICY_ANALYSIS_ID, ACCT_CHANGE_ID, CHANGE_ID)
 );
/**
--
-- ATTR_CHANGE
--
-- This table is used to temporarily store information about errors encountered during
-- policy change analysis.
--
--
*/
CREATE TABLE POLICY_ANALYSIS_ERROR (
 ERROR_ID VARCHAR ( 32 ) NOT NULL,
 ENTITY_NAME NVARCHAR ( 100 ),
 ENTITY_IDENTIFIER VARCHAR ( 255 ),
 ENTITY_TYPE SMALLINT,
 SERVICE_NAME NVARCHAR ( 200 ),
 SERVICE_IDENTIFIER VARCHAR ( 255 ),
 PERSON_NAME NVARCHAR ( 200 ),
 PERSON_IDENTIFIER VARCHAR ( 255 ),
 POLICY_NAME NVARCHAR ( 100 ),
 POLICY_IDENTIFIER VARCHAR ( 255 ),
 ATTR_NAME NVARCHAR ( 100 ),
 ERROR_TYPE SMALLINT NOT NULL,
 ENTITY_ERROR_TYPE SMALLINT,
 ERROR_MESSAGE NTEXT NOT NULL,
 POLICY_ANALYSIS_ID VARCHAR ( 32 ) NOT NULL,
 CONSTRAINT PK_ANALYSIS_ERROR PRIMARY KEY (ERROR_ID)
 );
ALTER TABLE ACCT_CHANGE ADD CONSTRAINT FK_POLICY_ANALYSIS FOREIGN KEY (POLICY_ANALYSIS_ID) REFERENCES POLICY_ANALYSIS (ANALYSIS_ID)  ON DELETE CASCADE ON UPDATE NO ACTION;
ALTER TABLE ATTR_CHANGE ADD CONSTRAINT FK_ATTR_CHANGE FOREIGN KEY (POLICY_ANALYSIS_ID, ACCT_CHANGE_ID) REFERENCES ACCT_CHANGE (POLICY_ANALYSIS_ID, CHANGE_ID)  ON DELETE CASCADE ON UPDATE NO ACTION;
ALTER TABLE POLICY_ANALYSIS_ERROR ADD CONSTRAINT FK_ANALYSIS_ERROR FOREIGN KEY (POLICY_ANALYSIS_ID) REFERENCES POLICY_ANALYSIS (ANALYSIS_ID)  ON DELETE CASCADE ON UPDATE NO ACTION;


/**
--
-- COMPLIANCE_ALERT_TABLE
--
-- Table containing individual compliance isses for Compliance Alert Feature
*/
CREATE TABLE COMPLIANCE_ALERT (
  CA_PROC_ID  BIGINT,
  CA_ISSUE_DN VARCHAR(512) NOT NULL,
  ACTIVITY_ID   BIGINT,
  ACCOUNT_DN  VARCHAR(512) NOT NULL,
  PARTICIPANT_DN  VARCHAR(512),
  STARTED   CHAR(1),
  CONSTRAINT PK_CA PRIMARY KEY(CA_ISSUE_DN)
)
CREATE INDEX CA_PID_X ON COMPLIANCE_ALERT(CA_PROC_ID)
CREATE INDEX CA_ACCDN_X ON COMPLIANCE_ALERT(ACCOUNT_DN)
CREATE INDEX CA_ACTID_X ON COMPLIANCE_ALERT(ACTIVITY_ID)

;

create table AUDIT_EVENT
(
  id BIGINT NOT NULL,
  itim_event_category NVARCHAR(50) NOT NULL,
  entity_name NVARCHAR(1000),
  entity_dn NVARCHAR(1000),
  entity_type NVARCHAR(50),
  action NVARCHAR(25) NOT NULL,
  initiator_name NVARCHAR(1000),
  initiator_dn NVARCHAR(1000),
  container_name NVARCHAR(1000),
  container_dn NVARCHAR(1000),
  workflow_process_id BIGINT,
  result_summary NVARCHAR(25),
  timestamp NVARCHAR(50) NOT NULL,
  comments NVARCHAR(1000),
CONSTRAINT AUDIT_EVENT_PK PRIMARY KEY(id)
);
create index AUDIT_REPORT1 on AUDIT_EVENT (TIMESTAMP, ITIM_EVENT_CATEGORY);
CREATE INDEX ADT_EVENT_PID_ID_X ON AUDIT_EVENT (WORKFLOW_PROCESS_ID ASC, ID DESC);

create table AUDIT_MGMT_PROVISIONING
(
  event_id BIGINT NOT NULL,
  owner_name NVARCHAR(1000),
  owner_dn NVARCHAR(1000),
  service_name NVARCHAR(1000) NOT NULL,
  service_dn NVARCHAR(1000) NOT NULL,
  access_name VARCHAR (1000),
  access_dn VARCHAR (1000),
  CONSTRAINT AUDIT_PROV_FK FOREIGN KEY(event_id)
  REFERENCES AUDIT_EVENT(id)
);

CREATE INDEX ADT_MGMT_PROV_ID_X ON AUDIT_MGMT_PROVISIONING (EVENT_ID ASC);

create table AUDIT_MGMT_TARGET
(
  event_id BIGINT NOT NULL,
  target_entity_name NVARCHAR(1000),
  target_entity_dn NVARCHAR(1000),
  target_entity_type NVARCHAR(50),
  CONSTRAINT AUDIT_TARGET_FK FOREIGN KEY(event_id)
  REFERENCES AUDIT_EVENT(id)
);

CREATE INDEX ADT_MGMT_TGT_ID_X ON AUDIT_MGMT_TARGET (EVENT_ID ASC);

create table AUDIT_MGMT_DELEGATE
(
  event_id BIGINT NOT NULL,
  delegate_name NVARCHAR(1000),
  delegate_dn NVARCHAR(1000),
  delegate_start_time NVARCHAR(1000),
  delegate_end_time NVARCHAR(1000),
  CONSTRAINT AUDIT_DELEGATE_FK FOREIGN KEY(event_id)
  REFERENCES AUDIT_EVENT(id)
);

CREATE INDEX ADT_MGMT_DEL_ID_X ON AUDIT_MGMT_DELEGATE (EVENT_ID ASC);

/**
--
-- I18NMESSAGES
--
-- This table is used to store ResourceBundles
--
-- profile - The name of a Service Profile, if any
-- name   - Full ResouceBundle name (e.g., CustomLabels_en)
-- messagekey   - The ResourceBundle key
-- message   - An I18N message mapped to a key
--
*/
CREATE TABLE I18NMESSAGES (
  profile NVARCHAR(256),
  name NVARCHAR(256) NOT NULL,
  messagekey NVARCHAR(256) NOT NULL,
  message NVARCHAR(2000)
);

create table BULK_DATA_SERVICE
(
  id BIGINT NOT NULL,
  starttime DATETIME,
  endtime DATETIME,
  mimetype NVARCHAR(50),
  name NVARCHAR(50),
  data IMAGE,
  filename NVARCHAR(255),
  filesize numeric(19, 0),
  DESCNAME NVARCHAR(255),
  CONSTRAINT BULK_DATA_SERVICE_PK PRIMARY KEY(id)
);

create table BULK_DATA_STORE
(
  id BIGINT NOT NULL,
  serviceid BIGINT NOT NULL,
  xml IMAGE
  CONSTRAINT BULK_DATA_STORE_FK FOREIGN KEY (serviceid)
  REFERENCES BULK_DATA_SERVICE (id) ON DELETE CASCADE,
  CONSTRAINT BULK_DATA_STORE_PK PRIMARY KEY(id)
);

CREATE INDEX BDS_SID ON BULK_DATA_STORE (SERVICEID);

create table BULK_DATA_INDEX
(
  id BIGINT NOT NULL,
  storeid BIGINT NOT NULL,
  dataobjectid VARCHAR(10)
  CONSTRAINT BULK_DATA_INDEX_FK FOREIGN KEY (storeid)
  REFERENCES BULK_DATA_STORE (id) ON DELETE CASCADE,
  CONSTRAINT BULK_DATA_INDEX_PK PRIMARY KEY(id)
);

CREATE INDEX BDI_SID ON BULK_DATA_INDEX (STOREID);
CREATE INDEX BDI_DOID ON BULK_DATA_INDEX (DATAOBJECTID);

create table MIGRATION_STATUS
(
  ID BIGINT NOT NULL,
  processCount INTEGER,
  processStatus VARCHAR(50),
  SERVICEID BIGINT,
  CONSTRAINT MIG_STATUS_PK PRIMARY KEY(ID)
);

create table RECERTIFICATIONLOG
(
  PROCESS_ID BIGINT NOT NULL,
  ACTIVITY_ID BIGINT NOT NULL,
  ENTITY_DN VARCHAR(255),
  ACCESS_DN VARCHAR(255),
  ACCOUNT_ID VARCHAR(100),
  ACCOUNT_OWNER_NAME VARCHAR(100),
  ACCOUNT_OWNER VARCHAR(255),
  ACCESS_NAME VARCHAR(100),
  ACCESS_TYPE VARCHAR(100),
  TYPE VARCHAR(2) NOT NULL,
  SERVICE VARCHAR(255),
  SERVICE_NAME VARCHAR(100),
  SERVICE_PROFILE VARCHAR(100),
  PARTICIPANT VARCHAR(255),
  PARTICIPANT_NAME VARCHAR(100),
  PARTICIPANT_ID VARCHAR(100),
  RECERT_RESULT VARCHAR(2),
  ACTION VARCHAR(2),
  COMMENTS VARCHAR(2000),
  STARTED VARCHAR(50),
  COMPLETED VARCHAR(50),
  RESULT_SUMMARY VARCHAR(2),
  TENANT VARCHAR(255),
  CONSTRAINT RECERT_PK PRIMARY KEY(PROCESS_ID, ACTIVITY_ID)
);


CREATE TABLE SCRIPT  (
  TYPE CHAR(1) NOT NULL,
  ID VARCHAR(50) NOT NULL,
  JOIN_ORDER SMALLINT NOT NULL,
  PERSON_ATTRIBUTE VARCHAR(100) NOT NULL,
  FIRST_LAST SMALLINT,
  CONCATENATE_CHAR CHAR(10),
  CONSTRAINT SCRIPT_PK PRIMARY KEY(TYPE, ID, JOIN_ORDER)
);

CREATE VIEW ROOTPROCESSVIEW (ID, TYPE, REQUESTER) AS
(
  SELECT ID, TYPE, REQUESTER
  FROM PROCESS
  WHERE  PROCESS.ROOT_PROCESS_ID  = 0
  OR PROCESS.ROOT_PROCESS_ID  = PROCESS.ID
  AND PROCESS.TYPE IN ('OP','AA','AC','UA','UC','UD','US','UR','UO','SR','OA','OC','AD',
            'AS','AR','AP','LO','AO','LS','LR','LP','LD','MS','MR','MD','DA','DC',
            'DD','PA','PC','PD','SA','SC','SD','PS','EN','RC','PE','LC','CP','EP','RP','SM','MA','EA','ER','HR')
);

CREATE VIEW SUBPROCESSVIEW (ROOT_PROCESS_ID, SUBMITTED, COMPLETED, SUBJECT_PROFILE,
  SUBJECT_SERVICE, SUBJECT, TYPE, REQUESTER, RESULT_SUMMARY)
AS
(
  SELECT ROOT_PROCESS_ID, SUBMITTED, COMPLETED, SUBJECT_PROFILE,
    SUBJECT_SERVICE, SUBJECT, TYPE, REQUESTER,
    CASE
      WHEN RESULT_SUMMARY = '' THEN 'PE'
      ELSE RESULT_SUMMARY
    END as RESULT_SUMMARY
  FROM PROCESS
  WHERE TYPE IN ('OA', 'OC', 'AD', 'AS', 'AR', 'AP')
);

CREATE VIEW PENDING_APPROVAL (PROCESSID, RESULT_SUMMARY)
AS
(
  SELECT PROCESS.ID,
    CASE
      WHEN WORKITEM.LOCK_OWNER IS NULL THEN ACTIVITY.RESULT_SUMMARY
      ELSE 'LK'
    END
  FROM PROCESS, ACTIVITY, WORKITEM
  WHERE WORKITEM.PROCESS_ID = PROCESS.ID AND WORKITEM.ACTIVITY_ID = ACTIVITY.ID
);

CREATE VIEW SUSPENDED_USERS (REQUESTEE, COMPLETED) AS
(
  SELECT PROCESS.REQUESTEE, MAX(PROCESS.COMPLETED)
  FROM PROCESS
  WHERE PROCESS.TYPE = 'US'
  GROUP BY PROCESS.REQUESTEE
);

CREATE VIEW SUSPENDED_ACCOUNT_OPERATIONS (REQUESTEE, SUBJECT_SERVICE, SUBJECT, SUBJECT_PROFILE, COMPLETED) AS
(
  SELECT PROCESS.REQUESTEE, PROCESS.SUBJECT_SERVICE, PROCESS.SUBJECT, PROCESS.SUBJECT_PROFILE, MAX(PROCESS.COMPLETED)
  FROM PROCESS
  WHERE PROCESS.TYPE = 'AS'
  GROUP BY PROCESS.REQUESTEE, PROCESS.SUBJECT_SERVICE, PROCESS.SUBJECT, PROCESS.SUBJECT_PROFILE
);

CREATE VIEW PROCESS_VIEW (ID, REQUESTER, REQUESTEE)
AS
(
  SELECT PROCESS.ID, COALESCE(PROCESS.REQUESTER, ' ') as REQUESTER, COALESCE(PROCESS.REQUESTEE, ' ') as REQUESTEE
  FROM PROCESS
);

/**
--  This table stores account information for manual service.
--  The information is used to verify if the account data had been modified in recon
--
*/
CREATE TABLE MANUAL_SERVICE_RECON_ACCOUNTS (
  GLOBAL_ID VARCHAR(255) NOT NULL,
  ACCOUNTS NTEXT,
  PRIMARY KEY (GLOBAL_ID)
);

/**
--  This table stores view definitions.
--  The information is used when creating, changing, deleting, and searching views.
--
*/
CREATE TABLE VIEW_DEFINITION (
  ID INT NOT NULL,
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(2000),
  CONSTRAINT VIEW_DEFINITION_PK PRIMARY KEY(ID)
);


/**
--  This table stores task settings for views.
--  The information is used to determine which tasks are available and enabled in a view.
--
*/
CREATE TABLE TASKS_VIEWABLE (
  TASK_ID VARCHAR(255) NOT NULL,
  VIEW_ID INT NOT NULL,
  VIEWABLE CHAR(1) NOT NULL DEFAULT 'N',
  CONSTRAINT TASKS_VIEWABLE_PK PRIMARY KEY(TASK_ID, VIEW_ID),
  CONSTRAINT VIEW_ID_FK FOREIGN KEY (VIEW_ID) REFERENCES VIEW_DEFINITION (ID)
);

CREATE INDEX TASKS_VIEWABLE_X ON TASKS_VIEWABLE (VIEW_ID ASC, VIEWABLE ASC, TASK_ID ASC);

/**
--  This table stores common tasks for homepage.
--
*/
CREATE TABLE COMMON_TASKS  (
	PERSONA VARCHAR(100) NOT NULL,
	TASK_ID VARCHAR(255) NOT NULL,
	CONSTRAINT COMMON_TASKS_PK PRIMARY KEY(PERSONA, TASK_ID)
);

CREATE TABLE SUMMARY_ORDER (
    RESULT_SUMMARY NVARCHAR(2) NOT NULL,
    RESULT_SEVERITY SMALLINT NOT NULL,
    CONSTRAINT Uni_ResultSummary PRIMARY KEY(RESULT_SUMMARY)
);

CREATE TABLE PASSWORD_SYNCH (
	ACTIVITY_ID BIGINT NOT NULL,
	ACCOUNT_DN NVARCHAR(512),
	TIME_REQUESTED NVARCHAR(50),
	PASSWORD NVARCHAR(500),

	CONSTRAINT PWD_SYNCH_PK PRIMARY KEY(ACTIVITY_ID)
);

CREATE INDEX PS_ACCDN_X ON PASSWORD_SYNCH(ACCOUNT_DN);
CREATE INDEX PS_TIME_X ON PASSWORD_SYNCH(TIME_REQUESTED);

CREATE TABLE ROLE_INHERITANCE (
  ASCENDENT NVARCHAR(2000) NOT NULL,
  DESCENDENT NVARCHAR(2000) NOT NULL,
  CONSTRAINT ROLE_INH_PK PRIMARY KEY(ASCENDENT, DESCENDENT)
);

CREATE INDEX ROLE_INH_ASC_IDX ON ROLE_INHERITANCE (ASCENDENT ASC) ;
CREATE INDEX ROLE_INH_DSC_IDX ON ROLE_INHERITANCE (DESCENDENT ASC) ;

CREATE TABLE SOD_POLICY (
		ID BIGINT NOT NULL,
		GLOBAL_ID BIGINT NOT NULL,
		NAME NVARCHAR(256),
		DESCRIPTION NVARCHAR(1024),
		BUSINESS_UNIT_NAME NVARCHAR(256),
		ENABLED CHAR(1),
		DN NVARCHAR(2000),
		VERSION BIGINT NOT NULL,
		CONSTRAINT SP_PK PRIMARY KEY (ID)
	)

CREATE TABLE SOD_RULE (
		ID BIGINT NOT NULL,
		POLICY_ID BIGINT NOT NULL,
		GLOBAL_ID BIGINT NOT NULL,
		NAME NVARCHAR(500),
		DESCRIPTION NVARCHAR(500),
		CARDINALITY SMALLINT,
		VERSION BIGINT NOT NULL,
		CONSTRAINT SPR_PK PRIMARY KEY (ID),
		CONSTRAINT SPR_FK FOREIGN KEY (POLICY_ID) REFERENCES SOD_POLICY (ID)
	)

CREATE TABLE SOD_OWNER (
		ID BIGINT NOT NULL,
		POLICY_ID BIGINT NOT NULL,
		OWNER_NAME NVARCHAR(256),
		BUSINESS_UNIT_NAME NVARCHAR(256),
		TYPE CHAR(2),
		DN NVARCHAR(2000),
		CONSTRAINT SPO_PK PRIMARY KEY (ID),
		CONSTRAINT SPO_FK FOREIGN KEY (POLICY_ID) REFERENCES SOD_POLICY (ID)
	)

CREATE TABLE SOD_RULE_ROLE (
		ID BIGINT NOT NULL,
		POLICY_RULE_ID BIGINT NOT NULL,
		GLOBAL_ID BIGINT NOT NULL,
		NAME NVARCHAR(256),
		DESCRIPTION NVARCHAR(1024),
		BUSINESS_UNIT_NAME NVARCHAR(256),
		DN NVARCHAR(2000),
		CONSTRAINT SPRR_PK PRIMARY KEY (ID),
		CONSTRAINT SPRR_FK FOREIGN KEY (POLICY_RULE_ID) REFERENCES SOD_RULE (ID)
	)

CREATE TABLE SOD_VIOLATION_HISTORY (
		ID BIGINT NOT NULL,
		POLICY_GLOBAL_ID BIGINT NOT NULL,
		RULE_GLOBAL_ID BIGINT NOT NULL,
		PERSON_GLOBAL_ID BIGINT NOT NULL,
		PERSON_NAME NVARCHAR(256),
		PERSON_BU NVARCHAR(256),
		PERSON_DN NVARCHAR(2000),
		PROCESS_ID BIGINT,
		ADMIN_NAME NVARCHAR(256),
		ADMIN_BU NVARCHAR(256),
		ADMIN_DN NVARCHAR(2000),
		ADMIN_NOTES NVARCHAR(4000),
		STATUS CHAR(1),
		TS BIGINT NOT NULL,
		CONSTRAINT SVIOHIST_PK PRIMARY KEY (ID)
	)

CREATE TABLE SOD_VIOLATION_STATUS (
		ID BIGINT NOT NULL,
		POLICY_GLOBAL_ID BIGINT NOT NULL,
		RULE_GLOBAL_ID BIGINT NOT NULL,
		PERSON_GLOBAL_ID BIGINT NOT NULL,
		PERSON_NAME NVARCHAR(256),
		PERSON_BU NVARCHAR(256),
		PERSON_DN NVARCHAR(2000),
		PROCESS_ID BIGINT,
		ADMIN_NAME NVARCHAR(256),
		ADMIN_BU NVARCHAR(256),
		ADMIN_DN NVARCHAR(2000),
		ADMIN_NOTES NVARCHAR(4000),
		STATUS CHAR(1),
		TS BIGINT NOT NULL,
		EVAL_TS BIGINT NOT NULL,
		CONSTRAINT SVIOSTAT_PK PRIMARY KEY (ID)
	)

CREATE TABLE SOD_VIOLATION_ROLE_MAP (
		ID BIGINT NOT NULL,
		VIOLATION_ID BIGINT NOT NULL,
		RULEROLE NVARCHAR(2000),
		PERSONROLE NVARCHAR(2000),
		CONSTRAINT SPRVR_PK PRIMARY KEY (ID),
		CONSTRAINT SPRVR_FK FOREIGN KEY (VIOLATION_ID) REFERENCES SOD_VIOLATION_HISTORY (ID)
	)

CREATE INDEX SP_1 ON SOD_POLICY (GLOBAL_ID ASC, VERSION DESC)
CREATE INDEX SR_1 ON SOD_RULE (GLOBAL_ID ASC, POLICY_ID ASC)
CREATE INDEX SVS_1 ON SOD_VIOLATION_STATUS (POLICY_GLOBAL_ID ASC, EVAL_TS DESC)
CREATE INDEX SVS_2 ON SOD_VIOLATION_STATUS (PERSON_GLOBAL_ID ASC, RULE_GLOBAL_ID ASC)
CREATE INDEX SVS_3 ON SOD_VIOLATION_STATUS (RULE_GLOBAL_ID ASC, STATUS ASC, ID ASC)
CREATE INDEX SVRM_1 ON SOD_VIOLATION_ROLE_MAP (VIOLATION_ID ASC, PERSONROLE ASC, RULEROLE ASC)
ALTER TABLE SOD_VIOLATION_STATUS ADD CONSTRAINT SVS_UC UNIQUE (RULE_GLOBAL_ID, PERSON_GLOBAL_ID)

CREATE TABLE USERRECERT_HISTORY (
  ID BIGINT NOT NULL,
  PROCESS_ID BIGINT NOT NULL,
  ACTIVITY_ID BIGINT NOT NULL,
  PERSON_DN NVARCHAR(255),
  PERSON_NAME NVARCHAR(240),
  PERSON_PROFILE NVARCHAR(128),
  PERSON_EMAIL NVARCHAR(240),
  PERSON_CUSTOM_DISPLAY NVARCHAR(240),
  PERSON_STATUS INTEGER,
  PERSON_CONTAINER_DN NVARCHAR(255),
  PERSON_CONTAINER_NAME NVARCHAR(128),
  POLICY_DN NVARCHAR(255),
  POLICY_NAME NVARCHAR(240),
  SUBMITTED_DATE NVARCHAR(50),
  TIMEOUT SMALLINT,
  CONSTRAINT USERRECERT_PK PRIMARY KEY (ID)
)

ALTER TABLE USERRECERT_HISTORY ADD CONSTRAINT USERRECERT_PROC_FK FOREIGN KEY (PROCESS_ID) REFERENCES PROCESS (ID) ON DELETE CASCADE
ALTER TABLE USERRECERT_HISTORY ADD CONSTRAINT USERRECERT_ACTV_FK FOREIGN KEY (ACTIVITY_ID) REFERENCES ACTIVITY (ID) ON DELETE CASCADE

CREATE INDEX URH_SUBMITTED ON USERRECERT_HISTORY (SUBMITTED_DATE ASC)

CREATE TABLE USERRECERT_ROLE (
  ID BIGINT NOT NULL,
  RECERT_ID BIGINT NOT NULL,
  ROLE_DN NVARCHAR(255) NOT NULL,
  ROLE_NAME NVARCHAR(240),
  ROLE_DESCRIPTION NVARCHAR(1024),
  DECISION CHAR(2),
  CONSTRAINT USERRECERT_ROLE_PK PRIMARY KEY (ID)
)

ALTER TABLE USERRECERT_ROLE ADD CONSTRAINT USERRECERT_ROLE_FK FOREIGN KEY (RECERT_ID) REFERENCES USERRECERT_HISTORY (ID) ON DELETE CASCADE

CREATE INDEX URR_ID_DEC ON USERRECERT_ROLE (RECERT_ID ASC, DECISION ASC)

CREATE TABLE USERRECERT_ACCOUNT (
  ID BIGINT NOT NULL,
  RECERT_ID BIGINT NOT NULL,
  ACCOUNT_DN NVARCHAR(255) NOT NULL,
  ACCOUNT_UID NVARCHAR(240) NOT NULL,
  SERVICE_DN NVARCHAR(255) NOT NULL,
  SERVICE_NAME NVARCHAR(240),
  SERVICE_DESCRIPTION NVARCHAR(240),
  DECISION CHAR(2),
  CONSTRAINT USERRECERT_ACCT_PK PRIMARY KEY (ID)
)

ALTER TABLE USERRECERT_ACCOUNT ADD CONSTRAINT USERRECERT_ACCT_FK FOREIGN KEY (RECERT_ID) REFERENCES USERRECERT_HISTORY (ID) ON DELETE CASCADE

CREATE INDEX URA_ID_DEC ON USERRECERT_ACCOUNT (RECERT_ID ASC, DECISION ASC)

CREATE TABLE USERRECERT_GROUP (
  ID BIGINT NOT NULL,
  RECERT_ID BIGINT NOT NULL,
  ACCOUNT_ID BIGINT NOT NULL,
  GROUP_DN NVARCHAR(500) NOT NULL,
  GROUP_NAME NVARCHAR(240),
  GROUP_DESCRIPTION NVARCHAR(1024),
  DECISION CHAR(2),
  CONSTRAINT USERRECERT_GRP_PK PRIMARY KEY (ID)
)

ALTER TABLE USERRECERT_GROUP ADD CONSTRAINT USERRECERT_GRP_FK FOREIGN KEY (RECERT_ID) REFERENCES USERRECERT_HISTORY (ID)
ALTER TABLE USERRECERT_GROUP ADD CONSTRAINT USERRECERT_GA_FK FOREIGN KEY (ACCOUNT_ID) REFERENCES USERRECERT_ACCOUNT (ID) ON DELETE CASCADE

CREATE INDEX URG_ID_DEC ON USERRECERT_GROUP (RECERT_ID ASC, ACCOUNT_ID DESC, DECISION ASC)

CREATE TABLE RECERTIFIER_DETAILS_INFO (
  DN VARCHAR(255) NOT NULL,
  RECERTIFIER_TYPE VARCHAR(255),
  RECERTIFIER_NAME VARCHAR(255),
  CONSTRAINT RECERT_DETAILS_PK PRIMARY KEY (DN)
)



CREATE TABLE ACI_CATEGORIES (
  ID SMALLINT NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  CONSTRAINT ACI_CATEGORIES_PK PRIMARY KEY(NAME)
)

CREATE TABLE SA_POLICY (
		ID BIGINT NOT NULL,
		DN VARCHAR(2000),
		BU_DN VARCHAR(2000),
		SCOPE SMALLINT,
		STATUS SMALLINT,
		POLICY_NAME VARCHAR(255),
		L_BU_DN AS LOWER(BU_DN),
		CONSTRAINT SAP_PK PRIMARY KEY (ID)
	)
CREATE INDEX SA_POLICY_BU_SCOPE_X ON SA_POLICY (STATUS ASC, SCOPE, BU_DN) 
CREATE INDEX L_POLICY_BU_DN_X ON SA_POLICY (L_BU_DN ASC)

CREATE TABLE SA_POLICY_MEMBERSHIP (
		ID BIGINT NOT NULL,
		POLICY_ID BIGINT NOT NULL,
		ROLE_DN VARCHAR(2000),
		L_ROLE_DN AS LOWER(ROLE_DN),
		CONSTRAINT SAP_MEMBERSHIP_PK PRIMARY KEY (ID)
	)
CREATE INDEX SA_MEMBERSHIP_POLICY_ID_X ON SA_POLICY_MEMBERSHIP (POLICY_ID ASC) 
CREATE INDEX L_MEMBERSHIP_POLICY_ROLE_X ON SA_POLICY_MEMBERSHIP (L_ROLE_DN ASC)

CREATE TABLE SA_POLICY_ENTITLEMENT (
		ID BIGINT NOT NULL,
		POLICY_ID BIGINT NOT NULL,
		TYPE SMALLINT,
		DEFINITION_TYPE SMALLINT,
	    NAME VARCHAR(256),		
		TARGET_NAME	VARCHAR(256),	
		SERVICE_TYPE VARCHAR(256),	
		SERVICE_NAME VARCHAR(256),	
		SERVICE_GROUP VARCHAR(500), 	
		TARGET_DN VARCHAR(2000),
		L_TARGET_DN AS LOWER(TARGET_DN),
		CONSTRAINT SAP_ENTITLEMENT_PK PRIMARY KEY (ID)
	)
CREATE INDEX SA_ENTITLEMENT_POLICY_ID_X ON SA_POLICY_ENTITLEMENT (POLICY_ID ASC) 
CREATE INDEX SA_ENTITLEMENT_TYPE_X ON SA_POLICY_ENTITLEMENT (TYPE ASC, DEFINITION_TYPE) 
CREATE INDEX SA_ENTITLEMENT_TARGET_DN_X ON SA_POLICY_ENTITLEMENT (TARGET_DN ASC) 
CREATE INDEX SA_ENTITLEMENT_FILTER_X ON SA_POLICY_ENTITLEMENT (SERVICE_TYPE ASC, SERVICE_GROUP, TARGET_NAME, SERVICE_NAME)
CREATE INDEX L_ENTITLEMENT_TARGET_DN_X ON SA_POLICY_ENTITLEMENT (L_TARGET_DN ASC)

CREATE TABLE SA_POLICY_DESCRIPTION (
		POLICY_ID BIGINT NOT NULL,
		DESCRIPTION VARCHAR (2000)
	)

CREATE INDEX SA_POLICY_DESC_POLICY_ID_X ON SA_POLICY_DESCRIPTION (POLICY_ID ASC)

CREATE TABLE SA_POLICY_ERURI (
		POLICY_ID BIGINT NOT NULL,
		ERURI VARCHAR (2000)
	)

CREATE INDEX SA_POLICY_ERURI_POLICY_ID_X ON SA_POLICY_ERURI (POLICY_ID ASC);

CREATE VIEW V_SAPOLICY_ENTITLEMENT_DETAIL 
(SAPENTITLE_DN, SAPENTITLE_TYPE, SAPENTITLE_DEFINITION_TYPE, SAPENTITLE_NAME, SAPENTITLE_TARGET_NAME, SAPENTITLE_SERVICE_TYPE, SAPENTITLE_SERVICE_NAME, SAPENTITLE_SERVICE_GROUP, SAPENTITLE_TARGET_DN) 
AS (SELECT SA_POLICY.DN, CASE SA_POLICY_ENTITLEMENT.TYPE WHEN 1 THEN '1' WHEN 0 THEN '0' END, CASE SA_POLICY_ENTITLEMENT.DEFINITION_TYPE WHEN 1 THEN '1' WHEN 0 THEN '0' END, SA_POLICY_ENTITLEMENT.NAME, SA_POLICY_ENTITLEMENT.TARGET_NAME, SA_POLICY_ENTITLEMENT.SERVICE_TYPE, SA_POLICY_ENTITLEMENT.SERVICE_NAME, SA_POLICY_ENTITLEMENT.SERVICE_GROUP, SA_POLICY_ENTITLEMENT.TARGET_DN 
FROM SA_POLICY, SA_POLICY_ENTITLEMENT 
WHERE SA_POLICY.ID=SA_POLICY_ENTITLEMENT.POLICY_ID);

CREATE TABLE SA_EVALUATION_CREDENTIAL  ( 
        DN VARCHAR(2000) NOT NULL,
		ACCOUNT_DN VARCHAR(2000),	 
		ACCOUNT_UID VARCHAR(256), 
		USE_GLOBAL_SETTINGS SMALLINT, 
		IS_SEARCHABLE SMALLINT, 
		IS_EXCLUSIVE SMALLINT,
		IS_PASSWORD_VIEWABLE SMALLINT,
		ACCOUNT_STATUS SMALLINT,
		SERVICE_DN VARCHAR(2000),
		RESET_PASSWORD SMALLINT,
		MAX_CHECKOUT_TIME INTEGER,
		OBJECTPROFILE_NAME VARCHAR(255),
		NAME VARCHAR(255),
		OWNERSHIP_TYPE VARCHAR(255),
		OWNER_DN VARCHAR(2000),
		L_DN AS LOWER(DN),
		L_SERVICE_DN AS LOWER(SERVICE_DN),
		CONSTRAINT SA_EVAL_CREDENTIAL_PK PRIMARY KEY (DN)
	)
CREATE INDEX SA_EVAL_CRED_UID_X ON SA_EVALUATION_CREDENTIAL (ACCOUNT_UID ASC) 
CREATE INDEX SA_EVAL_CRED_ACCOUNT_DN_X ON SA_EVALUATION_CREDENTIAL (ACCOUNT_DN ASC) 
CREATE INDEX SA_EVAL_CRED_SERVICE_DN_X ON SA_EVALUATION_CREDENTIAL (SERVICE_DN ASC) 
CREATE INDEX SA_EVAL_CRED_GLOBAL_X ON SA_EVALUATION_CREDENTIAL (USE_GLOBAL_SETTINGS ASC)
CREATE INDEX SA_EVAL_CRED_SETTING_X ON SA_EVALUATION_CREDENTIAL (IS_EXCLUSIVE ASC, IS_SEARCHABLE, ACCOUNT_STATUS, IS_PASSWORD_VIEWABLE) 
CREATE INDEX L_EVAL_CRED_SERVICE_DN_X ON SA_EVALUATION_CREDENTIAL (L_SERVICE_DN ASC)
CREATE INDEX L_EVAL_CRED_DN_X ON SA_EVALUATION_CREDENTIAL (L_DN ASC)

CREATE TABLE SA_EVAL_CRED_DESCRIPTION (
		DN VARCHAR (2000) NOT NULL,
		DESCRIPTION VARCHAR (2000),
		L_DN AS LOWER(DN)
	)
CREATE INDEX SA_EVAL_CRED_DESC_X ON SA_EVAL_CRED_DESCRIPTION (DN ASC)	
CREATE INDEX SA_EVAL_CRED_DESC_LDN_X ON SA_EVAL_CRED_DESCRIPTION (L_DN ASC)

CREATE TABLE SA_EVALUATION_CREDENTIAL_POOL (
        DN VARCHAR(2000) NOT NULL,
		NAME VARCHAR(256),
		SERVICE_DN VARCHAR(2000),
		BU_DN VARCHAR(2000),
		USE_GLOBAL_SETTINGS SMALLINT,
		OBJECTPROFILE_NAME VARCHAR(255),
		L_SERVICE_DN AS LOWER(SERVICE_DN),
		L_BU_DN AS LOWER(BU_DN),
		CONSTRAINT SA_EVAL_POOL_PK PRIMARY KEY (DN)
	)
CREATE INDEX SA_EVAL_POOL_NAME_X ON SA_EVALUATION_CREDENTIAL_POOL (NAME ASC) 
CREATE INDEX SA_EVAL_POOL_SERVICE_DN_X ON SA_EVALUATION_CREDENTIAL_POOL (SERVICE_DN ASC) 
CREATE INDEX SA_EVAL_POOL_BU_DN_X ON SA_EVALUATION_CREDENTIAL_POOL (BU_DN ASC) 
CREATE INDEX L_EVAL_POOL_SERVICE_DN_X ON SA_EVALUATION_CREDENTIAL_POOL (L_SERVICE_DN ASC)
CREATE INDEX L_EVAL_POOL_BU_DN_X ON SA_EVALUATION_CREDENTIAL_POOL (L_BU_DN ASC)

CREATE TABLE SA_CREDPOOL_DESCRIPTION (
		DN VARCHAR (2000) NOT NULL,
		DESCRIPTION VARCHAR (2000)
	)

CREATE INDEX SA_CREDPOOL_DESCRIPTION_DN_X ON SA_CREDPOOL_DESCRIPTION (DN ASC)

CREATE TABLE SA_CREDPOOL_OWNER (
		DN VARCHAR (2000) NOT NULL,
		OWNER VARCHAR (2000)
	)

CREATE INDEX SA_CREDPOOL_OWNER_DN_X ON SA_CREDPOOL_OWNER (DN ASC)

CREATE TABLE SA_CREDPOOL_GROUP (
		DN VARCHAR (2000) NOT NULL,
		ERSERVICEGROUP VARCHAR(2000)
	)

CREATE INDEX SA_CREDPOOL_GROUP_DN_X ON SA_CREDPOOL_GROUP (DN ASC)

CREATE TABLE SA_EVALUATION_SERVICE (
        DN VARCHAR(2000) NOT NULL,
		NAME VARCHAR(256),
		TYPE VARCHAR(256),	
		BU_DN VARCHAR(2000),
		L_DN AS LOWER(DN),
		L_BU_DN AS LOWER(BU_DN),
		CONSTRAINT SA_EVAL_SERVICE_PK PRIMARY KEY (DN)
	)
CREATE INDEX SA_EVAL_SERVICE_INFO_X ON SA_EVALUATION_SERVICE (TYPE ASC, NAME)
CREATE INDEX SA_EVAL_SERVICE_BU_DN_X ON SA_EVALUATION_SERVICE (BU_DN ASC)
CREATE INDEX L_EVAL_SERVICE_DN_X ON SA_EVALUATION_SERVICE (L_DN ASC)
CREATE INDEX L_EVAL_SERVICE_BU_DN_X ON SA_EVALUATION_SERVICE (L_BU_DN ASC)

CREATE TABLE SA_EVALUATION_SERVICE_TAG  (
		  SERVICE_DN VARCHAR(2000) NOT NULL , 
		  TAG VARCHAR(500) NOT NULL,
		  L_SERVICE_DN AS LOWER(SERVICE_DN))   
CREATE INDEX L_EVAL_SERVICE_TAG_X ON SA_EVALUATION_SERVICE_TAG (L_SERVICE_DN ASC, TAG ASC) 
	
CREATE TABLE SA_EVALUATION_BU_HIERARCHY (
		BU_DN VARCHAR(2000) NOT NULL,
		CHILD_DN VARCHAR(2000) NOT NULL,
		L_BU_DN AS LOWER(BU_DN),
		L_CHILD_DN AS LOWER(CHILD_DN),
		CONSTRAINT SA_EVAL_BU_HIERARCHY_PK PRIMARY KEY (BU_DN, CHILD_DN)
	)
CREATE INDEX L_EVAL_BU_HIER_DN_X ON SA_EVALUATION_BU_HIERARCHY (L_BU_DN ASC, L_CHILD_DN ASC)

CREATE TABLE SA_EVALUATION_BU (
		DN VARCHAR(2000) NOT NULL,
		NAME VARCHAR(256),
		L_DN AS LOWER(DN),
		CONSTRAINT SA_EVAL_BU_PK PRIMARY KEY (DN)
	)
CREATE INDEX L_EVAL_BU_DN_X ON SA_EVALUATION_BU (L_DN ASC)

CREATE TABLE erCredentialLease
(
        dn VARCHAR(2000) NOT NULL,
		erCVCatalog VARCHAR(2000) NOT NULL,
    	erLessee VARCHAR(2000) NOT NULL,
    	erLesseeName VARCHAR(256),
      	erLeaseExpirationTime DATETIME,
      	erJustification VARCHAR(2000),
      	erLeaseStatus SMALLINT,
      	erCredentialPoolDN VARCHAR(2000),
  		erCustomAttribute1 VARCHAR(2000),
  		erCustomAttribute2 VARCHAR(2000),
  		erCustomAttribute3 VARCHAR(2000),
  		erCustomAttribute4 VARCHAR(2000),
  		erCustomAttribute5 VARCHAR(2000),
      	erLastNotification DATETIME,
      	erLeaseCreateTime DATETIME,
      	L_DN AS LOWER(dn),
      	L_ERCVCATALOG AS LOWER(erCVCatalog),
		CONSTRAINT CREDENTIAL_LEASE_PK PRIMARY KEY (dn)
	)

CREATE UNIQUE INDEX CRED_LEASE_CVCATALOG_X ON erCredentialLease (erCVCatalog ASC) 
CREATE INDEX CRED_LEASE_LESSEE_X ON erCredentialLease (erLessee ASC) 
CREATE INDEX CRED_LEASE_EXPIRE_TIME_X ON erCredentialLease (erLeaseExpirationTime ASC) 
CREATE INDEX L_LEASE_CVCATALOG_X ON ERCREDENTIALLEASE (L_ERCVCATALOG ASC)
CREATE INDEX L_LEASE_DN_X ON ERCREDENTIALLEASE (L_DN ASC)

CREATE TABLE DB_REPLICATION_CONFIG (
		ID INT NOT NULL,
		OBJECT_CLASS_NAME VARCHAR(256) NOT NULL,
		ATTRIBUTE_NAME VARCHAR(256) NOT NULL,
		DB_TABLE_NAME VARCHAR(256) NOT NULL,
		KEY_COLUMN_NAME VARCHAR(256) NOT NULL,
	    REPLICATE_COLUMN_NAME VARCHAR(256) NOT NULL,
		MULTI_VALUE CHAR(1) NOT NULL,		
		UPDATE_ONLY CHAR(1) NOT NULL,
		CASE_SENSITIVE CHAR(1),		
		CONSTRAINT DB_REPLICATION_CONFIG_PK PRIMARY KEY (ID)
	)

create table AUDIT_MGMT_LEASE
(
  	event_id BIGINT NOT NULL,
  	lease_expiration_time VARCHAR(500),
  	justification VARCHAR(2000),
  	pool_name VARCHAR(256),
  	pool_dn VARCHAR(2000),
  	custom_attribute_1 VARCHAR(2000),
  	custom_attribute_2 VARCHAR(2000),
  	custom_attribute_3 VARCHAR(2000),
  	custom_attribute_4 VARCHAR(2000),
  	custom_attribute_5 VARCHAR(2000),
  	lease_dn VARCHAR(2000),
  	CONSTRAINT AUDIT_LEASE_FK FOREIGN KEY(event_id)
  	REFERENCES AUDIT_EVENT(id)
)

CREATE INDEX ADT_MGMT_LEASE_ID_X ON AUDIT_MGMT_LEASE (EVENT_ID ASC)
CREATE INDEX ADT_MGMT_LEASE_DN_X ON AUDIT_MGMT_LEASE (LEASE_DN ASC)

CREATE TABLE SA_GLOBAL_CONFIGURATION ( 
		ID INT NOT NULL,
        ACCESS_MODE SMALLINT, 
        MAX_CHECKOUT_DURATION INT, 
		PASSWORD_VIEWABLE SMALLINT,
		SHAREDACCOUNTS_SEARCH SMALLINT,
		PASSWORD_RESET SMALLINT,
		OPERATION_NAME VARCHAR(256),
		LEASE_EXP_HANDLING CHAR(1) , 
		LEASE_EXP_HANDLING_OPTION SMALLINT , 
		VIOLATION_NOTIFY_PARTICIPANT VARCHAR(10) , 
		NOTIFICATION_PARTICIPANT_DN VARCHAR(256) , 
		SCHEDULE_FREQUENCY_MINUTES BIGINT , 
		NOTIFY_FREQUENCY_MINUTES BIGINT, 
        CONSTRAINT SA_GLOBAL_CONFIGURATION_PK PRIMARY KEY(ID) 
)

CREATE TABLE TASK_TREE (
      PARENT      VARCHAR(500) NOT NULL,   
      TASK_ID     VARCHAR(500) NOT NULL,    
      SEQUENCE_NO SMALLINT NOT NULL,
      ADMIN_ONLY  CHAR(1),
      CONSTRAINT TASK_TREE_PK PRIMARY KEY (TASK_ID)
)

CREATE INDEX TASK_TREE_PARENT_X on TASK_TREE (PARENT ASC, SEQUENCE_NO ASC) 

CREATE TABLE SA_BULK_LOAD (
  LOAD_ID VARCHAR (255) NOT NULL,
  DATA NTEXT,
  CONSTRAINT SA_BULK_LOAD_PK PRIMARY KEY (LOAD_ID)
)  

CREATE TABLE ROLE_ASSIGNMENT_ATTRIBUTES (
	ROLE_DN VARCHAR(2000) NOT NULL,
	ATTRIBUTE_NAME VARCHAR(256) NOT NULL,
	ROLE_NAME VARCHAR(256),
	CONSTRAINT ROLE_ASSIGNMENT_ATTRIBUTES_PK PRIMARY KEY (ROLE_DN, ATTRIBUTE_NAME)
);

CREATE TABLE PERSON_ROLE_ASSIGNMENT (
  ID BIGINT NOT NULL,
  PERSON_DN VARCHAR(2000) NOT NULL,
  ROLE_DEFINED_DN VARCHAR(2000) NOT NULL,
  ROLE_ASSIGNED_DN VARCHAR(2000) NOT NULL,
  CONSTRAINT ROLE_ASSIGNMENT_PK PRIMARY KEY(ID)
);

CREATE INDEX PERSON_ROLE_ASSIGN_X ON PERSON_ROLE_ASSIGNMENT (PERSON_DN ASC, ROLE_DEFINED_DN ASC, ROLE_ASSIGNED_DN ASC);

CREATE TABLE PERSON_ROLE_ASSIGNMENT_VALUES (
  RA_ID BIGINT NOT NULL,
  ATTRIBUTE_NAME VARCHAR(256) NOT NULL,
  ATTRIBUTE_VALUE VARCHAR(2000) NOT NULL
);

CREATE TABLE SYNCH_OBJECT_LOCK (
  OBJ_ID VARCHAR(2000) NOT NULL,
  CONSTRAINT SYNCH_OBJECT_LOCK_PK PRIMARY KEY(OBJ_ID)
);

CREATE VIEW V_AUTHORIZED_CREDENTIALS ( CRED_DN, CRED_ACCOUNT_DN, CRED_ACCOUNT_UID, Exclusice_Access, SA_MEMBER_ROLE_DN,Service_Dn, Service, Service_BUDN, 
Service_BU, SA_POLICY_ID, POLICY_NAME,SA_ENTITLEMENT_ID) AS (SELECT distinct cred.dn, cred.account_dn, cred.account_uid, cred.is_exclusive, member.ROLE_DN, 
service.dn, service.name, bu.dn, bu.name, p.id, p.POLICY_NAME ,ent.id     	FROM   sa_evaluation_credential cred,  sa_policy  p,  sa_policy_entitlement      
ent,  sa_evaluation_bu bu,  sa_policy_membership    member,  SA_GLOBAL_CONFIGURATION global_config,  sa_evaluation_service     service   LEFT OUTER JOIN   
sa_evaluation_service_tag service_tag on (service.dn = service_tag.service_dn)  WHERE  (p.status = 0)  AND  (ent.policy_id = p.id)   AND   (ent.type = 0)   
AND  (member.policy_id = p.id)     	  AND     	  (cred.service_dn = service.dn)  AND  (service.bu_dn = bu.dn) AND( ( (cred.use_global_settings = 1) AND 
(cred.is_exclusive != 2) ) OR ( (cred.use_global_settings = 0) AND (global_config.access_mode != 2) ) )  AND    (( (ent.definition_type = 0 AND ent.target_dn = 
cred.dn)     )OR((ent.definition_type = 1)AND((ent.target_name  = '') OR (SUBSTRING(ent.target_name, 1,LEN(ent.target_name)) != '*' AND LOWER(ent.target_name) 
= LOWER(cred.account_uid) )  OR  ( SUBSTRING(ent.target_name, 1,LEN(ent.target_name)) = '*'  AND   LOWER(cred.account_uid) like  
LOWER(SUBSTRING(ent.target_name, 1, LEN(ent.target_name)-1))+'%'  )  ) AND  ( (ent.service_name  = '')  OR  ( SUBSTRING(ent.service_name, 
1,LEN(ent.service_name)) != '*'   AND  LOWER(ent.service_name) = LOWER(service.NAME )  ) OR    ( SUBSTRING(ent.service_name, 1,LEN(ent.service_name)) = '*'  
AND  LOWER(service.name) like LOWER(SUBSTRING(ent.service_name, 1, LEN(ent.service_name)-1))+'%'  )  )   AND (  (ent.service_group  = '')   OR  ( 
SUBSTRING(ent.service_group, 1,LEN(ent.service_group)) != '*'  AND  LOWER(ent.service_group) = LOWER(service_tag.tag)   )   OR   ( 	
SUBSTRING(ent.service_group, 1,LEN(ent.service_group)) = '*'  AND  	LOWER(service_tag.tag) like LOWER(SUBSTRING(ent.service_group, 1, 
LEN(ent.service_group)-1))+'%'  )   )    AND	(ent.service_type = '' OR ent.service_type = service.type)  AND ( 	 (  (p.scope = 1) AND (service.bu_dn = 
p.bu_dn) )  OR (  (p.scope = 2) AND  (  (service.bu_dn = p.bu_dn)  OR   (service.bu_dn in (SELECT child_dn FROM sa_evaluation_bu_hierarchy WHERE bu_dn = 
p.bu_dn) )  ) 	 )  )   )  )  ); 

CREATE VIEW V_AUTHORIZED_CREDENTIALPOOLS ( CREDPOOL_DN, CREDPOOL_NAME, GROUP_DN ,SA_MEMBER_ROLE_DN, Service_Dn, Service, Service_BUDN, Service_BU, 
SA_POLICY_ID, SA_POLICY_NAME, SA_ENTITLEMENT_ID) AS (SELECT distinct  credpool.dn, credpool.name, poolgroup.ERSERVICEGROUP,member.ROLE_DN, 
service.dn, service.name, bu.dn, bu.name, p.id, p.POLICY_NAME, ent.id     	FROM     sa_evaluation_credential_pool credpool,   
sa_policy   p,  sa_policy_entitlement      ent,   sa_evaluation_bu      bu,   sa_policy_membership    member,   sa_credpool_group  poolgroup,    
sa_evaluation_service     service   LEFT OUTER JOIN   sa_evaluation_service_tag service_tag on (service.dn = service_tag.service_dn) WHERE     	  (p.status = 
0) AND (ent.policy_id = p.id)  AND   (ent.type = 1)  AND (credpool.service_dn = service.dn)  AND ( service.bu_dn = bu.dn)  
AND (credpool.dn = poolgroup.dn) AND  (member.policy_id = p.id)  AND (  (  (ent.definition_type = 0 AND ent.target_dn = credpool.dn)    )         OR  (  
(ent.definition_type = 1)  AND  (  (ent.target_name  = '')  OR  (   SUBSTRING(ent.target_name, 1,LEN(ent.target_name)) != '*'   AND  LOWER(ent.target_name) = 
LOWER(credpool.name)  )    OR   (  SUBSTRING(ent.target_name, 1,LEN(ent.target_name)) = '*'  AND LOWER(credpool.NAME) like LOWER(SUBSTRING(ent.target_name, 1, 
LEN(ent.target_name)-1))+'%'  )  ) AND (  (ent.service_name  = '')   OR  (  SUBSTRING(ent.service_name, 1,LEN(ent.service_name)) != '*'  AND  
LOWER(ent.service_name) = LOWER(service.NAME )  )  OR  (  SUBSTRING(ent.service_name, 1,LEN(ent.service_name)) = '*'  AND  LOWER(service.name) like 
LOWER(SUBSTRING(ent.service_name, 1, LEN(ent.service_name)-1))+'%'   )   )   AND   (   (ent.service_group  = '')  OR   ( SUBSTRING(ent.service_group, 
1,LEN(ent.service_group)) != '*'  AND LOWER(ent.service_group) = LOWER(service_tag.tag)  )   OR  (  SUBSTRING(ent.service_group, 1,LEN(ent.service_group)) = 
'*'  AND  LOWER(service_tag.tag) like LOWER(SUBSTRING(ent.service_group, 1, LEN(ent.service_group)-1))+'%'  )   )  AND  (ent.service_type = '' OR 
ent.service_type = service.TYPE)  AND    (   (    (p.scope = 1) AND (service.bu_dn = p.bu_dn) )  OR   (  (p.scope = 2) AND   (  (service.bu_dn = p.bu_dn)   
OR   (service.bu_dn in (SELECT child_dn FROM  SA_evaluation_bu_hierarchy WHERE bu_dn = p.bu_dn) )  )   )   )    )   ) );
