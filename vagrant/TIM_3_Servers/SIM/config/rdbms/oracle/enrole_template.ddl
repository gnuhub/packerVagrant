/**
--
-- RESOURCE_PROVIDERS
--
-- Stores a cross reference between resource provider IDs, which are used as
-- the primary keys for the resource provider entity beans. Also stores
-- reconciliation data for each resource provider.
--
-- PROVIDER_ID - Unique ID used as the primary key for the resource provider
--         entity beans.
-- RESOURCE_DN - DN for the resource the resource provider is responsible for.
-- RECON_STATUS - Whether a reconciliation is currently running (0 = not reconciling,
--        1 = currently reconciling).
-- LAST_RECON_TIME - The amount of time the last reconcilation took.
-- MAX_RECON_DURATION - maximum duration allowed before timeout of the current
--            reconcilation (minutes).
-- LOCK_SERVICE - Lock the service during reconciliation ( 1 - lock, 0 = do not lock)
-- REQUEST_ID - Tracks the process locking the service
-- CURRENT_REQUEST_COUNT - current number of executing requests
-- MAX_REQUEST_COUNT - maximum number of concurrent executing requests (or -1 = unlimited)
-- LAST_RESPONSE_TIME - timestamp of last response (to detect failed resources)
-- RESOURCE_STATUS - resource status (0 = ok, 1 = failed, 2 = failed service being tested)
--
*/
CREATE TABLE RESOURCE_PROVIDERS
  (
  PROVIDER_ID          VARCHAR(20) NOT NULL,
  RESOURCE_DN          VARCHAR(2000),
  RECON_STATUS          NUMBER,
  LAST_RECON_TIME        DATE,
  MAX_RECON_DURATION      NUMBER(20),
  LOCK_SERVICE      NUMBER,
  REQUEST_ID          VARCHAR(20),
  CURRENT_REQUEST_COUNT   NUMBER,
  MAX_REQUEST_COUNT   NUMBER,
  LAST_RESPONSE_TIME    DATE,
  RESOURCE_STATUS   NUMBER,
  RESTART_TIME          DATE,
  SERVER VARCHAR2(255),
  RESOURCE_TEST_STATUS	NUMBER,
  LAST_TEST_STATUS_TIME	DATE,
  FIRST_RESOURCE_FAIL_TIME    DATE,
  LAST_ERROR VARCHAR(2000),
CONSTRAINT RESOURCE_PROVIDERS_PK PRIMARY KEY(PROVIDER_ID) USING
  INDEX
  TABLESPACE ENROLE_INDEXES
  )
  TABLESPACE ENROLE_DATA;

CREATE INDEX RESPROVSTATUSX ON RESOURCE_PROVIDERS (RESOURCE_STATUS ASC, RESTART_TIME ASC, PROVIDER_ID ASC) TABLESPACE ENROLE_INDEXES;

CREATE INDEX RESPROVDNX on RESOURCE_PROVIDERS (RESOURCE_DN ASC) TABLESPACE ENROLE_INDEXES;

/**
--
-- REMOTE_SERVICES_REQUESTS
--
-- Table of requests that where made in an asynchronous fasion, or where
-- made while a reconciliation was ongoing.
--
-- PROVIDER_ID - Unique ID used as the primary key for the resource provider
--         entity beans.
-- REQUEST_ID - the ID of the request that was made.
-- TYPE - The type of request (GENERIC_REQUEST = 0, ASYNCHRONOUS_REQUEST = 1,
--               INTRA_RECON_REQUEST = 2, SERVICE_DEFERRED_REQUEST = 3)
-- OPERATION - (NOOP = 0, ADD = 1, MODIFY = 2, DELETE = 3, SUSPEND = 4, RESTORE = 5, CHANGE_PASSWORD = 6)
-- REQUEST_TIME - The time the request was made.
-- EXPIRATION_TIME - The time the request expires. If null the request never expires. (Currently not used.)
-- TARGET - The owner of the account for add or the dn for other operations
-- SERVICE_DN - The distinguished name of the service instance in the directory
-- DATA - The data for the request (attribute values for add and modify).  Serialized Java Collection.
-- CONNECTION_POINT - The callback to complete the workflow process.  Serialized Java object.
--
*/
CREATE TABLE REMOTE_SERVICES_REQUESTS
  (
  PROVIDER_ID      VARCHAR(20),
  REQUEST_ID      VARCHAR(20) NOT NULL,
  TYPE          NUMBER,
  OPERATION      NUMBER,
  REQUEST_TIME      DATE,
  EXPIRATION_TIME    DATE,
  TARGET        VARCHAR(2000),
  SERVICE_DN      VARCHAR(2000) NOT NULL,
  DATA      CLOB,
  CONNECTION_POINT BLOB,
CONSTRAINT REMOTE_SVR_REQ_FK FOREIGN KEY (PROVIDER_ID)
  REFERENCES RESOURCE_PROVIDERS (PROVIDER_ID),
CONSTRAINT REMOTE_SVR_REQ_PK PRIMARY KEY(REQUEST_ID)
  USING INDEX
  TABLESPACE ENROLE_INDEXES
   )
  TABLESPACE ENROLE_DATA;

CREATE INDEX RS_REQ_PID_X ON REMOTE_SERVICES_REQUESTS(PROVIDER_ID)
  TABLESPACE ENROLE_INDEXES;

CREATE INDEX RS_REQ_RTIME_X ON REMOTE_SERVICES_REQUESTS(REQUEST_TIME)
  TABLESPACE ENROLE_INDEXES;

CREATE INDEX RS_REQ_TYPE_ID_X ON REMOTE_SERVICES_REQUESTS (TYPE ASC, PROVIDER_ID DESC) TABLESPACE ENROLE_INDEXES;  
  
/**
--
-- REMOTE_RESOURCES_RECONS
--
-- Table of reconciliation units associates with a given resource provider.
--
-- PROVIDER_ID - Unique ID used as the primary key for the resource provider
--         entity beans.
-- RECON_ID - Unique ID for each reconcialation unit.
-- DAY_OF_MONTH - Number indicating which day of the month the recon should be
--        run on.
-- MONTH_NUM - Number indicating which month the recon should be run on.
-- DAY_OF_WEEK - Number indicating which day of the week the recon should be run on.
-- DAY_OF_WEEK - Number indicating which hour of the day the recon should be run on.
-- MINUTE_NUM - Number indicating which minute of the hour the recon should be run on.
-- MAX_DURATION - The maximum allowed duration allowed before the recon will time out (minutes)
-- LOCK_SERVICE - Lock the service during reconciliation ( 1 - lock, 0 = do not lock)
--
*/
CREATE TABLE REMOTE_RESOURCES_RECONS
  (
  PROVIDER_ID      VARCHAR(20) NOT NULL,
  RECON_ID        NUMBER(20)  NOT NULL,
  DAY_OF_MONTH      NUMBER,
  MONTH_NUM      NUMBER,
  DAY_OF_WEEK      NUMBER,
  HOUR_NUM        NUMBER,
  MINUTE_NUM      NUMBER,
  MAX_DURATION    NUMBER(20),
  LOCK_SERVICE      NUMBER DEFAULT 1,
  RECON_NAME VARCHAR (300),
  DESCRIPTION VARCHAR (300),
  CONSTRAINT REMOTE_RES_RECONS_FK FOREIGN KEY(PROVIDER_ID)
  REFERENCES RESOURCE_PROVIDERS(PROVIDER_ID),
  CONSTRAINT REMOTE_RES_RECONS_PK PRIMARY KEY(PROVIDER_ID, RECON_ID)
  USING INDEX
  TABLESPACE ENROLE_INDEXES
   )
  TABLESPACE ENROLE_DATA;

/**
--
-- REMOTE_RESOURCES_RECON_QUERIES
--
-- Table of reconciliation queries associates with a given reconciliation unit.
--
-- PROVIDER_ID - Unique ID used as the primary key for the resource provider
--         entity beans.
-- RECON_ID - Unique ID for each reconcialation unit.
-- QUERY_ID - Unique ID for each reconcialation query.
-- RECON_FILTER - Filter associated with this reconciliation query.
-- RECON_BASE - Search base associated with this reconciliation query.
-- MAX_DURATION - not used
-- MAX_ENTRIES - not used
-- ATTRIBUTES - attributes to return in a reconciliation
-- SUPPORT_DATA_ONLY - indicate if recon is for support data only
--
*/
CREATE TABLE REMOTE_RESOURCES_RECON_QUERIES
  (
  PROVIDER_ID      VARCHAR(20) NOT NULL,
  RECON_ID        NUMBER(20)  NOT NULL,
  QUERY_ID        NUMBER(20)  NOT NULL,
  RECON_FILTER      VARCHAR2(4000),
  RECON_BASE      VARCHAR2(4000),
  MAX_DURATION      NUMBER(20),
  MAX_ENTRIES      NUMBER(20),
  ATTRIBUTES      CLOB,
  SUPPORT_DATA_ONLY NUMBER,
CONSTRAINT REMOTE_RECON_QUERIES_FK FOREIGN KEY(PROVIDER_ID,
                         RECON_ID)
  REFERENCES REMOTE_RESOURCES_RECONS(PROVIDER_ID,
                        RECON_ID),
CONSTRAINT REMOTE_RECON_QUERIES_PK PRIMARY KEY(PROVIDER_ID,
                         RECON_ID,
                         QUERY_ID)
  USING
  INDEX
  TABLESPACE ENROLE_INDEXES
   )
  TABLESPACE ENROLE_DATA;

/**
--
-- LCR_INPROGRESS_TABLE
--
-- Table containing information for Lifecycle Rule (LC Rule) initiated processes in progress.
--
-- TENANT      non null tenant for this LC Rule (short name)
-- RULE_ID      non null Lifecycle Rule ID (long)
-- RULE_OP      LC Rule Operation (string)
-- CHILD_ID   process ID for the child process of this LC Rule
-- START_TIME time the LC Rule child process started
-- ENTITY_ID     non null entity this child process is operating on
--
*/
CREATE TABLE LCR_INPROGRESS_TABLE (
  TENANT VARCHAR(256) NOT NULL,
  RULE_ID NUMBER(20) NOT NULL,
  RULE_OP VARCHAR(256),
  CHILD_ID NUMBER(20),
  START_TIME NUMBER(20),
  ENTITY_ID VARCHAR(256) NOT NULL,
  CONSTRAINT UNIQUE_RULEENTITY PRIMARY KEY(RULE_ID,ENTITY_ID)
  USING
  INDEX
  TABLESPACE ENROLE_INDEXES
   )
  TABLESPACE ENROLE_DATA;

CREATE INDEX LCR_CHILD_ID_X ON LCR_INPROGRESS_TABLE (CHILD_ID ASC) TABLESPACE ENROLE_INDEXES;

/**
--
-- PO_TOPIC_TABLE
--
-- Table containing topic information for Post Office feature
--
-- TENANT        non null tenant (short name)
-- TOPIC          non null topic name (string)
-- SERVER        identifies which cluster member is working on data
-- CHECKPOINT_TIME    identifies the time the cluster member started work
-- TOPIC_ID        guuid that maps to TENANT above (non null, unique)
--
*/
CREATE TABLE PO_TOPIC_TABLE
  (
  TENANT            VARCHAR(256) NOT NULL,
  TOPIC            VARCHAR(256) NOT NULL,
  SERVER            VARCHAR(255),
  CHECKPOINT_TIME        NUMBER(20),
  TOPIC_ID            NUMBER(20) NOT NULL,
  CONSTRAINT UNIQUE_TENANTTOPIC PRIMARY KEY(TENANT,
                      TOPIC),
  CONSTRAINT UNIQUE_TOPICID UNIQUE(TOPIC_ID)
  USING
  INDEX
  TABLESPACE ENROLE_INDEXES
   )
  TABLESPACE ENROLE_DATA;

/**
--
-- PO_NOTIFICATION_TABLE
--
-- Table containing individual notification information for Post Office feature
--
-- NOTIFICATION_ID  guid that identifies this notification (non null, unique)
-- TOPIC_ID       guid that maps to TENANT above (non null, unique)
-- SUBJECT        subject of the notification
-- TEXTBODY       text body of the notification
-- RECEIVE_TIME   non null time in millis this notification was received
-- RECIPIENT_EADDR  non null email address for this notification
-- RECIPIENT_LOCALE locale for this recipient (ll_CC format)
*/
CREATE TABLE PO_NOTIFICATION_TABLE
  (
  NOTIFICATION_ID   NUMBER(20) NOT NULL,
  TOPIC_ID        NUMBER(20) NOT NULL,
  SUBJECT       VARCHAR(2000),
  TEXTBODY        LONG,
  RECEIVE_TIME      NUMBER(20) NOT NULL,
  RECIPIENT_EADDR   VARCHAR(320) NOT NULL,
  RECIPIENT_LOCALE    VARCHAR(256),
  CONSTRAINT TENANTTOPIC_PARENT FOREIGN KEY(TOPIC_ID) REFERENCES PO_TOPIC_TABLE(TOPIC_ID),
  CONSTRAINT NOTIFICATION_ID_PK PRIMARY KEY(NOTIFICATION_ID)
  USING
  INDEX
  TABLESPACE ENROLE_INDEXES
   )
  TABLESPACE ENROLE_DATA;

CREATE INDEX PO_NOTIFYINDEX ON PO_NOTIFICATION_TABLE(TOPIC_ID)
  TABLESPACE ENROLE_INDEXES;

/**
--
-- PO_NOTIFICATION_HTMLBODY_TABLE
--
-- Table containing XHTML Body for an individual notification (matches to PO_NOTIFICATION_TABLE)
--
-- NOTIFICATION_ID  guid that identifies this notification (non null, unique)
-- HTMLBODY       html body of the notification
*/

CREATE TABLE PO_NOTIFICATION_HTMLBODY_TABLE (
  NOTIFICATION_ID        NUMBER(20) NOT NULL,
  HTMLBODY            LONG,
  CONSTRAINT NOTIFICATIONIDLINKAGE FOREIGN KEY(NOTIFICATION_ID) REFERENCES PO_NOTIFICATION_TABLE(NOTIFICATION_ID) ON DELETE CASCADE,
  CONSTRAINT NOTIFICATION_ID_HTML_PK PRIMARY KEY(NOTIFICATION_ID)
  USING
  INDEX
  TABLESPACE ENROLE_INDEXES
)
TABLESPACE ENROLE_DATA;

/**
--
-- SCHEDULED_MESSAGE
--
-- Table of scheduled one time or re-occuring events. Usually it contains scheduled user requests submitted
-- by the workflow engine or re-ocurring reconcialation events.
--
-- SCHEDULED_TIME - The long interger that represents the time of the scheduled event, which is
--          the number of milliseconds since January 1, 1970, 00:00:00 GMT
--
-- SCHEDULED_MESSAGE_ID - Unique ID for each scheduled event
--
-- MESSAGE - A serialized object that represents the detail information of the scheduled event
--
-- SERVER - The server that picks up the scheduled event most recently
--
-- CHECKPOINT_TIME - The long interger that represents the last pick up time of the scheduled event, which
--           is the number of milliseconds since January 1, 1970, 00:00:00 GMT
--
-- REFERENCE_ID - The is only used for scheduled workflow events, it is the workflow process ID that
--        sheduled event is coming from.
--
-- REFERENCE2_ID - Generic reference field.
--
*/
CREATE TABLE SCHEDULED_MESSAGE (
  SCHEDULED_TIME            NUMBER(20),
  SCHEDULED_MESSAGE_ID          NUMBER(20) NOT NULL,
  MESSAGE                LONG,
  SMALL_MESSAGE VARCHAR2(4000),
  SERVER                VARCHAR2(255),
  CHECKPOINT_TIME            NUMBER(20),
  REFERENCE_ID              NUMBER(20),
  REFERENCE2_ID            VARCHAR2(50),
CONSTRAINT SCHEDULED_MESSAGE_PK PRIMARY KEY(
                     SCHEDULED_MESSAGE_ID)
  USING
  INDEX
  TABLESPACE ENROLE_INDEXES
   )
  TABLESPACE ENROLE_DATA;

CREATE INDEX SCHEDULED_MESSAGE_TIME_X ON SCHEDULED_MESSAGE (SCHEDULED_TIME, SERVER)
  TABLESPACE ENROLE_INDEXES;

CREATE INDEX SCHEDULED_MESSAGE_CHECKPOINT_X ON SCHEDULED_MESSAGE (CHECKPOINT_TIME)
  TABLESPACE ENROLE_INDEXES;

CREATE INDEX SCHEDULED_MESSAGE_REFERENCE_X ON SCHEDULED_MESSAGE (REFERENCE_ID)
  TABLESPACE ENROLE_INDEXES;

CREATE INDEX SCHEDULED_MSG_X ON SCHEDULED_MESSAGE (REFERENCE2_ID)
  TABLESPACE ENROLE_INDEXES;

CREATE INDEX SCH_MSG_SVR ON SCHEDULED_MESSAGE (SERVER ASC)
  TABLESPACE ENROLE_INDEXES;

/**
--
-- NEXTVALUE
-- Table to keep the current maximum value of primary key integer. It only contains
-- one record, for each identfier
--
-- ID -- The next primary key id to be used
--
*/
CREATE TABLE NEXTVALUE
  (
  ID          VARCHAR2(50) NOT NULL,
  NEXTID        NUMBER(10) NOT NULL,
CONSTRAINT NEXTVALUE_PK PRIMARY KEY(ID) USING
   INDEX
   TABLESPACE ENROLE_INDEXES
  )
  TABLESPACE ENROLE_DATA;

COMMIT;

/**
--
-- PROCESS
--
-- This table stores all pending, running and historical requests submitted
-- to the enrole workflow system. Each request is represented as a process.
--
-- ID - The process id
-- PARENT_ID - The parent process id if there is any
-- NAME - The process name
-- TYPE - The process type
-- DEFINITION_ID - The process definition ID
-- REQUESTER_TYPE - The requester type
-- REQUESTER  - The requester identity
-- REQUESTER_NAME - The requester name
-- DESCRIPTION - The process description
-- PRIORITY - The process priority
-- SCHEDULED - The scheduled starting time of the process
-- STARTED - The starting time of the process
-- COMPLETED - The completed time of the process
-- LASTMODIFIED - The last modified time of the process
-- SUBMITTED - The time the process is submitted
-- STATE - The process state
-- COMMENTS - The comments for the process
-- RESULT_SUMMARY - The result summary code of the process
-- RESULT_DETAIL - The result detail information of the process
-- TENANT - The DN of the tenant the requester belongs to
--
*/
CREATE TABLE PROCESS
    (
          ROOT_PROCESS_ID    NUMBER(20) NOT NULL,
        ID            NUMBER(20) NOT NULL,
        PARENT_ID        NUMBER(20),
        PARENT_ACTIVITY_ID    NUMBER(20),
        NAME          VARCHAR2(100),
        TYPE          VARCHAR2(2) NOT NULL,
        DEFINITION_ID      VARCHAR2(2000) NOT NULL,
        REQUESTER_TYPE      VARCHAR2(2),
        REQUESTER        VARCHAR2(2000),
        REQUESTER_NAME      VARCHAR2(100),
        DESCRIPTION      VARCHAR2(300),
        PRIORITY        NUMBER(5),
        SCHEDULED        VARCHAR2(50),
        STARTED        VARCHAR2(50),
        COMPLETED        VARCHAR2(50),
        LASTMODIFIED      VARCHAR2(50),
        SUBMITTED        VARCHAR2(50),
        STATE          VARCHAR2(1),
        NOTIFY          NUMBER(10),
        REQUESTEE        VARCHAR2(2000),
        REQUESTEE_NAME      VARCHAR2(100),
        SUBJECT        VARCHAR2(2000),
        SUBJECT_PROFILE    VARCHAR2(100),
        SUBJECT_SERVICE    VARCHAR2(100),
          SUBJECT_ACCESS_ID    VARCHAR2(2000),
          SUBJECT_ACCESS_NAME  VARCHAR2(100),
        COMMENTS        VARCHAR2(2000),
        RESULT_SUMMARY      VARCHAR2(2),
        RESULT_DETAIL      LONG,
          SHORT_DETAIL VARCHAR2(4000),
        TENANT          VARCHAR2(2000),
CONSTRAINT PROCESS_PK PRIMARY KEY(ID) USING
  INDEX
  TABLESPACE ENROLE_INDEXES
  )
  TABLESPACE ENROLE_DATA;

CREATE INDEX PROC_STATE_X ON PROCESS(STATE)
  TABLESPACE ENROLE_INDEXES;

CREATE INDEX PROCESS_VPC1_X ON PROCESS(PARENT_ID, SUBMITTED, ID, STATE)
  TABLESPACE ENROLE_INDEXES;

CREATE INDEX PROCESS_PARENT_X ON PROCESS(PARENT_ID) TABLESPACE ENROLE_INDEXES;

CREATE INDEX PROCESS_SUB_X ON PROCESS (SUBMITTED DESC, PARENT_ID ASC) TABLESPACE ENROLE_INDEXES;

CREATE INDEX PROCESS_ID_ST ON PROCESS (ID ASC, STATE ASC) TABLESPACE ENROLE_INDEXES;

CREATE INDEX PROCESS_PACT_ID_X ON PROCESS (PARENT_ACTIVITY_ID ASC, ID DESC) TABLESPACE ENROLE_INDEXES;

CREATE INDEX PROCESS_USERREQ_X ON PROCESS (REQUESTER ASC, PARENT_ID ASC, TENANT ASC) TABLESPACE ENROLE_INDEXES;

/**
--
-- ACTIVITY
--
-- This table contains records to keep track of each process's execution status.
--
-- ID - The activity id
-- PROCESS_ID - The process id that the activity belongs to
-- DEFINITION_ID - The activity definition ID
-- ACTIVITY_INDEX - The index of the activity if it is inside a loop
-- SUBPROCESS_ID - The ID of the subprocess associated with the activity
-- NAME - The activity name
-- DESCRIPTION - The activity description
-- TYPE - The activity type
-- SUBTYPE - The activity subtype
-- PRIORITY - The activity priority (Currently not used)
-- STARTED - The time the activity started
-- COMPLETED - The time the activity completed
-- LASTMODIFIED - The time the activity was last modified
-- STATE - The activity state
-- RESULT_SUMMARY - The result summary code for the activity
-- RESULT_DETAIL - The result detail for the activity
--
*/
CREATE TABLE ACTIVITY (
        ID            NUMBER(20) NOT NULL,
        PROCESS_ID        NUMBER(20) NOT NULL,
        DEFINITION_ID      VARCHAR2(100) NOT NULL,
        ACTIVITY_INDEX      NUMBER(10),
        LOOP_COUNT        NUMBER(10),
        LOOP_RUNCOUNT      NUMBER(10),
        RETRY_COUNT      NUMBER(10),
        LOCK_COUNT    NUMBER(10),
        SUBPROCESS_ID      NUMBER(20),
        NAME          VARCHAR2(100),
        DESCRIPTION      VARCHAR2(300),
        TYPE          VARCHAR2(1),
        SUBTYPE        VARCHAR2(2),
        PRIORITY        NUMBER(5),
        STARTED        VARCHAR2(50),
        COMPLETED        VARCHAR2(50),
        LASTMODIFIED      VARCHAR2(50),
        STATE          VARCHAR2(1),
        RESULT_SUMMARY      VARCHAR2(5),
        RESULT_DETAIL      LONG,
          SHORT_DETAIL VARCHAR2(4000),
CONSTRAINT ACTIVITY_FK FOREIGN KEY(PROCESS_ID)
  REFERENCES PROCESS(ID),
CONSTRAINT ACTIVITY_PK PRIMARY KEY(ID) USING
  INDEX
  TABLESPACE ENROLE_INDEXES
  )
  TABLESPACE ENROLE_DATA;

CREATE UNIQUE INDEX ACTIVITY_NATURAL_KEY ON ACTIVITY (PROCESS_ID, DEFINITION_ID, ACTIVITY_INDEX) TABLESPACE ENROLE_INDEXES;

CREATE INDEX ACTIVITY_PID_X ON ACTIVITY (PROCESS_ID DESC) TABLESPACE ENROLE_INDEXES;

/**
--
-- PROCESSDATA
--
-- This table keeps the runtime process data of a process
-- After process completion, this table will be removed
--
-- PROCESS_ID - The process ID associated with the data
-- DEF_ID - The definition ID for the corresponding relevant data in process definition
-- ACTIVITY_ID - The activity ID associated with the data if there is any
-- NAME - The data name
-- DESCRIPTION - The data description
-- TYPE - Data type
-- VALUE - Data value
--
*/
CREATE TABLE PROCESSDATA
(
  PROCESS_ID        NUMBER(20) NOT NULL,
  DEF_ID          VARCHAR2(100),
  NAME          VARCHAR2(100),
  CONTEXT        VARCHAR2(100),
  DESCRIPTION      VARCHAR2(300),
  TYPE          VARCHAR2(500),
  COLLECTION_TYPE    VARCHAR2(500),
  VALUE          LONG,
  SMALL_VALUE      VARCHAR2(4000),
  VALUE_LAST_MODIFIED   NUMBER(20),
CONSTRAINT PROCESSDATA_FK FOREIGN KEY(PROCESS_ID)
  REFERENCES PROCESS(ID),
CONSTRAINT PROCESSDATA_PK PRIMARY KEY(PROCESS_ID, DEF_ID) USING
  INDEX
  TABLESPACE ENROLE_INDEXES
)
TABLESPACE ENROLE_DATA;

CREATE INDEX PROCESSDATA_ID_DEF ON PROCESSDATA (PROCESS_ID ASC, DEF_ID ASC, VALUE_LAST_MODIFIED ASC) TABLESPACE ENROLE_INDEXES;

/**
--
-- PROCESSLOG
--
-- This table keeps records of audit events associated with a process
--
-- ID - The processlog ID
-- PROCESS_ID - The ID of the process associated
-- ACTIVITY_ID - The ID of the activity associated
-- CREATED - Time the log record created
-- EVENTTYPE - Log event type
-- OLD_PARTICIPANT_TYPE - Old participant type for assignment change event
-- OLD_PARTICIPANT_ID - Old participant ID for assignment change event
-- NEW_PARTICIPANT_TYPE - New participant type for assignment change event
-- NEW_PARTICIPANT_ID - New participant ID for assignment change event
-- REQUESTOR_TYPE - The requester type for any user related event
-- REQUESTOR - The requester ID for any user related event
-- REQUESTOR_DN - The DN of the requester for any user related event
-- OLD_STATE - The old state for state change event
-- NEW_STATE - The new state for state change event
-- DATA_ID - The data id for data change event
-- NEW_DATA - The data value for data change event
--
*/
CREATE TABLE PROCESSLOG
   (
        ID            NUMBER(20) NOT NULL,
        PROCESS_ID        NUMBER(20),
        ACTIVITY_ID      NUMBER(20),
        CREATED        VARCHAR2(50),
        EVENTTYPE        VARCHAR2(2) NOT NULL,
        OLD_PARTICIPANT_TYPE  VARCHAR2(2),
        OLD_PARTICIPANT_ID    VARCHAR2(2000),
        NEW_PARTICIPANT_TYPE  VARCHAR2(2),
        NEW_PARTICIPANT_ID    VARCHAR2(2000),
        REQUESTOR_TYPE      VARCHAR2(2),
        REQUESTOR        VARCHAR2(2000),
        REQUESTOR_DN     VARCHAR2(1000),
        OLD_STATE        VARCHAR2(1),
        NEW_STATE        VARCHAR2(1),
        DATA_ID        VARCHAR2(100),
        NEW_DATA        LONG,
          SMALL_NEW_DATA VARCHAR2(4000),
CONSTRAINT PROCESSLOG_FK FOREIGN KEY(PROCESS_ID)
  REFERENCES PROCESS(ID),
CONSTRAINT PROCESSLOG_PK PRIMARY KEY(ID) USING
  INDEX
  TABLESPACE ENROLE_INDEXES
  )
  TABLESPACE ENROLE_DATA;

CREATE INDEX PROCESSLOG_PID_X ON PROCESSLOG (PROCESS_ID ASC) TABLESPACE ENROLE_INDEXES;

CREATE INDEX PROCESSLOG_AID_X ON PROCESSLOG (ACTIVITY_ID ASC) TABLESPACE ENROLE_INDEXES;

/**
--
-- WORKITEM
--
-- This table keeps records of workitems associated with manual workflow activities
-- for running process. The records associated with a process will be removed after
-- process completion
--
-- ID  -  The workitem ID
-- PROCESS_ID - The process ID associated with the workitem
-- ACTIVITY_ID - The activity ID assciated with the workitem
-- PARTICIPANT_TYPE - The workitem participant type
-- PARTICIPANT  -  The workitem participant identity
-- CREATED - The time the workitem created
--
*/
CREATE TABLE WORKITEM
  (
    ID            NUMBER(20) NOT NULL,
    PROCESS_ID        NUMBER(20) NOT NULL,
    ACTIVITY_ID      NUMBER(20) NOT NULL,
    DUE_DATE        NUMBER(20),
    LOCK_OWNER        VARCHAR2(512),
    DESCRIPTION      VARCHAR2(4000),
    PROCESS_DEFINITION_ID   VARCHAR2(512) NOT NULL,
    ACTIVITY_DEFINITION_ID  VARCHAR2(100) NOT NULL,
    CREATED        VARCHAR2(50),
    INPUT_PARAMETERS    LONG,
    ACTIVITY_TYPE VARCHAR2(1),
    ACTIVITY_SUBTYPE VARCHAR2(2),
    ACTIVITY_NAME VARCHAR2(100),
    REQUESTEE_NAME VARCHAR2(100),
    REQUESTER_NAME VARCHAR2(100),
    SUBJECT VARCHAR2(2000),

CONSTRAINT WORKITEM2_FK FOREIGN KEY(ACTIVITY_ID)
  REFERENCES ACTIVITY(ID),
CONSTRAINT WORKITEM_FK FOREIGN KEY(PROCESS_ID)
  REFERENCES PROCESS(ID),
CONSTRAINT WORKITEM_PK PRIMARY KEY(ID) USING
  INDEX
  TABLESPACE ENROLE_INDEXES
   )
  TABLESPACE ENROLE_DATA;

CREATE INDEX WORKITEM_PID_X ON WORKITEM (PROCESS_ID)
TABLESPACE ENROLE_INDEXES;

CREATE INDEX WORKITEM_AID_X ON WORKITEM (ACTIVITY_ID)
TABLESPACE ENROLE_INDEXES;

CREATE INDEX WORKITEM_ADEF_X ON WORKITEM (ACTIVITY_DEFINITION_ID)
TABLESPACE ENROLE_INDEXES;

CREATE INDEX WORKITEM_PDEF_X ON WORKITEM (PROCESS_DEFINITION_ID)
TABLESPACE ENROLE_INDEXES;

/**
--
-- WI_PARTICIPANT
--
-- This table keeps the participants associated with manual workflow activities.
-- ID  -  The participant id
-- WORKITEM_ID - The work item ID associated with the participant
-- PARTICIPANT_TYPE - The workitem participant type
-- PARTICIPANT  -  The workitem participant identity
--
*/
CREATE TABLE WI_PARTICIPANT
  (
    ID            NUMBER(20) NOT NULL,
    WORKITEM_ID       NUMBER(20) NOT NULL,
    PARTICIPANT_TYPE    VARCHAR2(2) NOT NULL,
    PARTICIPANT      VARCHAR2(512) NOT NULL,
CONSTRAINT WORKITEM_ID_FK FOREIGN KEY(WORKITEM_ID)
  REFERENCES WORKITEM(ID) ON DELETE CASCADE,
CONSTRAINT PARTICIPANT_PK PRIMARY KEY(ID) USING
  INDEX
  TABLESPACE ENROLE_INDEXES
   )
  TABLESPACE ENROLE_DATA;

CREATE INDEX WIPART_WIID_X ON WI_PARTICIPANT (WORKITEM_ID)
TABLESPACE ENROLE_INDEXES;

CREATE INDEX WIPART_DN_X ON WI_PARTICIPANT (PARTICIPANT)
TABLESPACE ENROLE_INDEXES;

CREATE TABLE SYNCH_POINT (
  PROCESS_ID NUMBER(20) NOT NULL,
  DEFINITION_ID VARCHAR2(100) NOT NULL,
  ACTIVITY_INDEX NUMBER(10) NOT NULL,
  WAIT_LOCK NUMBER(10) NOT NULL,
  JOIN_ENABLED NUMBER NOT NULL,
  CONSTRAINT SYNCH_POINT_PK PRIMARY KEY(PROCESS_ID, DEFINITION_ID, ACTIVITY_INDEX) USING
  INDEX
  TABLESPACE ENROLE_INDEXES
)
TABLESPACE ENROLE_DATA;

CREATE INDEX SYNCH_POINT_PID_X ON SYNCH_POINT (PROCESS_ID DESC)
TABLESPACE ENROLE_INDEXES;

CREATE TABLE ACTIVITY_LOCK (
  PROCESS_ID NUMBER(20) NOT NULL,
  ACTIVITY_ID NUMBER(20) NOT NULL,
  SERVER VARCHAR2(255) NOT NULL,
  THREAD_ID NUMBER(20) NOT NULL,
  LOCK_COUNT NUMBER(10),
  CONSTRAINT ACTIVITY_LOCK_PFK FOREIGN KEY(PROCESS_ID) REFERENCES PROCESS(ID),
  CONSTRAINT ACTIVITY_LOCK_AFK FOREIGN KEY(ACTIVITY_ID) REFERENCES ACTIVITY(ID),
  CONSTRAINT ACTIVITY_LOCK_PK PRIMARY KEY(PROCESS_ID, ACTIVITY_ID, SERVER, THREAD_ID) USING INDEX TABLESPACE ENROLE_INDEXES
) TABLESPACE ENROLE_DATA;

CREATE INDEX ACTIVITY_LOCK_PIDX ON ACTIVITY_LOCK (PROCESS_ID ASC) TABLESPACE ENROLE_INDEXES;

CREATE TABLE PASSWORD_TRANSACTION
  (
    TRANSACTION_ID      NUMBER(20) NOT NULL,
    ACCOUNT_DN            VARCHAR2(2000),
    CREATION_DATE      VARCHAR2(50),
    PROCESS_ID            NUMBER(20) NOT NULL,
    ACTIVITY_ID          NUMBER(20) NOT NULL,
    PASSWORD            VARCHAR2(500),
CONSTRAINT PASSWORD_TRANSACTION_PK
PRIMARY KEY(TRANSACTION_ID) USING
        INDEX
        TABLESPACE ENROLE_INDEXES
  )
TABLESPACE ENROLE_DATA;

/**
--
-- PENDING
--
-- This table keeps the pending provisioning processes
--
-- PROCESS_ID - The process ID associated with the data
-- PERSON_DN  - The definition ID for the corresponding relevant data in process definition
-- SERVICE_DN - The activity ID associated with the data if there is any
--
*/
CREATE TABLE PENDING
(
  PROCESS_ID        NUMBER(20) NOT NULL,
  PERSON_DN        VARCHAR2(2000),
  SERVICE_DN        VARCHAR2(2000),
CONSTRAINT PENDING_FK FOREIGN KEY(PROCESS_ID)
  REFERENCES PROCESS(ID),
CONSTRAINT PENDING_PK PRIMARY KEY(PROCESS_ID) USING
  INDEX
  TABLESPACE ENROLE_INDEXES
)
TABLESPACE ENROLE_DATA;

/**
--
-- LISTDATA
--
-- This table is used to persist large data list for performance optimazation
--
-- DATA_ID - The unique identifier of the data
-- INDEX   - The index of the list element
-- VALUE   - The serialized list element
--
*/
CREATE TABLE LISTDATA
(
  DATA_ID  NUMBER(20) NOT NULL,
  INDEX_ID NUMBER(10) NOT NULL,
  VALUE LONG,
CONSTRAINT LISTDATA_PK PRIMARY KEY(DATA_ID, INDEX_ID) USING
  INDEX
  TABLESPACE ENROLE_INDEXES
)
TABLESPACE ENROLE_DATA;

CREATE INDEX PENDING_FOR_PERSON ON PENDING (PERSON_DN) TABLESPACE ENROLE_INDEXES;

CREATE TABLE REPORT (
  ID INT NOT NULL,
  TITLE VARCHAR(255) NOT NULL,
  TYPE VARCHAR(255) NOT NULL,
  AUTHOR VARCHAR(255),
  REPORT_SIZE INT,
  REPORT_DATA LONG RAW,
  STYLESHEET_NAME VARCHAR(255),
  EDITABLE CHAR(1),
  REPORTCATEGORY VARCHAR(255) NOT NULL,
  REPORTSUBTYPE VARCHAR(255) NOT NULL,
  CONSTRAINT REPORT_P PRIMARY KEY (ID)
  USING INDEX TABLESPACE ENROLE_INDEXES
)
TABLESPACE ENROLE_DATA;

CREATE TABLE ENTITY_COLUMN (
  ENTITY_NAME VARCHAR(255) NOT NULL,
  COLUMN_NAME VARCHAR(255) NOT NULL,
  ATTRIBUTE_NAME VARCHAR(255) NOT NULL,
  MULTI_VALUED CHAR(1),
  IMPLICITLY_MAPPED CHAR(1),
  AVAILABLE_FOR_REPORTING VARCHAR(255),
  TABLE_NAME VARCHAR(255),
  CONSTRAINT ENTITY_COLUMNP PRIMARY KEY (ENTITY_NAME, ATTRIBUTE_NAME)
  USING INDEX TABLESPACE ENROLE_INDEXES
)
TABLESPACE ENROLE_DATA;

CREATE TABLE COLUMN_REPORT (
  ENTITY_NAME VARCHAR(255) NOT NULL,
  COLUMN_NAME VARCHAR(255) NOT NULL,
  REPORT_ID INT NOT NULL,
  CONSTRAINT COLUMN_REPORT_P PRIMARY KEY (REPORT_ID, ENTITY_NAME, COLUMN_NAME)
  USING INDEX TABLESPACE ENROLE_INDEXES
)
TABLESPACE ENROLE_DATA;

CREATE TABLE AUTHORIZATION_OWNERS (
    USERDN VARCHAR(255) NOT NULL,
   CONTAINERDN VARCHAR(255) NOT NULL,
   PRIMARY KEY(USERDN, CONTAINERDN)
  USING INDEX TABLESPACE ENROLE_INDEXES
)
TABLESPACE ENROLE_DATA;

CREATE TABLE ACI (
  DN VARCHAR(255) NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  SCOPE VARCHAR(255),
  TARGET VARCHAR(255) NOT NULL,
  PARENT VARCHAR(255),
  CATEGORY VARCHAR(255),
  OBJECTFILTER VARCHAR(1023),
  PRIMARY KEY(DN, NAME, TARGET)
  USING INDEX TABLESPACE ENROLE_INDEXES
)
TABLESPACE ENROLE_DATA;

CREATE TABLE ACI_ROLEDNS (
  DN VARCHAR(255) NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  TARGET VARCHAR(255) NOT NULL,
  ROLEDN VARCHAR(255) NOT NULL
)
TABLESPACE ENROLE_DATA;

CREATE TABLE ACI_PRINCIPALS (
  DN VARCHAR(255) NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  TARGET VARCHAR(255) NOT NULL,
  PRINCIPALNAME VARCHAR(255) NOT NULL
)
TABLESPACE ENROLE_DATA;

CREATE TABLE ACI_PERMISSION_ATTRIBUTERIGHT (
  DN VARCHAR(255) NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  TARGET VARCHAR(255) NOT NULL,
  ACTION VARCHAR(6) NOT NULL,
  OPERATION VARCHAR(3) NOT NULL,
  ATTRIBUTERIGHT VARCHAR(255) NOT NULL
)
TABLESPACE ENROLE_DATA;

CREATE TABLE ACI_PERMISSION_CLASSRIGHT (
  DN VARCHAR(255) NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  TARGET VARCHAR(255) NOT NULL,
  ACTION VARCHAR(6) NOT NULL,
  CLASSRIGHT VARCHAR(255) NOT NULL
)
TABLESPACE ENROLE_DATA;

CREATE TABLE ENTITLEMENT (
  DN VARCHAR(255) NOT NULL,
  TYPE VARCHAR(255) NOT NULL,
  SERVICETARGETTYPE VARCHAR(255),
  SERVICETARGETNAME VARCHAR(255),
  PROCESSDN VARCHAR(255)
)
TABLESPACE ENROLE_DATA;

CREATE TABLE ENTITLEMENT_PROVISIONINGPARAMS (
  DN VARCHAR(255) NOT NULL,
  ATTRIBUTEVALUE VARCHAR(4000) NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  ENFORCEMENT VARCHAR(255),
  EXPRTYPE VARCHAR(255),
  SERVICETARGETNAME VARCHAR(255),
  SERVICE_DN VARCHAR(255)
)
TABLESPACE ENROLE_DATA;

CREATE TABLE SYNCHRONIZATION_HISTORY (
  SYNC_ID NUMBER(19,0)  NOT NULL ,
  REQUESTOR VARCHAR (255) NOT NULL,
  REQ_TYPE VARCHAR (255),
  REQ_NAME VARCHAR (255),
  STATUS VARCHAR (255),
  TENANT VARCHAR (255),
  STATUS_DETAIL VARCHAR (255),
  SCHEDULED_TIME NUMBER(19,0),
  SUBMITTED_TIME NUMBER(19,0),
  STARTED_TIME NUMBER(19,0) NOT NULL,
  COMPLETED_TIME NUMBER(19,0),
  SERVER_NAME VARCHAR (255),
  PRIMARY KEY (SYNC_ID, STARTED_TIME)
  USING INDEX TABLESPACE ENROLE_INDEXES
)
TABLESPACE ENROLE_DATA;

CREATE TABLE SYNCHRONIZATION_LOCK (
  HOST VARCHAR (255) NOT NULL,
  PRIMARY KEY (HOST) USING INDEX TABLESPACE ENROLE_INDEXES

)
TABLESPACE ENROLE_DATA;

CREATE TABLE RESOURCES_SYNCHRONIZATIONS (
  SYNC_ID NUMBER(19,0)  NOT NULL,
  DAY_OF_MONTH NUMBER(10)  NOT NULL,
  MONTH_NUM NUMBER(10) NOT NULL,
  DAY_OF_WEEK NUMBER(10) NOT NULL,
  HOUR_NUM NUMBER(10) NOT NULL,
  MINUTE_NUM NUMBER(10) NOT NULL,
  MAX_DURATION NUMBER(19,0),
  PRIMARY KEY (SYNC_ID)
  USING INDEX TABLESPACE ENROLE_INDEXES

)
TABLESPACE ENROLE_DATA;

CREATE TABLE CHANGELOG (
  CHANGE_NUMBER NUMBER(10) NOT NULL
)
TABLESPACE ENROLE_DATA;

CREATE TABLE SERVICE_ACCOUNT_MAPPING (
  SERVICEPROFILE VARCHAR (255) NOT NULL,
  ACCOUNTPROFILE VARCHAR (255) NOT NULL,
  PRIMARY KEY (SERVICEPROFILE, ACCOUNTPROFILE)
  USING INDEX TABLESPACE ENROLE_INDEXES
)
TABLESPACE ENROLE_DATA;

CREATE TABLE RECONCILIATION (
  RECONID VARCHAR(255) NOT NULL,
  SERVICEDN VARCHAR(2000) NOT NULL,
  PROCESSEDACCOUNTS INTEGER NOT NULL,
  LOCALACCOUNTS INTEGER NOT NULL,
  TIMUSERACCOUNTS INTEGER NOT NULL,
  POLICYVIOLATIONS INTEGER NOT NULL,
  STARTED DATE NOT NULL,
  COMPLETED DATE NOT NULL,
  ACTIVITY_ID NUMBER(20),
  PRIMARY KEY (RECONID)
  USING INDEX TABLESPACE ENROLE_INDEXES
)
TABLESPACE ENROLE_DATA;

CREATE INDEX RECON_COMPLETED ON RECONCILIATION (COMPLETED ASC) TABLESPACE ENROLE_INDEXES;

CREATE TABLE RECONCILIATION_INFO (
  RECONID VARCHAR(255) NOT NULL,
  ACCOUNTID VARCHAR(255),
  POLICYCOMPLIANCESTATUS VARCHAR(20),
  USERNAME VARCHAR(255),
  OPERATION VARCHAR(20),
  REMARKS VARCHAR(1000),
        HANDLE  NUMBER(20),
  FOREIGN KEY (RECONID) REFERENCES RECONCILIATION (RECONID)
)
TABLESPACE ENROLE_DATA;

CREATE INDEX RECON_INFO_ACCT_ID ON RECONCILIATION_INFO (ACCOUNTID ASC, RECONID DESC) TABLESPACE ENROLE_INDEXES;

CREATE INDEX RECON_INFO_ID_OP ON RECONCILIATION_INFO (RECONID ASC, OPERATION ASC) TABLESPACE ENROLE_INDEXES;

/**
--
-- AUTH_KEY
--
-- This table is used to store the keys for signing and verifying authentication requests.
--
-- Y   - The public key in the DSA algorithm
-- P   - The prime number in the DSA algorithm
-- Q   - The sub-prime number in the DSA algorithm
-- G   - The modulus in the DSA algorithm
-- X   - The private key in the DSA algorithm
--
*/
CREATE TABLE AUTH_KEY (
  Y VARCHAR(2000) NOT NULL,
  P VARCHAR(2000) NOT NULL,
  Q VARCHAR(2000) NOT NULL,
  G VARCHAR(2000) NOT NULL,
  X VARCHAR(2000) NOT NULL
)
TABLESPACE ENROLE_DATA;

/**
--
-- WORKFLOW_CALLBACK
--
-- This table is used to store information for the workflow callback API.
--
-- ID       - The primary key
-- PROCESS_ID   - The process identifier this callback is associated
-- MESSAGE_OBJECT  - The callback message object.
-- EVENT_TRIGGER   - The process state the callback should be called.
--
*/
CREATE TABLE WORKFLOW_CALLBACK (
  ID NUMBER(20) NOT NULL,
  PROCESS_ID NUMBER(20) NOT NULL,
  MESSAGE_OBJECT VARCHAR(2000) NOT NULL,
  EVENT_TRIGGER  CHAR(1),
  CONSTRAINT WF_CALLBACK_FK FOREIGN KEY(PROCESS_ID) REFERENCES PROCESS(ID),
  CONSTRAINT WF_CALLBACK_PK PRIMARY KEY(ID) USING
  INDEX
  TABLESPACE ENROLE_INDEXES
)
TABLESPACE ENROLE_DATA;

CREATE INDEX WF_CALLBACK_PID_X ON WORKFLOW_CALLBACK (PROCESS_ID ASC) TABLESPACE ENROLE_INDEXES;

/**
--
-- POLICY_ANALYSIS
--
-- This table is used to store policy analysis session information
--
--
*/
CREATE TABLE POLICY_ANALYSIS (
  ANALYSIS_ID VARCHAR(32) NOT NULL,
  TENANT_NAME VARCHAR(64),
  STATUS NUMBER(2) NOT NULL,
  REASON NUMBER(2) NOT NULL,
  CONTEXT NUMBER(2) NOT NULL,
  CHANGE_TYPE NUMBER(2) NOT NULL,
  LAST_ACCESSED DATE NOT NULL,
  WORKERS_STARTED NUMBER(10) DEFAULT 0 NOT NULL,
  WORKERS_COMPLETED NUMBER(10) DEFAULT 0 NOT NULL,
  WORKERS_TOTAL NUMBER(10) DEFAULT 0 NOT NULL,
  ACCOUNTS_EVALUATED NUMBER(10) DEFAULT 0 NOT NULL,
  CONSTRAINT PK_POLICY_ANALYSIS PRIMARY KEY(ANALYSIS_ID)
  USING INDEX
  TABLESPACE ENROLE_INDEXES
)
TABLESPACE ENROLE_DATA;

CREATE INDEX POL_ANALY_ACC_X ON POLICY_ANALYSIS (LAST_ACCESSED ASC, ANALYSIS_ID) TABLESPACE ENROLE_INDEXES;

/**
--
-- ACCT_CHANGE, ATTR_CHANGE, POLICY_ANALYSIS_ERROR are used to stage policy change preview data
--
*/
CREATE TABLE ACCT_CHANGE (
  CHANGE_ID VARCHAR(32) NOT NULL,
  ACCT_UID VARCHAR(60) NOT NULL,
  ACCT_IDENTIFIER VARCHAR(255) NOT NULL,
  SERVICE_NAME VARCHAR(200) NOT NULL,
  SERVICE_IDENTIFIER VARCHAR(255) NOT NULL,
  OWNER_NAME VARCHAR(200) NOT NULL,
  OWNER_IDENTIFIER VARCHAR(255) NOT NULL,
  OPERATION_TYPE NUMBER(2) NOT NULL,
  PROVISION_PRIORITY NUMBER(5),
  SEQUENCE_NR NUMBER(5),
  REASON NUMBER(2) NOT NULL,
  REVOKE_CHANGE NUMBER(2) NOT NULL,
  STATUS NUMBER(2),
  POLICY_ANALYSIS_ID VARCHAR(32) NOT NULL,
  CONSTRAINT FK_POLICY_ANALYSIS FOREIGN KEY(POLICY_ANALYSIS_ID) REFERENCES POLICY_ANALYSIS(ANALYSIS_ID)
  ON DELETE CASCADE,
  CONSTRAINT PK_ACCT_CHANGE PRIMARY KEY(POLICY_ANALYSIS_ID, CHANGE_ID)
  USING INDEX
  TABLESPACE ENROLE_INDEXES
)
TABLESPACE ENROLE_DATA;

CREATE INDEX ACCT_CHANGE_PREV_X ON ACCT_CHANGE (POLICY_ANALYSIS_ID ASC, OPERATION_TYPE ASC, REASON ASC) TABLESPACE ENROLE_INDEXES;

CREATE TABLE ATTR_CHANGE (
  CHANGE_ID VARCHAR(32) NOT NULL,
  ATTR_NAME VARCHAR(100) NOT NULL,
  ATTR_VALUE VARCHAR(2000),
  OPERATION_TYPE NUMBER(2) NOT NULL,
  PRIVILEGE_ACTION_TYPE NUMBER(2) NOT NULL,
  ATTR_VALUE_PRESENCE NUMBER(2) NOT NULL,
  POLICY_ANALYSIS_ID VARCHAR(32) NOT NULL,
  ACCT_CHANGE_ID VARCHAR(32) NOT NULL,
  CONSTRAINT FK_ATTR_CHANGE FOREIGN KEY(POLICY_ANALYSIS_ID, ACCT_CHANGE_ID)
  REFERENCES ACCT_CHANGE(POLICY_ANALYSIS_ID, CHANGE_ID)
  ON DELETE CASCADE,
  CONSTRAINT PK_ATTR_CHANGE PRIMARY KEY(POLICY_ANALYSIS_ID, ACCT_CHANGE_ID, CHANGE_ID)
  USING INDEX
  TABLESPACE ENROLE_INDEXES
)
TABLESPACE ENROLE_DATA;

CREATE TABLE POLICY_ANALYSIS_ERROR (
  ERROR_ID  VARCHAR(32) NOT NULL,
  ENTITY_NAME VARCHAR(100),
  ENTITY_IDENTIFIER VARCHAR(255),
  ENTITY_TYPE  NUMBER(2),
  SERVICE_NAME VARCHAR(200),
  SERVICE_IDENTIFIER VARCHAR(255),
  PERSON_NAME  VARCHAR(200),
  PERSON_IDENTIFIER VARCHAR(255),
  POLICY_NAME VARCHAR(100),
  POLICY_IDENTIFIER VARCHAR(255),
  ATTR_NAME VARCHAR(100),
  ERROR_TYPE NUMBER(5) NOT NULL,
  ENTITY_ERROR_TYPE  NUMBER(5),
  ERROR_MESSAGE LONG NOT NULL,
  POLICY_ANALYSIS_ID VARCHAR(32) NOT NULL,
  CONSTRAINT FK_ANALYSIS_ERROR FOREIGN KEY(POLICY_ANALYSIS_ID) REFERENCES POLICY_ANALYSIS(ANALYSIS_ID)
  ON DELETE CASCADE,
  CONSTRAINT PK_ANALYSIS_ERROR PRIMARY KEY(ERROR_ID)
  USING INDEX
  TABLESPACE ENROLE_INDEXES
)
TABLESPACE ENROLE_DATA;

CREATE TABLE COMPLIANCE_ALERT (
  CA_PROC_ID   NUMBER(20),
  CA_ISSUE_DN VARCHAR(512) NOT NULL,
  ACTIVITY_ID   NUMBER(20),
  ACCOUNT_DN  VARCHAR(512) NOT NULL,
  PARTICIPANT_DN  VARCHAR(512),
  STARTED   CHAR(1),
  CONSTRAINT PK_CA PRIMARY KEY(CA_ISSUE_DN)
  USING INDEX
  TABLESPACE ENROLE_INDEXES
)
TABLESPACE ENROLE_DATA;

CREATE INDEX CA_PID_X ON COMPLIANCE_ALERT(CA_PROC_ID)
TABLESPACE ENROLE_INDEXES;

CREATE INDEX CA_ACCDN_X ON COMPLIANCE_ALERT(ACCOUNT_DN)
TABLESPACE ENROLE_INDEXES;

CREATE INDEX CA_ACTID_X ON COMPLIANCE_ALERT(ACTIVITY_ID)
TABLESPACE ENROLE_INDEXES;

CREATE TABLE AUDIT_EVENT
(
  ID NUMBER(20) NOT NULL,
  ITIM_EVENT_CATEGORY VARCHAR2(50) NOT NULL,
  ENTITY_NAME VARCHAR2(1000),
  ENTITY_DN VARCHAR2(1000),
  ENTITY_TYPE VARCHAR2(50),
  ACTION VARCHAR2(25) NOT NULL,
  INITIATOR_NAME VARCHAR2(1000),
  INITIATOR_DN VARCHAR2(1000),
  CONTAINER_NAME VARCHAR2(1000),
  CONTAINER_DN VARCHAR2(1000),
  WORKFLOW_PROCESS_ID NUMBER(20),
  RESULT_SUMMARY VARCHAR2(25),
  TIMESTAMP VARCHAR2(50) NOT NULL,
  COMMENTS VARCHAR2(1000),
CONSTRAINT AUDIT_EVENT_PK PRIMARY KEY(ID) USING
  INDEX
  TABLESPACE ENROLE_INDEXES
)
TABLESPACE ENROLE_DATA;

CREATE INDEX AUDIT_REPORT1 ON AUDIT_EVENT (TIMESTAMP, ITIM_EVENT_CATEGORY) TABLESPACE ENROLE_INDEXES;

CREATE INDEX ADT_EVENT_PID_ID_X ON AUDIT_EVENT (WORKFLOW_PROCESS_ID ASC, ID DESC) TABLESPACE ENROLE_INDEXES;

CREATE TABLE AUDIT_MGMT_PROVISIONING
(
  EVENT_ID NUMBER(20) NOT NULL,
  OWNER_NAME VARCHAR2(1000),
  OWNER_DN VARCHAR2(1000),
  SERVICE_NAME VARCHAR2(1000) NOT NULL,
  SERVICE_DN VARCHAR2(1000) NOT NULL,
  ACCESS_NAME VARCHAR (1000),
  ACCESS_DN VARCHAR (1000),
  CONSTRAINT AUDIT_PROV_FK FOREIGN KEY(EVENT_ID)
  REFERENCES AUDIT_EVENT(ID)
)
TABLESPACE ENROLE_DATA;

CREATE INDEX ADT_MGMT_PROV_ID_X ON AUDIT_MGMT_PROVISIONING (EVENT_ID ASC) TABLESPACE ENROLE_INDEXES;

CREATE TABLE AUDIT_MGMT_TARGET
(
  EVENT_ID NUMBER(20) NOT NULL,
  TARGET_ENTITY_NAME VARCHAR2(1000),
  TARGET_ENTITY_DN VARCHAR2(1000),
  TARGET_ENTITY_TYPE VARCHAR2(50),
  CONSTRAINT AUDIT_TARGET_FK FOREIGN KEY(EVENT_ID)
  REFERENCES AUDIT_EVENT(ID)
)
TABLESPACE ENROLE_DATA;

CREATE INDEX ADT_MGMT_TGT_ID_X ON AUDIT_MGMT_TARGET (EVENT_ID ASC) TABLESPACE ENROLE_INDEXES;

CREATE TABLE AUDIT_MGMT_DELEGATE
(
  EVENT_ID NUMBER(20) NOT NULL,
  DELEGATE_NAME VARCHAR2(1000),
  DELEGATE_DN VARCHAR2(1000),
  DELEGATE_START_TIME VARCHAR2(1000),
  DELEGATE_END_TIME VARCHAR2(1000),
  CONSTRAINT AUDIT_DELEGATE_FK FOREIGN KEY(EVENT_ID)
  REFERENCES AUDIT_EVENT(ID)
)
TABLESPACE ENROLE_DATA;

CREATE INDEX ADT_MGMT_DEL_ID_X ON AUDIT_MGMT_DELEGATE (EVENT_ID ASC) TABLESPACE ENROLE_INDEXES;

CREATE TABLE I18NMESSAGES
(
  PROFILE VARCHAR2(256),
  NAME VARCHAR2(256) NOT NULL,
  MESSAGEKEY VARCHAR2(256) NOT NULL,
  MESSAGE VARCHAR2(2000)
)
TABLESPACE ENROLE_DATA;

CREATE TABLE BULK_DATA_SERVICE
(
  ID NUMBER(20) NOT NULL,
  STARTTIME DATE,
  ENDTIME DATE,
  MIMETYPE VARCHAR(50),
  NAME VARCHAR(50),
  DATA LONG RAW,
  FILENAME VARCHAR2(255),
  FILESIZE NUMBER(20),
  DESCNAME VARCHAR2(255),
  CONSTRAINT BULK_DATA_SERVICE_PK PRIMARY KEY(ID)
  USING INDEX TABLESPACE ENROLE_INDEXES
)
TABLESPACE ENROLE_DATA;

CREATE TABLE BULK_DATA_STORE
(
  ID NUMBER(20) NOT NULL,
  SERVICEID NUMBER(20) NOT NULL,
  XML LONG RAW,
  CONSTRAINT BULK_DATA_STORE_FK FOREIGN KEY (SERVICEID)
  REFERENCES BULK_DATA_SERVICE (ID) ON DELETE CASCADE,
  CONSTRAINT BULK_DATA_STORE_PK PRIMARY KEY(ID)
  USING INDEX TABLESPACE ENROLE_INDEXES
)
TABLESPACE ENROLE_DATA;

CREATE INDEX BDS_SID ON BULK_DATA_STORE (SERVICEID DESC) TABLESPACE ENROLE_INDEXES;

CREATE TABLE BULK_DATA_INDEX
(
  ID NUMBER(20) NOT NULL,
  STOREID NUMBER(20) NOT NULL,
  DATAOBJECTID VARCHAR(10),
  CONSTRAINT BULK_DATA_INDEX_FK FOREIGN KEY (STOREID)
  REFERENCES BULK_DATA_STORE (ID) ON DELETE CASCADE,
  CONSTRAINT BULK_DATA_INDEX_PK PRIMARY KEY(ID)
  USING INDEX TABLESPACE ENROLE_INDEXES
)
TABLESPACE ENROLE_DATA;

CREATE INDEX BDI_SID ON BULK_DATA_INDEX (STOREID DESC) TABLESPACE ENROLE_INDEXES;

CREATE INDEX BDI_DOID ON BULK_DATA_INDEX (DATAOBJECTID DESC) TABLESPACE ENROLE_INDEXES;

CREATE TABLE MIGRATION_STATUS
(
  ID NUMBER(20) NOT NULL,
  PROCESSCOUNT INTEGER,
  PROCESSSTATUS VARCHAR(50),
  SERVICEID NUMBER(20),
  CONSTRAINT MIG_STATUS_PK PRIMARY KEY(ID)
  USING INDEX TABLESPACE ENROLE_INDEXES
)
TABLESPACE ENROLE_DATA;

CREATE TABLE RECERTIFICATIONLOG
(
  PROCESS_ID NUMBER(20) NOT NULL,
  ACTIVITY_ID NUMBER(20) NOT NULL,
  ENTITY_DN VARCHAR(255),
  ACCESS_DN VARCHAR(255),
  ACCOUNT_ID VARCHAR(100),
  ACCOUNT_OWNER_NAME VARCHAR(100),
  ACCOUNT_OWNER VARCHAR(255),
  ACCESS_NAME VARCHAR(100),
  ACCESS_TYPE VARCHAR(100),
  TYPE VARCHAR(2) NOT NULL,
  SERVICE VARCHAR(255),
  SERVICE_NAME VARCHAR(100),
  SERVICE_PROFILE VARCHAR(100),
  PARTICIPANT VARCHAR(255),
  PARTICIPANT_NAME VARCHAR(100),
  PARTICIPANT_ID VARCHAR(100),
  RECERT_RESULT VARCHAR(2),
  ACTION VARCHAR(2),
  COMMENTS VARCHAR(2000),
  STARTED VARCHAR(50),
  COMPLETED VARCHAR(50),
  RESULT_SUMMARY VARCHAR(2),
  TENANT VARCHAR(255),
  CONSTRAINT RECERT_PK PRIMARY KEY(PROCESS_ID, ACTIVITY_ID)
  USING INDEX TABLESPACE ENROLE_INDEXES
)
TABLESPACE ENROLE_DATA;

/**
--  This table stores predefined rule script's rule parameters.
--  Each row represents one parameter of a rule. A rule may consists of several row
--  representing multiple attributes from person schema to be concatenated.
--  e.g. the predefined rule firstinitial+lastname concatenation of 2 person attributes.
--       givenname and lastname
--
--  TYPE single character that represent the type of policy this rule is applicable.
--       'A' represent adoption policy
--       'I' represent identity policy
--  ID   a unique identifier (key) for the rule
--  JOIN_ORDER a numeric value represents the order for the attribute in concatenation
--  PERSON_ATTRIBUTE the person's attribute where the value is obtained and concatenated
--  FIRST_LAST a numeric value uses to get the substring of the person attribute
--             0 - use the whole value
--             -n(minus n)- use the last n characters
--             n - use the first n characters
--  CONCATENATE_CHAR the concatenation character used to concatenate person attributes
--
*/
CREATE TABLE SCRIPT  (
		  TYPE CHAR(1) NOT NULL,
		  ID VARCHAR(50) NOT NULL,
		  JOIN_ORDER NUMBER NOT NULL,
		  PERSON_ATTRIBUTE VARCHAR(100) NOT NULL,
		  FIRST_LAST NUMBER,
		  CONCATENATE_CHAR CHAR(10),
		  CONSTRAINT SCRIPT_PK PRIMARY KEY(TYPE, ID, JOIN_ORDER)
  		  USING INDEX TABLESPACE ENROLE_INDEXES
) TABLESPACE ENROLE_DATA;

CREATE VIEW ROOTPROCESSVIEW (ID, TYPE, REQUESTER) AS
(
  SELECT ID, TYPE, REQUESTER
  FROM PROCESS
  WHERE  PROCESS.ROOT_PROCESS_ID  = 0
  OR PROCESS.ROOT_PROCESS_ID  = PROCESS.ID
  AND PROCESS.TYPE IN ('OP','AA','AC','UA','UC','UD','US','UR','UO','SR','OA','OC','AD',
            'AS','AR','AP','LO','AO','LS','LR','LP','LD','MS','MR','MD','DA','DC',
            'DD','PA','PC','PD','SA','SC','SD','PS','EN','RC','PE','LC','CP','EP','RP','SM','MA','EA','ER','HR')
);

CREATE VIEW SUBPROCESSVIEW (ROOT_PROCESS_ID, SUBMITTED, COMPLETED, SUBJECT_PROFILE,
  SUBJECT_SERVICE, SUBJECT, TYPE, REQUESTER, RESULT_SUMMARY)
AS
(
  SELECT ROOT_PROCESS_ID, SUBMITTED, COMPLETED, SUBJECT_PROFILE,
    SUBJECT_SERVICE, SUBJECT, TYPE, REQUESTER,
    CASE
      WHEN RESULT_SUMMARY = '' THEN 'PE'
      ELSE RESULT_SUMMARY
    END AS RESULT_SUMMARY
  FROM PROCESS
  WHERE TYPE IN ('OA', 'OC', 'AD', 'AS', 'AR', 'AP')
);

CREATE VIEW PENDING_APPROVAL (PROCESSID, RESULT_SUMMARY)
AS
(
  SELECT PROCESS.ID,
    CASE
      WHEN WORKITEM.LOCK_OWNER IS NULL THEN ACTIVITY.RESULT_SUMMARY
      ELSE 'LK'
    END
  FROM PROCESS, ACTIVITY, WORKITEM
  WHERE WORKITEM.PROCESS_ID = PROCESS.ID AND WORKITEM.ACTIVITY_ID = ACTIVITY.ID
);

CREATE VIEW SUSPENDED_USERS (REQUESTEE, COMPLETED) AS
(
  SELECT PROCESS.REQUESTEE, MAX(PROCESS.COMPLETED)
  FROM PROCESS
  WHERE PROCESS.TYPE = 'US'
  GROUP BY PROCESS.REQUESTEE
);

CREATE VIEW SUSPENDED_ACCOUNT_OPERATIONS (REQUESTEE, SUBJECT_SERVICE, SUBJECT, SUBJECT_PROFILE, COMPLETED) AS
(
  SELECT PROCESS.REQUESTEE, PROCESS.SUBJECT_SERVICE, PROCESS.SUBJECT, PROCESS.SUBJECT_PROFILE, MAX(PROCESS.COMPLETED)
  FROM PROCESS
  WHERE PROCESS.TYPE = 'AS'
  GROUP BY PROCESS.REQUESTEE, PROCESS.SUBJECT_SERVICE, PROCESS.SUBJECT, PROCESS.SUBJECT_PROFILE
);

CREATE VIEW PROCESS_VIEW (ID, REQUESTER, REQUESTEE)
AS
(
  SELECT PROCESS.ID, NVL(PROCESS.REQUESTER, ' ') AS REQUESTER, NVL(PROCESS.REQUESTEE, ' ') AS REQUESTEE
  FROM PROCESS
);

/**
--  This table stores account information for manual service.
--  The information is used to verify if the account data had been modified in recon
--
*/
CREATE TABLE MANUAL_SERVICE_RECON_ACCOUNTS (
  GLOBAL_ID VARCHAR(255) NOT NULL,
  ACCOUNTS CLOB,
  PRIMARY KEY (GLOBAL_ID)
  USING INDEX TABLESPACE ENROLE_INDEXES
)
TABLESPACE ENROLE_DATA;

/**
--  This table stores view definitions.
--  The information is used when creating, changing, deleting, and searching views.
--
*/
CREATE TABLE VIEW_DEFINITION (
  ID INT NOT NULL,
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(2000),
  CONSTRAINT VIEW_DEFINITION_PK PRIMARY KEY(ID)
  USING INDEX TABLESPACE ENROLE_INDEXES
) TABLESPACE ENROLE_DATA;

/**
--  This table stores task settings for views.
--  The information is used to determine which tasks are available and enabled in a view.
--
*/
CREATE TABLE TASKS_VIEWABLE (
  TASK_ID VARCHAR(255) NOT NULL,
  VIEW_ID INT NOT NULL,
  VIEWABLE CHAR(1) DEFAULT 'N' NOT NULL,
  CONSTRAINT TASKS_VIEWABLE_PK PRIMARY KEY(TASK_ID, VIEW_ID)
  USING INDEX TABLESPACE ENROLE_INDEXES,
  CONSTRAINT VIEW_ID_FK FOREIGN KEY (VIEW_ID) REFERENCES VIEW_DEFINITION (ID)
) TABLESPACE ENROLE_DATA;

CREATE INDEX TASKS_VIEWABLE_X ON TASKS_VIEWABLE (VIEW_ID ASC, VIEWABLE ASC, TASK_ID ASC) TABLESPACE ENROLE_INDEXES;

/**
--  This table stores common tasks for homepage.
--
*/
CREATE TABLE COMMON_TASKS  (
	PERSONA VARCHAR(100) NOT NULL,
	TASK_ID VARCHAR(255) NOT NULL,
	CONSTRAINT COMMON_TASKS_PK PRIMARY KEY(PERSONA, TASK_ID)
	USING INDEX TABLESPACE ENROLE_INDEXES
) TABLESPACE ENROLE_DATA;

CREATE TABLE SUMMARY_ORDER (
    RESULT_SUMMARY VARCHAR2(2) NOT NULL,
    RESULT_SEVERITY NUMBER NOT NULL UNIQUE,
    CONSTRAINT UNI_RESULTSUMMARY PRIMARY KEY(RESULT_SUMMARY)
    USING INDEX TABLESPACE ENROLE_INDEXES,
    CONSTRAINT RANGE_VALUE CHECK (RESULT_SEVERITY >= 0 AND RESULT_SEVERITY <= 100)
)
TABLESPACE ENROLE_DATA;

CREATE TABLE PASSWORD_SYNCH (
	ACTIVITY_ID NUMBER(20) NOT NULL,
	ACCOUNT_DN VARCHAR2(512),
	TIME_REQUESTED VARCHAR2(50),
	PASSWORD VARCHAR2(500),

	CONSTRAINT PWD_SYNCH_PK PRIMARY KEY(ACTIVITY_ID)
	USING INDEX
	TABLESPACE ENROLE_INDEXES
)
TABLESPACE ENROLE_DATA;

CREATE INDEX PS_ACCDN_X ON PASSWORD_SYNCH(ACCOUNT_DN)
TABLESPACE ENROLE_INDEXES;

CREATE INDEX PS_TIME_X ON PASSWORD_SYNCH(TIME_REQUESTED)
TABLESPACE ENROLE_INDEXES;

CREATE TABLE ROLE_INHERITANCE (
  ASCENDENT VARCHAR2(2000) NOT NULL,
  DESCENDENT VARCHAR2(2000) NOT NULL,
  CONSTRAINT ROLE_INH_PK PRIMARY KEY(ASCENDENT, DESCENDENT)
  USING INDEX
	TABLESPACE ENROLE_INDEXES
) TABLESPACE ENROLE_DATA;

CREATE INDEX ROLE_INH_ASC_IDX ON ROLE_INHERITANCE (ASCENDENT)
TABLESPACE ENROLE_INDEXES;

CREATE INDEX ROLE_INH_DSC_IDX ON ROLE_INHERITANCE (DESCENDENT)
TABLESPACE ENROLE_INDEXES;

CREATE TABLE SOD_POLICY (
		ID NUMBER(20) NOT NULL,
		GLOBAL_ID NUMBER(20) NOT NULL,
		NAME VARCHAR2(256),
		DESCRIPTION VARCHAR2(1024),
		BUSINESS_UNIT_NAME VARCHAR2(256),
		ENABLED CHAR(1),
		DN VARCHAR2(2000),
		VERSION NUMBER(20) NOT NULL,
		CONSTRAINT SP_PK PRIMARY KEY (ID)
	)
	TABLESPACE ENROLE_DATA;

CREATE TABLE SOD_RULE (
		ID NUMBER(20) NOT NULL,
		POLICY_ID NUMBER(20) NOT NULL,
		GLOBAL_ID NUMBER(20) NOT NULL,
		NAME VARCHAR2(500),
		DESCRIPTION VARCHAR2(500),
		CARDINALITY SMALLINT,
		VERSION NUMBER(20) NOT NULL,
		CONSTRAINT SPR_PK PRIMARY KEY (ID),
		CONSTRAINT SPR_FK FOREIGN KEY (POLICY_ID) REFERENCES SOD_POLICY (ID)
	)
	TABLESPACE ENROLE_DATA;

CREATE TABLE SOD_OWNER (
		ID NUMBER(20) NOT NULL,
		POLICY_ID NUMBER(20) NOT NULL,
		OWNER_NAME VARCHAR2(256),
		BUSINESS_UNIT_NAME VARCHAR2(256),
		TYPE VARCHAR2(2),
		DN VARCHAR2(2000),
		CONSTRAINT SPO_PK PRIMARY KEY (ID),
		CONSTRAINT SPO_FK FOREIGN KEY (POLICY_ID) REFERENCES SOD_POLICY (ID)
	)
	TABLESPACE ENROLE_DATA;

CREATE TABLE SOD_RULE_ROLE (
		ID NUMBER(20) NOT NULL,
		POLICY_RULE_ID NUMBER(20) NOT NULL,
		GLOBAL_ID NUMBER(20) NOT NULL,
		NAME VARCHAR2(256),
		DESCRIPTION VARCHAR2(1024),
		BUSINESS_UNIT_NAME VARCHAR2(256),
		DN VARCHAR2(2000),
		CONSTRAINT SPRR_PK PRIMARY KEY (ID),
		CONSTRAINT SPRR_FK FOREIGN KEY (POLICY_RULE_ID) REFERENCES SOD_RULE (ID)
	)
	TABLESPACE ENROLE_DATA;

CREATE TABLE SOD_VIOLATION_HISTORY (
		ID NUMBER(20) NOT NULL,
		POLICY_GLOBAL_ID NUMBER(20) NOT NULL,
		RULE_GLOBAL_ID NUMBER(20) NOT NULL,
		PERSON_GLOBAL_ID NUMBER(20) NOT NULL,
		PERSON_NAME VARCHAR2(256),
		PERSON_BU VARCHAR2(256),
		PERSON_DN VARCHAR2(2000),
		PROCESS_ID NUMBER(20),
		ADMIN_NAME VARCHAR2(256),
		ADMIN_BU VARCHAR2(256),
		ADMIN_DN VARCHAR2(2000),
		ADMIN_NOTES VARCHAR2(4000),
		STATUS CHAR(1),
		TS NUMBER(20) NOT NULL,
		CONSTRAINT SVIOHIST_PK PRIMARY KEY (ID)
	)
	TABLESPACE ENROLE_DATA;

CREATE TABLE SOD_VIOLATION_STATUS (
		ID NUMBER(20) NOT NULL,
		POLICY_GLOBAL_ID NUMBER(20) NOT NULL,
		RULE_GLOBAL_ID NUMBER(20) NOT NULL,
		PERSON_GLOBAL_ID NUMBER(20) NOT NULL,
		PERSON_NAME VARCHAR2(256),
		PERSON_BU VARCHAR2(256),
		PERSON_DN VARCHAR2(2000),
		PROCESS_ID NUMBER(20),
		ADMIN_NAME VARCHAR2(256),
		ADMIN_BU VARCHAR2(256),
		ADMIN_DN VARCHAR2(2000),
		ADMIN_NOTES VARCHAR2(4000),
		STATUS CHAR(1),
		TS NUMBER(20) NOT NULL,
		EVAL_TS NUMBER(20) NOT NULL,
		CONSTRAINT SVIOSTAT_PK PRIMARY KEY (ID)
	)
	TABLESPACE ENROLE_DATA;

CREATE TABLE SOD_VIOLATION_ROLE_MAP (
		ID NUMBER(20) NOT NULL,
		VIOLATION_ID NUMBER(20) NOT NULL,
		RULEROLE VARCHAR2(2000),
		PERSONROLE VARCHAR2(2000),
		CONSTRAINT SPRVR_PK PRIMARY KEY (ID),
		CONSTRAINT SPRVR_FK FOREIGN KEY (VIOLATION_ID) REFERENCES SOD_VIOLATION_HISTORY (ID)
	)
	TABLESPACE ENROLE_DATA;

CREATE INDEX SP_1 ON SOD_POLICY (GLOBAL_ID ASC, VERSION DESC) TABLESPACE ENROLE_INDEXES;

CREATE INDEX SR_1 ON SOD_RULE (GLOBAL_ID ASC, POLICY_ID ASC) TABLESPACE ENROLE_INDEXES;

CREATE INDEX SVS_1 ON SOD_VIOLATION_STATUS (POLICY_GLOBAL_ID ASC, EVAL_TS DESC) TABLESPACE ENROLE_INDEXES;

CREATE INDEX SVS_2 ON SOD_VIOLATION_STATUS (PERSON_GLOBAL_ID ASC, RULE_GLOBAL_ID ASC) TABLESPACE ENROLE_INDEXES;

CREATE INDEX SVS_3 ON SOD_VIOLATION_STATUS (RULE_GLOBAL_ID ASC, STATUS ASC, ID ASC) TABLESPACE ENROLE_INDEXES;

CREATE INDEX SVRM_1 ON SOD_VIOLATION_ROLE_MAP (VIOLATION_ID ASC, PERSONROLE ASC, RULEROLE ASC) TABLESPACE ENROLE_INDEXES;

ALTER TABLE SOD_VIOLATION_STATUS ADD CONSTRAINT SVS_UC UNIQUE (RULE_GLOBAL_ID, PERSON_GLOBAL_ID);

CREATE TABLE USERRECERT_HISTORY (
  ID NUMBER(20) NOT NULL,
  PROCESS_ID NUMBER(20) NOT NULL,
  ACTIVITY_ID NUMBER(20) NOT NULL,
  PERSON_DN VARCHAR2(255),
  PERSON_NAME VARCHAR2(240),
  PERSON_PROFILE VARCHAR2(128),
  PERSON_EMAIL VARCHAR2(240),
  PERSON_CUSTOM_DISPLAY VARCHAR2(240),
  PERSON_STATUS INTEGER,
  PERSON_CONTAINER_DN VARCHAR2(255),
  PERSON_CONTAINER_NAME VARCHAR2(128),
  POLICY_DN VARCHAR2(255),
  POLICY_NAME VARCHAR2(240),
  SUBMITTED_DATE VARCHAR2(50),
  TIMEOUT SMALLINT,
  CONSTRAINT USERRECERT_PK PRIMARY KEY (ID) USING INDEX TABLESPACE ENROLE_INDEXES
) TABLESPACE ENROLE_DATA;

ALTER TABLE USERRECERT_HISTORY ADD CONSTRAINT USERRECERT_PROC_FK FOREIGN KEY (PROCESS_ID) REFERENCES PROCESS (ID) ON DELETE CASCADE;

ALTER TABLE USERRECERT_HISTORY ADD CONSTRAINT USERRECERT_ACTV_FK FOREIGN KEY (ACTIVITY_ID) REFERENCES ACTIVITY (ID) ON DELETE CASCADE;

CREATE INDEX URH_SUBMITTED ON USERRECERT_HISTORY (SUBMITTED_DATE ASC) TABLESPACE ENROLE_INDEXES;

CREATE TABLE USERRECERT_ROLE (
  ID NUMBER(20) NOT NULL,
  RECERT_ID NUMBER(20) NOT NULL,
  ROLE_DN VARCHAR2(255) NOT NULL,
  ROLE_NAME VARCHAR2(240),
  ROLE_DESCRIPTION VARCHAR2(1024),
  DECISION CHAR(2),
  CONSTRAINT USERRECERT_ROLE_PK PRIMARY KEY (ID) USING INDEX TABLESPACE ENROLE_INDEXES
) TABLESPACE ENROLE_DATA;

ALTER TABLE USERRECERT_ROLE ADD CONSTRAINT USERRECERT_ROLE_FK FOREIGN KEY (RECERT_ID) REFERENCES USERRECERT_HISTORY (ID) ON DELETE CASCADE;

CREATE INDEX URR_ID_DEC ON USERRECERT_ROLE (RECERT_ID ASC, DECISION ASC) TABLESPACE ENROLE_INDEXES;

CREATE TABLE USERRECERT_ACCOUNT (
  ID NUMBER(20) NOT NULL,
  RECERT_ID NUMBER(20) NOT NULL,
  ACCOUNT_DN VARCHAR2(255) NOT NULL,
  ACCOUNT_UID VARCHAR2(240) NOT NULL,
  SERVICE_DN VARCHAR2(255) NOT NULL,
  SERVICE_NAME VARCHAR2(240),
  SERVICE_DESCRIPTION VARCHAR2(240),
  DECISION CHAR(2),
  CONSTRAINT USERRECERT_ACCT_PK PRIMARY KEY (ID) USING INDEX TABLESPACE ENROLE_INDEXES
) TABLESPACE ENROLE_DATA;

ALTER TABLE USERRECERT_ACCOUNT ADD CONSTRAINT USERRECERT_ACCT_FK FOREIGN KEY (RECERT_ID) REFERENCES USERRECERT_HISTORY (ID) ON DELETE CASCADE;

CREATE INDEX URA_ID_DEC ON USERRECERT_ACCOUNT (RECERT_ID ASC, DECISION ASC) TABLESPACE ENROLE_INDEXES;

CREATE TABLE USERRECERT_GROUP (
  ID NUMBER(20) NOT NULL,
  RECERT_ID NUMBER(20) NOT NULL,
  ACCOUNT_ID NUMBER(20) NOT NULL,
  GROUP_DN VARCHAR2(500) NOT NULL,
  GROUP_NAME VARCHAR2(240),
  GROUP_DESCRIPTION VARCHAR2(1024),
  DECISION CHAR(2),
  CONSTRAINT USERRECERT_GRP_PK PRIMARY KEY (ID) USING INDEX TABLESPACE ENROLE_INDEXES
) TABLESPACE ENROLE_DATA;

ALTER TABLE USERRECERT_GROUP ADD CONSTRAINT USERRECERT_GRP_FK FOREIGN KEY (RECERT_ID) REFERENCES USERRECERT_HISTORY (ID);

ALTER TABLE USERRECERT_GROUP ADD CONSTRAINT USERRECERT_GA_FK FOREIGN KEY (ACCOUNT_ID) REFERENCES USERRECERT_ACCOUNT (ID) ON DELETE CASCADE;

CREATE INDEX URG_ID_DEC ON USERRECERT_GROUP (RECERT_ID ASC, ACCOUNT_ID DESC, DECISION ASC) TABLESPACE ENROLE_INDEXES;

CREATE TABLE RECERTIFIER_DETAILS_INFO (
  DN VARCHAR(255) NOT NULL,
  RECERTIFIER_TYPE VARCHAR(255),
  RECERTIFIER_NAME VARCHAR(255),
  CONSTRAINT RECERT_DETAILS_PK PRIMARY KEY (DN) USING INDEX TABLESPACE ENROLE_INDEXES
) TABLESPACE ENROLE_DATA;

CREATE TABLE ACI_CATEGORIES (
  ID SMALLINT NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  CONSTRAINT ACI_CATEGORIES_PK PRIMARY KEY(NAME) USING
  INDEX
  TABLESPACE ENROLE_INDEXES
) TABLESPACE ENROLE_DATA;

CREATE TABLE SA_POLICY (
		ID NUMBER(20) NOT NULL,
		DN VARCHAR(2000),
		BU_DN VARCHAR(2000),
		SCOPE SMALLINT,
		STATUS SMALLINT,
		POLICY_NAME VARCHAR(255),
		CONSTRAINT SAP_PK PRIMARY KEY (ID) USING
  		INDEX
  		TABLESPACE ENROLE_INDEXES
) TABLESPACE ENROLE_DATA;

CREATE INDEX SA_POLICY_BU_SCOPE_X ON SA_POLICY (STATUS ASC, SCOPE, BU_DN) TABLESPACE ENROLE_INDEXES;
CREATE INDEX L_POLICY_BU_DN_X ON SA_POLICY (LOWER(BU_DN) ASC) TABLESPACE ENROLE_INDEXES;

CREATE TABLE SA_POLICY_MEMBERSHIP (
		ID NUMBER(20) NOT NULL,
		POLICY_ID NUMBER(20) NOT NULL,
		ROLE_DN VARCHAR(2000),
		CONSTRAINT SAP_MEMBERSHIP_PK PRIMARY KEY (ID) USING
  		INDEX
  		TABLESPACE ENROLE_INDEXES
) TABLESPACE ENROLE_DATA;

CREATE INDEX SA_MEMBERSHIP_POLICY_ID_X ON SA_POLICY_MEMBERSHIP (POLICY_ID ASC) TABLESPACE ENROLE_INDEXES;
CREATE INDEX L_MEMBERSHIP_POLICY_ROLE_X ON SA_POLICY_MEMBERSHIP (LOWER(ROLE_DN) ASC) TABLESPACE ENROLE_INDEXES;

CREATE TABLE SA_POLICY_ENTITLEMENT (
		ID NUMBER(20) NOT NULL,
		POLICY_ID NUMBER(20) NOT NULL,
		TYPE SMALLINT,
		DEFINITION_TYPE SMALLINT,
	    NAME VARCHAR(256),		
		TARGET_NAME	VARCHAR(256),	
		SERVICE_TYPE VARCHAR(256),	
		SERVICE_NAME VARCHAR(256),	
		SERVICE_GROUP VARCHAR(500), 	
		TARGET_DN VARCHAR(2000),
		
		CONSTRAINT SAP_ENTITLEMENT_PK PRIMARY KEY (ID) USING
  		INDEX
  		TABLESPACE ENROLE_INDEXES
) TABLESPACE ENROLE_DATA;

CREATE INDEX SA_ENTITLEMENT_POLICY_ID_X ON SA_POLICY_ENTITLEMENT (POLICY_ID ASC) TABLESPACE ENROLE_INDEXES;

CREATE INDEX SA_ENTITLEMENT_TYPE_X ON SA_POLICY_ENTITLEMENT (TYPE ASC, DEFINITION_TYPE) TABLESPACE ENROLE_INDEXES;

CREATE INDEX SA_ENTITLEMENT_TARGET_DN_X ON SA_POLICY_ENTITLEMENT (TARGET_DN ASC) TABLESPACE ENROLE_INDEXES;

CREATE INDEX SA_ENTITLEMENT_FILTER_X ON SA_POLICY_ENTITLEMENT (SERVICE_TYPE ASC, SERVICE_GROUP, TARGET_NAME, SERVICE_NAME) TABLESPACE ENROLE_INDEXES;

CREATE INDEX L_ENTITLEMENT_TARGET_DN_X ON SA_POLICY_ENTITLEMENT (LOWER(TARGET_DN) ASC) TABLESPACE ENROLE_INDEXES;

CREATE TABLE SA_POLICY_DESCRIPTION (
		POLICY_ID NUMBER(20) NOT NULL,
		DESCRIPTION VARCHAR (2000)
) TABLESPACE ENROLE_DATA;

CREATE INDEX SA_POLICY_DESC_POLICY_ID_X ON SA_POLICY_DESCRIPTION (POLICY_ID ASC) TABLESPACE ENROLE_INDEXES;

CREATE TABLE SA_POLICY_ERURI (
		POLICY_ID NUMBER(20) NOT NULL,
		ERURI VARCHAR (2000)
) TABLESPACE ENROLE_DATA;

CREATE INDEX SA_POLICY_ERURI_POLICY_ID_X ON SA_POLICY_ERURI (POLICY_ID ASC) TABLESPACE ENROLE_INDEXES;

CREATE VIEW V_SAPOLICY_ENTITLEMENT_DETAIL 
(SAPENTITLE_DN, SAPENTITLE_TYPE, SAPENTITLE_DEFINITION_TYPE, SAPENTITLE_NAME, SAPENTITLE_TARGET_NAME, SAPENTITLE_SERVICE_TYPE, SAPENTITLE_SERVICE_NAME, SAPENTITLE_SERVICE_GROUP, SAPENTITLE_TARGET_DN) 
AS (SELECT SA_POLICY.DN, CASE SA_POLICY_ENTITLEMENT.TYPE WHEN 1 THEN '1' WHEN 0 THEN '0' END, CASE SA_POLICY_ENTITLEMENT.DEFINITION_TYPE WHEN 1 THEN '1' WHEN 0 THEN '0' END, SA_POLICY_ENTITLEMENT.NAME, SA_POLICY_ENTITLEMENT.TARGET_NAME, SA_POLICY_ENTITLEMENT.SERVICE_TYPE, SA_POLICY_ENTITLEMENT.SERVICE_NAME, SA_POLICY_ENTITLEMENT.SERVICE_GROUP, SA_POLICY_ENTITLEMENT.TARGET_DN 
FROM SA_POLICY, SA_POLICY_ENTITLEMENT 
WHERE SA_POLICY.ID=SA_POLICY_ENTITLEMENT.POLICY_ID);

CREATE TABLE SA_EVALUATION_CREDENTIAL  ( 
        DN VARCHAR(2000) NOT NULL,
		ACCOUNT_DN VARCHAR(2000),	 
		ACCOUNT_UID VARCHAR(256), 
		USE_GLOBAL_SETTINGS SMALLINT,
		IS_SEARCHABLE SMALLINT, 
		IS_EXCLUSIVE SMALLINT,
		IS_PASSWORD_VIEWABLE SMALLINT,
		ACCOUNT_STATUS SMALLINT,
		SERVICE_DN VARCHAR(2000),
		RESET_PASSWORD SMALLINT,
		MAX_CHECKOUT_TIME INTEGER,
		OBJECTPROFILE_NAME VARCHAR(255),
		NAME VARCHAR(255),
		OWNERSHIP_TYPE VARCHAR(255),
		OWNER_DN VARCHAR(2000),
		CONSTRAINT SA_EVAL_CREDENTIAL_PK PRIMARY KEY (DN) USING
  		INDEX
  		TABLESPACE ENROLE_INDEXES
) TABLESPACE ENROLE_DATA;

CREATE INDEX SA_EVAL_CRED_UID_X ON SA_EVALUATION_CREDENTIAL (ACCOUNT_UID ASC) TABLESPACE ENROLE_INDEXES;

CREATE INDEX SA_EVAL_CRED_ACCOUNT_DN_X ON SA_EVALUATION_CREDENTIAL (ACCOUNT_DN ASC) TABLESPACE ENROLE_INDEXES;

CREATE INDEX SA_EVAL_CRED_SERVICE_DN_X ON SA_EVALUATION_CREDENTIAL (SERVICE_DN ASC)  TABLESPACE ENROLE_INDEXES;

CREATE INDEX SA_EVAL_CRED_GLOBAL_X ON SA_EVALUATION_CREDENTIAL (USE_GLOBAL_SETTINGS ASC) TABLESPACE ENROLE_INDEXES;

CREATE INDEX SA_EVAL_CRED_SETTING_X ON SA_EVALUATION_CREDENTIAL (IS_EXCLUSIVE ASC, IS_SEARCHABLE, ACCOUNT_STATUS, IS_PASSWORD_VIEWABLE) TABLESPACE ENROLE_INDEXES;

CREATE INDEX L_EVAL_CRED_SERVICE_DN_X ON SA_EVALUATION_CREDENTIAL (LOWER(SERVICE_DN) ASC) TABLESPACE ENROLE_INDEXES;

CREATE INDEX L_EVAL_CRED_DN_X ON SA_EVALUATION_CREDENTIAL (LOWER(DN) ASC) TABLESPACE ENROLE_INDEXES;

CREATE TABLE SA_EVAL_CRED_DESCRIPTION (
		DN VARCHAR (2000) NOT NULL,
		DESCRIPTION VARCHAR (2000)
	) TABLESPACE ENROLE_DATA;

CREATE INDEX SA_EVAL_CRED_DESC_X ON SA_EVAL_CRED_DESCRIPTION (DN ASC)  TABLESPACE ENROLE_INDEXES;
CREATE INDEX SA_EVAL_CRED_DESC_LDN_X ON SA_EVAL_CRED_DESCRIPTION (LOWER(DN) ASC) TABLESPACE ENROLE_INDEXES;

CREATE TABLE SA_EVALUATION_CREDENTIAL_POOL (
        DN VARCHAR(2000) NOT NULL,
		NAME VARCHAR(256),
		SERVICE_DN VARCHAR(2000),
		BU_DN VARCHAR(2000),
		USE_GLOBAL_SETTINGS SMALLINT,
		OBJECTPROFILE_NAME VARCHAR(255),
		CONSTRAINT SA_EVAL_POOL_PK PRIMARY KEY (DN) USING
  		INDEX
  		TABLESPACE ENROLE_INDEXES
) TABLESPACE ENROLE_DATA;

CREATE INDEX SA_EVAL_POOL_NAME_X ON SA_EVALUATION_CREDENTIAL_POOL (NAME ASC) TABLESPACE ENROLE_INDEXES;

CREATE INDEX SA_EVAL_POOL_SERVICE_DN_X ON SA_EVALUATION_CREDENTIAL_POOL (SERVICE_DN ASC) TABLESPACE ENROLE_INDEXES;

CREATE INDEX SA_EVAL_POOL_BU_DN_X ON SA_EVALUATION_CREDENTIAL_POOL (BU_DN ASC) TABLESPACE ENROLE_INDEXES;

CREATE INDEX L_EVAL_POOL_SERVICE_DN_X ON SA_EVALUATION_CREDENTIAL_POOL (LOWER(SERVICE_DN)) TABLESPACE ENROLE_INDEXES;

CREATE INDEX L_EVAL_POOL_BU_DN_X ON SA_EVALUATION_CREDENTIAL_POOL (LOWER(BU_DN) ASC) TABLESPACE ENROLE_INDEXES;

CREATE TABLE SA_CREDPOOL_DESCRIPTION (
		DN VARCHAR (2000) NOT NULL,
		DESCRIPTION VARCHAR (2000)
	) TABLESPACE ENROLE_DATA;

CREATE INDEX SA_CREDPOOL_DESCRIPTION_DN_X ON SA_CREDPOOL_DESCRIPTION (DN ASC) TABLESPACE ENROLE_INDEXES;

CREATE TABLE SA_CREDPOOL_OWNER (
		DN VARCHAR (2000) NOT NULL,
		OWNER VARCHAR (2000)
	) TABLESPACE ENROLE_DATA;

CREATE INDEX SA_CREDPOOL_OWNER_DN_X ON SA_CREDPOOL_OWNER (DN ASC) TABLESPACE ENROLE_INDEXES;

CREATE TABLE SA_CREDPOOL_GROUP (
		DN VARCHAR (2000) NOT NULL,
		ERSERVICEGROUP VARCHAR(2000)
	) TABLESPACE ENROLE_DATA;

CREATE INDEX SA_CREDPOOL_GROUP_DN_X ON SA_CREDPOOL_GROUP (DN ASC) TABLESPACE ENROLE_INDEXES;

CREATE TABLE SA_EVALUATION_SERVICE (
        DN VARCHAR(2000) NOT NULL,
		NAME VARCHAR(256),
		TYPE VARCHAR(256),	
		BU_DN VARCHAR(2000),
		CONSTRAINT SA_EVAL_SERVICE_PK PRIMARY KEY (DN)USING
  		INDEX
  		TABLESPACE ENROLE_INDEXES
) TABLESPACE ENROLE_DATA;

CREATE INDEX SA_EVAL_SERVICE_INFO_X ON SA_EVALUATION_SERVICE (TYPE ASC, NAME) TABLESPACE ENROLE_INDEXES;

CREATE INDEX SA_EVAL_SERVICE_BU_DN_X ON SA_EVALUATION_SERVICE (BU_DN ASC) TABLESPACE ENROLE_INDEXES;

CREATE INDEX L_EVAL_SERVICE_BU_DN_X ON SA_EVALUATION_SERVICE (LOWER(BU_DN) ASC) TABLESPACE ENROLE_INDEXES;

CREATE TABLE SA_EVALUATION_SERVICE_TAG (
        SERVICE_DN VARCHAR(2000) NOT NULL,
		TAG VARCHAR(500) NOT NULL,
		CONSTRAINT SA_EVAL_SERVICE_TAG_PK PRIMARY KEY (SERVICE_DN, TAG) USING
  		INDEX
  		TABLESPACE ENROLE_INDEXES
) TABLESPACE ENROLE_DATA;
CREATE INDEX L_EVAL_SERVICE_TAG_X ON SA_EVALUATION_SERVICE_TAG (LOWER(SERVICE_DN) ASC) TABLESPACE ENROLE_INDEXES;

CREATE TABLE SA_EVALUATION_BU_HIERARCHY (
		BU_DN VARCHAR(2000) NOT NULL,
		CHILD_DN VARCHAR(2000) NOT NULL,
		CONSTRAINT SA_EVAL_BU_HIERARCHY_PK PRIMARY KEY (BU_DN, CHILD_DN) USING
  		INDEX
  		TABLESPACE ENROLE_INDEXES
) TABLESPACE ENROLE_DATA;
CREATE INDEX L_EVAL_BU_HIER_DN_X ON SA_EVALUATION_BU_HIERARCHY (LOWER(BU_DN) ASC, LOWER(CHILD_DN) ASC) TABLESPACE ENROLE_INDEXES;

CREATE TABLE SA_EVALUATION_BU (
		DN VARCHAR(2000) NOT NULL,
		NAME VARCHAR(256),
		CONSTRAINT SA_EVAL_BU_PK PRIMARY KEY (DN) USING
  		INDEX
  		TABLESPACE ENROLE_INDEXES
) TABLESPACE ENROLE_DATA;
CREATE INDEX L_EVAL_BU_DN_X ON SA_EVALUATION_BU (LOWER(DN) ASC) TABLESPACE ENROLE_INDEXES;

CREATE TABLE ERCREDENTIALLEASE
(
        DN VARCHAR(2000) NOT NULL,
		ERCVCATALOG VARCHAR(2000) NOT NULL,
    	ERLESSEE VARCHAR(2000) NOT NULL,
    	ERLESSEENAME VARCHAR(256),
      	ERLEASEEXPIRATIONTIME DATE,
      	ERJUSTIFICATION VARCHAR(2000),
      	ERLEASESTATUS SMALLINT,
      	ERCREDENTIALPOOLDN VARCHAR(2000),
  		ERCUSTOMATTRIBUTE1 VARCHAR(2000),
  		ERCUSTOMATTRIBUTE2 VARCHAR(2000),
  		ERCUSTOMATTRIBUTE3 VARCHAR(2000),
  		ERCUSTOMATTRIBUTE4 VARCHAR(2000),
  		ERCUSTOMATTRIBUTE5 VARCHAR(2000),
      	ERLASTNOTIFICATION DATE,
      	ERLEASECREATETIME DATE,
		CONSTRAINT CREDENTIAL_LEASE_PK PRIMARY KEY (DN)
) TABLESPACE ENROLE_DATA;

CREATE UNIQUE INDEX CRED_LEASE_CVCATALOG_X ON ERCREDENTIALLEASE (ERCVCATALOG ASC) TABLESPACE ENROLE_INDEXES;

CREATE INDEX CRED_LEASE_LESSEE_X ON ERCREDENTIALLEASE (ERLESSEE ASC) TABLESPACE ENROLE_INDEXES;

CREATE INDEX CRED_LEASE_EXPIRE_TIME_X ON ERCREDENTIALLEASE (ERLEASEEXPIRATIONTIME ASC) TABLESPACE ENROLE_INDEXES;

CREATE INDEX L_LEASE_CVCATALOG_X ON ERCREDENTIALLEASE (LOWER(ERCVCATALOG) ASC) TABLESPACE ENROLE_INDEXES;

CREATE INDEX L_LEASE_DN_X ON ERCREDENTIALLEASE (LOWER(DN) ASC) TABLESPACE ENROLE_INDEXES;

CREATE TABLE DB_REPLICATION_CONFIG (
		ID INT NOT NULL,
		OBJECT_CLASS_NAME VARCHAR(256) NOT NULL,
		ATTRIBUTE_NAME VARCHAR(256) NOT NULL,
		DB_TABLE_NAME VARCHAR(256) NOT NULL,
		KEY_COLUMN_NAME VARCHAR(256) NOT NULL,
	    REPLICATE_COLUMN_NAME VARCHAR(256) NOT NULL,
		MULTI_VALUE CHAR(1) NOT NULL,		
		UPDATE_ONLY CHAR(1) NOT NULL,
		CASE_SENSITIVE CHAR(1),		
		CONSTRAINT DB_REPLICATION_CONFIG_PK PRIMARY KEY (ID) USING
  		INDEX
  		TABLESPACE ENROLE_INDEXES
) TABLESPACE ENROLE_DATA;

CREATE TABLE AUDIT_MGMT_LEASE
(
  	EVENT_ID NUMBER(20) NOT NULL,
  	LEASE_EXPIRATION_TIME VARCHAR(500),
  	JUSTIFICATION VARCHAR(2000),
  	POOL_NAME VARCHAR(256),
  	POOL_DN VARCHAR(2000),
  	CUSTOM_ATTRIBUTE_1 VARCHAR(2000),
  	CUSTOM_ATTRIBUTE_2 VARCHAR(2000),
  	CUSTOM_ATTRIBUTE_3 VARCHAR(2000),
  	CUSTOM_ATTRIBUTE_4 VARCHAR(2000),
  	CUSTOM_ATTRIBUTE_5 VARCHAR(2000),
  	LEASE_DN VARCHAR(2000),
  	CONSTRAINT AUDIT_LEASE_FK FOREIGN KEY(EVENT_ID)
  	REFERENCES AUDIT_EVENT(ID)
) TABLESPACE ENROLE_DATA;

CREATE INDEX ADT_MGMT_LEASE_ID_X ON AUDIT_MGMT_LEASE (EVENT_ID ASC) TABLESPACE ENROLE_INDEXES;
CREATE INDEX ADT_MGMT_LEASE_DN_X ON AUDIT_MGMT_LEASE (LEASE_DN ASC) TABLESPACE ENROLE_INDEXES;

CREATE TABLE SA_GLOBAL_CONFIGURATION ( 
		ID INT NOT NULL,
        ACCESS_MODE SMALLINT, 
        MAX_CHECKOUT_DURATION INT, 
		PASSWORD_VIEWABLE SMALLINT,
		SHAREDACCOUNTS_SEARCH SMALLINT,
		PASSWORD_RESET SMALLINT,
		OPERATION_NAME VARCHAR(256),
		LEASE_EXP_HANDLING CHAR(1) , 
		LEASE_EXP_HANDLING_OPTION SMALLINT , 
		VIOLATION_NOTIFY_PARTICIPANT VARCHAR(10) , 
		NOTIFICATION_PARTICIPANT_DN VARCHAR(256) , 
		SCHEDULE_FREQUENCY_MINUTES NUMBER(20) , 
		NOTIFY_FREQUENCY_MINUTES NUMBER(20), 
        CONSTRAINT SA_GLOBAL_CONFIGURATION_PK PRIMARY KEY(ID) USING
  		INDEX
  		TABLESPACE ENROLE_INDEXES
)  TABLESPACE ENROLE_DATA;

CREATE TABLE TASK_TREE (
      PARENT      VARCHAR(500) NOT NULL,   
      TASK_ID     VARCHAR(500) NOT NULL,    
      SEQUENCE_NO SMALLINT NOT NULL,
      ADMIN_ONLY  CHAR(1),
      CONSTRAINT TASK_TREE_PK PRIMARY KEY (TASK_ID) USING
  		INDEX
  		TABLESPACE ENROLE_INDEXES
)  TABLESPACE ENROLE_DATA;

CREATE INDEX TASK_TREE_PARENT_X ON TASK_TREE (PARENT ASC, SEQUENCE_NO ASC) TABLESPACE ENROLE_INDEXES;

CREATE TABLE SA_BULK_LOAD (
  LOAD_ID VARCHAR (255) NOT NULL,
  DATA CLOB,
  CONSTRAINT SA_BULK_LOAD_PK PRIMARY KEY(LOAD_ID) USING
  INDEX
  TABLESPACE ENROLE_INDEXES
)  
TABLESPACE ENROLE_DATA;

CREATE TABLE ROLE_ASSIGNMENT_ATTRIBUTES (
	ROLE_DN VARCHAR(2000) NOT NULL,
	ATTRIBUTE_NAME VARCHAR(256) NOT NULL,
	ROLE_NAME VARCHAR(256),
	CONSTRAINT ROLE_ASSIGNMENT_ATTRIBUTES_PK PRIMARY KEY (ROLE_DN, ATTRIBUTE_NAME) USING
	INDEX
    TABLESPACE ENROLE_INDEXES
)
TABLESPACE ENROLE_DATA;

CREATE TABLE PERSON_ROLE_ASSIGNMENT (
  ID NUMBER(20) NOT NULL,
  PERSON_DN VARCHAR(2000) NOT NULL,
  ROLE_DEFINED_DN VARCHAR(2000) NOT NULL,
  ROLE_ASSIGNED_DN VARCHAR(2000) NOT NULL,
  CONSTRAINT ROLE_ASSIGNMENT_PK PRIMARY KEY(ID) USING
	INDEX
    TABLESPACE ENROLE_INDEXES
)
TABLESPACE ENROLE_DATA;

CREATE INDEX PERSON_ROLE_ASSIGN_X ON PERSON_ROLE_ASSIGNMENT (PERSON_DN ASC, ROLE_DEFINED_DN ASC, ROLE_ASSIGNED_DN ASC) TABLESPACE ENROLE_INDEXES;

CREATE TABLE PERSON_ROLE_ASSIGNMENT_VALUES (
  RA_ID NUMBER(20) NOT NULL,
  ATTRIBUTE_NAME VARCHAR(256) NOT NULL,
  ATTRIBUTE_VALUE VARCHAR(2000) NOT NULL
)
TABLESPACE ENROLE_DATA;

CREATE TABLE SYNCH_OBJECT_LOCK (
  OBJ_ID VARCHAR(2000) NOT NULL,
  CONSTRAINT SYNCH_OBJECT_LOCK_PK PRIMARY KEY(OBJ_ID) USING
	INDEX
    TABLESPACE ENROLE_INDEXES
) 
TABLESPACE ENROLE_DATA;

CREATE VIEW V_AUTHORIZED_CREDENTIALS ( CRED_DN, CRED_ACCOUNT_DN, CRED_ACCOUNT_UID, Exclusice_Access, SA_MEMBER_ROLE_DN,Service_Dn, Service, Service_BUDN, 
Service_BU, SA_POLICY_ID, POLICY_NAME,SA_ENTITLEMENT_ID) AS (SELECT distinct cred.dn, cred.account_dn, cred.account_uid, cred.is_exclusive, member.ROLE_DN, 
service.dn, service.name, bu.dn, bu.name, p.id, p.POLICY_NAME ,ent.id FROM  sa_evaluation_credential cred, sa_policy  p, sa_policy_entitlement      ent, 
sa_evaluation_bu bu, sa_policy_membership    member, SA_GLOBAL_CONFIGURATION global_config, sa_evaluation_service     service   LEFT OUTER JOIN  
sa_evaluation_service_tag service_tag on (service.dn = service_tag.service_dn)  WHERE  (p.status = 0)  AND  (ent.policy_id = p.id)   AND   (ent.type = 0)   
AND  (member.policy_id = p.id)     	  AND     	  (cred.service_dn = service.dn)  AND  (service.bu_dn = bu.dn) AND( ( (cred.use_global_settings = 1) AND 
(cred.is_exclusive != 2) ) OR ( (cred.use_global_settings = 0) AND (global_config.access_mode != 2) ) )    AND ((  (ent.definition_type = 0 AND ent.target_dn = 
cred.dn)  )  OR  ( (ent.definition_type = 1)  AND ( (ent.target_name  is NULL) OR  (  SUBSTR(ent.target_name, LENGTH(ent.target_name)) != '*'  AND 
LOWER(ent.target_name) = LOWER(cred.account_uid)  )  OR (  SUBSTR(ent.target_name, LENGTH(ent.target_name)) = '*'  AND  LOWER(cred.account_uid) like 
LOWER(SUBSTR(ent.target_name, 1, LENGTH(ent.target_name)-1))||'%'  ) )  AND (  (ent.service_name  is NULL)  OR   (  SUBSTR(ent.service_name, 
LENGTH(ent.service_name)) != '*' AND LOWER(ent.service_name) = LOWER(service.NAME ) )  OR  (  SUBSTR(ent.service_name, LENGTH(ent.service_name)) = '*'  AND 
LOWER(service.name) like LOWER(SUBSTR(ent.service_name, 1, LENGTH(ent.service_name)-1))||'%'  )   )   AND  (  (ent.service_group  is NULL)  OR (   
SUBSTR(ent.service_group, LENGTH(ent.service_group)) != '*'  AND   LOWER(ent.service_group) = LOWER(service_tag.tag) )  OR  (   SUBSTR(ent.service_group, 
LENGTH(ent.service_group)) = '*'   AND   LOWER(service_tag.tag) like LOWER(SUBSTR(ent.service_group, 1, LENGTH(ent.service_group)-1))||'%'  )   )    AND  
(ent.service_type IS NULL OR ent.service_type = service.type) AND   (   ( (p.scope = 1) AND (service.bu_dn = p.bu_dn))  OR  (  (p.scope = 2) AND ( 
(service.bu_dn = p.bu_dn)  OR (service.bu_dn in (SELECT child_dn FROM sa_evaluation_bu_hierarchy WHERE bu_dn = p.bu_dn) )  )  )  )  )  ) );

CREATE VIEW V_AUTHORIZED_CREDENTIALPOOLS ( CREDPOOL_DN, CREDPOOL_NAME, GROUP_DN ,SA_MEMBER_ROLE_DN, Service_Dn, Service, Service_BUDN, Service_BU, 
SA_POLICY_ID, SA_POLICY_NAME, SA_ENTITLEMENT_ID) AS (SELECT distinct credpool.dn, credpool.name, poolgroup.ERSERVICEGROUP,member.ROLE_DN, 
service.dn, service.name, bu.dn, bu.name, p.id, p.POLICY_NAME, ent.id     	FROM    sa_evaluation_credential_pool credpool, 
sa_policy   p, sa_policy_entitlement      ent,  sa_evaluation_bu      bu,  sa_policy_membership    member,  sa_credpool_group  poolgroup,   
sa_evaluation_service     service   LEFT OUTER JOIN  sa_evaluation_service_tag service_tag on (service.dn = service_tag.service_dn) WHERE     	  (p.status = 
0) AND (ent.policy_id = p.id)  AND   (ent.type = 1) AND (credpool.service_dn = service.dn)  AND ( service.bu_dn = bu.dn)  
AND (credpool.dn = poolgroup.dn) AND  (member.policy_id = p.id)  AND ( 	( (ent.definition_type = 0 AND ent.target_dn = credpool.dn) ) OR 
(  (ent.definition_type = 1)  AND  (  (ent.target_name  is NULL) OR  (  SUBSTR(ent.target_name, LENGTH(ent.target_name)) != '*' AND   LOWER(ent.target_name) = 
LOWER(credpool.name)  )   OR   ( SUBSTR(ent.target_name, LENGTH(ent.target_name)) = '*'  AND  LOWER(credpool.NAME) like LOWER(SUBSTR(ent.target_name, 1, 
LENGTH(ent.target_name)-1))||'%'  )   )  AND   (  (ent.service_name  is NULL)  OR  (   SUBSTR(ent.service_name, LENGTH(ent.service_name)) != '*'   AND 
LOWER(ent.service_name) = LOWER(service.NAME ) )  OR (  SUBSTR(ent.service_name, LENGTH(ent.service_name)) = '*'   AND   LOWER(service.name) like 
LOWER(SUBSTR(ent.service_name, 1, LENGTH(ent.service_name)-1))||'%' )  )   AND (  (ent.service_group is NULL)  OR  (   SUBSTR(ent.service_group, 
LENGTH(ent.service_group)) != '*'  AND  LOWER(ent.service_group) = LOWER(service_tag.tag) )   OR  (  SUBSTR(ent.service_group, LENGTH(ent.service_group)) = 
'*'  AND   LOWER(service_tag.tag) like LOWER(SUBSTR(ent.service_group, 1, LENGTH(ent.service_group)-1))||'%' )   )  AND  (ent.service_type IS NULL OR 
ent.service_type = service.TYPE) AND ( ( (p.scope = 1) AND (service.bu_dn = p.bu_dn)  )  OR (  (p.scope = 2) AND  (  (service.bu_dn = p.bu_dn)  OR 
(service.bu_dn in (SELECT child_dn FROM sa_evaluation_bu_hierarchy WHERE bu_dn = p.bu_dn) )  )   )   ) ) ) );
