CREATE TABLE RESOURCE_PROVIDERS (
  PROVIDER_ID VARCHAR(20) NOT NULL,
  RESOURCE_DN VARCHAR(2000),
  RECON_STATUS SMALLINT,
  LAST_RECON_TIME TIMESTAMP,
  MAX_RECON_DURATION BIGINT,
  LOCK_SERVICE SMALLINT,
  REQUEST_ID VARCHAR(20),
  CURRENT_REQUEST_COUNT   BIGINT,
  MAX_REQUEST_COUNT   BIGINT,
  LAST_RESPONSE_TIME    TIMESTAMP,
  RESOURCE_STATUS   SMALLINT,
  RESTART_TIME          TIMESTAMP,
  SERVER VARCHAR(255),
  RESOURCE_TEST_STATUS   SMALLINT,
  LAST_TEST_STATUS_TIME    TIMESTAMP,
  FIRST_RESOURCE_FAIL_TIME    TIMESTAMP,
  LAST_ERROR VARCHAR(2000),
  CONSTRAINT RES_PROV_PK PRIMARY KEY(PROVIDER_ID)
) IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE INDEX RESPROVSTATUSX on RESOURCE_PROVIDERS (RESOURCE_STATUS ASC, RESTART_TIME ASC, PROVIDER_ID ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE INDEX RESPROVDNX on RESOURCE_PROVIDERS (RESOURCE_DN ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE TABLE REMOTE_SERVICES_REQUESTS (
  PROVIDER_ID VARCHAR(20),
  REQUEST_ID VARCHAR(20) NOT NULL,
  TYPE SMALLINT,
  OPERATION SMALLINT,
  REQUEST_TIME TIMESTAMP,
  EXPIRATION_TIME TIMESTAMP,
  TARGET VARCHAR(2000),
  SERVICE_DN VARCHAR(2000) NOT NULL,
  DATA CLOB(10M),
  CONNECTION_POINT BLOB(10M),
  CONSTRAINT REMOTE_SVR_REQ_FK FOREIGN KEY (PROVIDER_ID) REFERENCES RESOURCE_PROVIDERS (PROVIDER_ID),
  CONSTRAINT REMOTE_SVR_REQ_PK PRIMARY KEY(REQUEST_ID)
)  IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE INDEX RS_REQ_PID_X ON REMOTE_SERVICES_REQUESTS(PROVIDER_ID) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX RS_REQ_RTIME_X ON REMOTE_SERVICES_REQUESTS(REQUEST_TIME) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX RS_REQ_TYPE_ID_X ON REMOTE_SERVICES_REQUESTS (TYPE ASC, PROVIDER_ID DESC) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE TABLE REMOTE_RESOURCES_RECONS (
  PROVIDER_ID VARCHAR(20) NOT NULL,
  RECON_ID BIGINT NOT NULL,
  DAY_OF_MONTH INTEGER,
  MONTH_NUM INTEGER,
  DAY_OF_WEEK INTEGER,
  HOUR_NUM INTEGER,
  MINUTE_NUM INTEGER,
  MAX_DURATION BIGINT,
  LOCK_SERVICE SMALLINT DEFAULT 1,
  RECON_NAME VARCHAR(300),
  DESCRIPTION VARCHAR(300),
  CONSTRAINT REM_RES_RECONS_FK FOREIGN KEY(PROVIDER_ID) REFERENCES RESOURCE_PROVIDERS(PROVIDER_ID),
  CONSTRAINT REM_RES_RECONS_PK PRIMARY KEY(PROVIDER_ID, RECON_ID)
) IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE TABLE REMOTE_RESOURCES_RECON_QUERIES (
  PROVIDER_ID VARCHAR(20) NOT NULL,
  RECON_ID BIGINT NOT NULL,
  QUERY_ID BIGINT NOT NULL,
  RECON_FILTER VARCHAR(4000),
  RECON_BASE VARCHAR(4000),
  MAX_DURATION BIGINT,
  MAX_ENTRIES BIGINT,
  ATTRIBUTES CLOB(10M),
  SUPPORT_DATA_ONLY SMALLINT,
  CONSTRAINT REM_REC_QUERIES_FK FOREIGN KEY(PROVIDER_ID, RECON_ID) REFERENCES REMOTE_RESOURCES_RECONS(PROVIDER_ID, RECON_ID),
  CONSTRAINT REM_REC_QUERIES_PK PRIMARY KEY(PROVIDER_ID, RECON_ID, QUERY_ID)
) IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE TABLE LCR_INPROGRESS_TABLE (
  TENANT VARCHAR(256) NOT NULL,
  RULE_ID BIGINT NOT NULL,
  RULE_OP VARCHAR(256),
  CHILD_ID BIGINT,
  START_TIME BIGINT,
  ENTITY_ID VARCHAR(256) NOT NULL,
  CONSTRAINT Unique_RuleEntity PRIMARY KEY(RULE_ID,ENTITY_ID)
) IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

ALTER TABLE LCR_INPROGRESS_TABLE VOLATILE;
CREATE INDEX LCR_CHILD_ID_X ON LCR_INPROGRESS_TABLE (CHILD_ID ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE TABLE PO_TOPIC_TABLE (
  TENANT      VARCHAR(256)   NOT NULL,
  TOPIC       VARCHAR(256)   NOT NULL,
  SERVER      VARCHAR(255),
  CHECKPOINT_TIME BIGINT,
  TOPIC_ID       BIGINT      NOT NULL,
  CONSTRAINT Unique_TenantTopic PRIMARY KEY(TENANT,TOPIC),
  CONSTRAINT Unique_TopicID UNIQUE(TOPIC_ID)
) IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

ALTER TABLE PO_TOPIC_TABLE VOLATILE;

CREATE TABLE PO_NOTIFICATION_TABLE (
  NOTIFICATION_ID   BIGINT  NOT NULL,
  TOPIC_ID        BIGINT      NOT NULL,
  SUBJECT     VARCHAR(2000),
  TEXTBODY       CLOB(100K),
  RECEIVE_TIME    BIGINT       NOT NULL,
  RECIPIENT_EADDR VARCHAR(320)  NOT NULL,
  RECIPIENT_LOCALE   VARCHAR(256),
  CONSTRAINT TenantTopic_parent
  FOREIGN KEY(TOPIC_ID) REFERENCES PO_TOPIC_TABLE(TOPIC_ID) ON DELETE RESTRICT,
  CONSTRAINT NOTIFICATION_ID_PK PRIMARY KEY(NOTIFICATION_ID)
) IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

ALTER TABLE PO_NOTIFICATION_TABLE VOLATILE;
CREATE INDEX PO_NotifyIndex ON PO_NOTIFICATION_TABLE(TOPIC_ID) MINPCTUSED 10 ALLOW REVERSE SCANS;


CREATE TABLE PO_NOTIFICATION_HTMLBODY_TABLE (
  NOTIFICATION_ID        BIGINT NOT NULL,
  HTMLBODY            CLOB(100K),
  CONSTRAINT NotificationIDHTML FOREIGN KEY(NOTIFICATION_ID) REFERENCES PO_NOTIFICATION_TABLE(NOTIFICATION_ID) ON DELETE CASCADE,
  CONSTRAINT NOTIFI_ID_HTML_PK PRIMARY KEY(NOTIFICATION_ID)
 ) IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

ALTER TABLE PO_NOTIFICATION_HTMLBODY_TABLE VOLATILE;

CREATE TABLE SCHEDULED_MESSAGE (
  SCHEDULED_TIME BIGINT,
  SCHEDULED_MESSAGE_ID BIGINT NOT NULL,
  MESSAGE CLOB(10M),
  SMALL_MESSAGE VARCHAR(4000),
  SERVER VARCHAR(255),
  CHECKPOINT_TIME BIGINT,
  REFERENCE_ID BIGINT,
  REFERENCE2_ID VARCHAR(50),
  CONSTRAINT SCHED_MSG_PK PRIMARY KEY( SCHEDULED_MESSAGE_ID)
) IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE INDEX SCH_MSG_TIME_X ON SCHEDULED_MESSAGE (SCHEDULED_TIME, SERVER) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX SCH_MSG_CHKPNT_X ON SCHEDULED_MESSAGE (CHECKPOINT_TIME) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX SCH_MSG_REF_X ON SCHEDULED_MESSAGE (REFERENCE_ID) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX SCHEDULED_MSG_X ON SCHEDULED_MESSAGE (REFERENCE2_ID ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX SCH_MSG_SVR_X on SCHEDULED_MESSAGE (SERVER ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;

UPDATE SYSSTAT.TABLES SET CARD = 50000 where TABSCHEMA = 'DB2INST1' AND TABNAME = 'SCHEDULED_MESSAGE' AND CARD < 50000;

CREATE TABLE NEXTVALUE (
  ID VARCHAR(50) NOT NULL,
  NEXTID INTEGER NOT NULL,
  CONSTRAINT NEXTVALUE_PK PRIMARY KEY(ID)
) IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE TABLE PROCESS (
  ROOT_PROCESS_ID BIGINT NOT NULL,
  ID BIGINT NOT NULL,
  PARENT_ID BIGINT,
  PARENT_ACTIVITY_ID BIGINT,
  NAME VARCHAR(100),
  TYPE VARCHAR(2) NOT NULL,
  DEFINITION_ID VARCHAR(2000) NOT NULL,
  REQUESTER_TYPE VARCHAR(2),
  REQUESTER VARCHAR(2000),
  REQUESTER_NAME VARCHAR(100),
  DESCRIPTION VARCHAR(300),
  PRIORITY INTEGER,
  SCHEDULED VARCHAR(50),
  STARTED VARCHAR(50),
  COMPLETED VARCHAR(50),
  LASTMODIFIED VARCHAR(50),
  SUBMITTED VARCHAR(50),
  STATE VARCHAR(1),
  NOTIFY INTEGER,
  REQUESTEE VARCHAR(2000),
  REQUESTEE_NAME VARCHAR(100),
  SUBJECT VARCHAR(2000),
  SUBJECT_PROFILE VARCHAR(100),
  SUBJECT_SERVICE VARCHAR(100),
  SUBJECT_ACCESS_ID VARCHAR(2000),
  SUBJECT_ACCESS_NAME VARCHAR(100),
  COMMENTS VARCHAR(2000),
  RESULT_SUMMARY VARCHAR(2),
  RESULT_DETAIL CLOB(10M),
  SHORT_DETAIL VARCHAR(4000),
  TENANT VARCHAR(2000),
  CONSTRAINT PROCESS_PK PRIMARY KEY(ID)
) IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE INDEX PROCESS_STATE_X ON PROCESS (STATE ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX PROCESS_PID_X ON PROCESS (PARENT_ID ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX PROCESS_VPC1_X ON PROCESS (PARENT_ID ASC, SUBMITTED DESC, ID DESC, STATE ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX PROCESS_SUB_X ON PROCESS (SUBMITTED DESC, PARENT_ID ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX PROCESS_ID_ST ON PROCESS (ID ASC, STATE ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX PROCESS_PACT_ID_X ON PROCESS (PARENT_ACTIVITY_ID ASC, ID DESC) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX PROCESS_USERREQ_X ON PROCESS (REQUESTER ASC, PARENT_ID ASC, TENANT ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;

UPDATE SYSSTAT.TABLES SET CARD = 50000 where TABSCHEMA = 'DB2INST1' AND TABNAME = 'PROCESS' AND CARD < 50000;

CREATE TABLE ACTIVITY (
  ID BIGINT NOT NULL,
  PROCESS_ID BIGINT NOT NULL,
  DEFINITION_ID VARCHAR(100) NOT NULL,
  ACTIVITY_INDEX INTEGER,
  LOOP_COUNT INTEGER,
  LOOP_RUNCOUNT INTEGER,
  RETRY_COUNT INTEGER,
  LOCK_COUNT INTEGER,
  SUBPROCESS_ID BIGINT,
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(300),
  TYPE VARCHAR(1),
  SUBTYPE VARCHAR(2),
  PRIORITY INTEGER,
  STARTED VARCHAR(50),
  COMPLETED VARCHAR(50),
  LASTMODIFIED VARCHAR(50),
  STATE VARCHAR(1),
  RESULT_SUMMARY VARCHAR(5),
  RESULT_DETAIL CLOB(10M),
  SHORT_DETAIL VARCHAR(4000),
  CONSTRAINT ACTIVITY_FK FOREIGN KEY(PROCESS_ID)
  REFERENCES PROCESS(ID),
  CONSTRAINT ACTIVITY_PK PRIMARY KEY(ID)
) IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE UNIQUE INDEX ACTIVITY_KEY ON ACTIVITY (PROCESS_ID, DEFINITION_ID, ACTIVITY_INDEX) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX ACTIVITY_PID_X ON ACTIVITY (PROCESS_ID DESC) MINPCTUSED 10 ALLOW REVERSE SCANS;

UPDATE SYSSTAT.TABLES SET CARD = 50000 where TABSCHEMA = 'DB2INST1' AND TABNAME = 'ACTIVITY' AND CARD < 50000;

CREATE TABLE PROCESSDATA (
  PROCESS_ID BIGINT NOT NULL,
  DEF_ID VARCHAR(100) NOT NULL,
  NAME VARCHAR(100),
  CONTEXT VARCHAR(100),
  DESCRIPTION VARCHAR(300),
  TYPE VARCHAR(500),
  COLLECTION_TYPE VARCHAR(500),
  VALUE CLOB(10M),
  SMALL_VALUE VARCHAR(4000),
  VALUE_LAST_MODIFIED BIGINT,
  CONSTRAINT PROCESSDATA_FK FOREIGN KEY(PROCESS_ID)
  REFERENCES PROCESS(ID),
  CONSTRAINT PROCESSDATA_PK PRIMARY KEY(PROCESS_ID,DEF_ID)
) IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE INDEX PROCESSDATA_ID_DEF on PROCESSDATA (PROCESS_ID ASC, DEF_ID ASC, VALUE_LAST_MODIFIED ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;

UPDATE SYSSTAT.TABLES SET CARD = 50000 where TABSCHEMA = 'DB2INST1' AND TABNAME = 'PROCESSDATA' AND CARD < 50000;

CREATE TABLE PROCESSLOG (
  ID BIGINT NOT NULL,
  PROCESS_ID BIGINT,
  ACTIVITY_ID BIGINT,
  CREATED VARCHAR(50),
  EVENTTYPE VARCHAR(2) NOT NULL,
  OLD_PARTICIPANT_TYPE VARCHAR(2),
  OLD_PARTICIPANT_ID VARCHAR(2000),
  NEW_PARTICIPANT_TYPE VARCHAR(2),
  NEW_PARTICIPANT_ID VARCHAR(2000),
  REQUESTOR_TYPE VARCHAR(2),
  REQUESTOR VARCHAR(2000),
  REQUESTOR_DN VARCHAR(1000),
  OLD_STATE VARCHAR(1),
  NEW_STATE VARCHAR(1),
  DATA_ID VARCHAR(100),
  NEW_DATA CLOB(10M),
  SMALL_NEW_DATA VARCHAR(4000),
  CONSTRAINT PROCESSLOG_FK FOREIGN KEY(PROCESS_ID)
  REFERENCES PROCESS(ID),
  CONSTRAINT PROCESSLOG_PK PRIMARY KEY(ID)
) IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE INDEX PROCESSLOG_PID_X on PROCESSLOG (PROCESS_ID ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX PROCESSLOG_AID_X on PROCESSLOG (ACTIVITY_ID ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE TABLE WORKITEM (
  ID BIGINT NOT NULL,
  PROCESS_ID BIGINT NOT NULL,
  ACTIVITY_ID BIGINT NOT NULL,
  CREATED VARCHAR(50),
  INPUT_PARAMETERS CLOB(10M),
  DUE_DATE BIGINT,
  LOCK_OWNER VARCHAR(512),
  DESCRIPTION VARCHAR(4000),
  PROCESS_DEFINITION_ID VARCHAR(512) NOT NULL,
  ACTIVITY_DEFINITION_ID VARCHAR(100) NOT NULL,
  ACTIVITY_TYPE VARCHAR(1),
  ACTIVITY_SUBTYPE VARCHAR(2),
  ACTIVITY_NAME VARCHAR(100),
  REQUESTEE_NAME VARCHAR(100),
  REQUESTER_NAME VARCHAR(100),
  SUBJECT VARCHAR(2000),
  CONSTRAINT WORKITEM2_FK FOREIGN KEY(ACTIVITY_ID)
  REFERENCES ACTIVITY(ID),
  CONSTRAINT WORKITEM_FK FOREIGN KEY(PROCESS_ID)
  REFERENCES PROCESS(ID),
  CONSTRAINT WORKITEM_PK PRIMARY KEY(ID)
) IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE INDEX WORKITEM_PID_X ON WORKITEM (PROCESS_ID) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX WORKITEM_AID_X ON WORKITEM (ACTIVITY_ID) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX WORKITEM_ADEF_X ON WORKITEM (ACTIVITY_DEFINITION_ID) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX WORKITEM_PDEF_X ON WORKITEM (PROCESS_DEFINITION_ID) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE TABLE WI_PARTICIPANT (
  ID BIGINT NOT NULL,
  WORKITEM_ID BIGINT NOT NULL,
  PARTICIPANT_TYPE VARCHAR(2) NOT NULL,
  PARTICIPANT VARCHAR(512) NOT NULL,
  CONSTRAINT WORKITEM_ID_FK FOREIGN KEY(WORKITEM_ID)
  REFERENCES WORKITEM(ID) ON DELETE CASCADE,
  CONSTRAINT PARTICIPANT_PK PRIMARY KEY(ID)
) IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE INDEX WIPART_WIID_X ON WI_PARTICIPANT (WORKITEM_ID) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX WIPART_DN_X ON WI_PARTICIPANT (PARTICIPANT) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE TABLE SYNCH_POINT (
  PROCESS_ID BIGINT NOT NULL,
  DEFINITION_ID VARCHAR(100) NOT NULL,
  ACTIVITY_INDEX INTEGER NOT NULL,
  WAIT_LOCK INTEGER NOT NULL,
  JOIN_ENABLED SMALLINT NOT NULL,
  CONSTRAINT SYNCH_POINT_PK PRIMARY KEY(PROCESS_ID, DEFINITION_ID, ACTIVITY_INDEX)
) IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE INDEX SYNCH_POINT_PID_X ON SYNCH_POINT (PROCESS_ID DESC) MINPCTUSED 10 ALLOW REVERSE SCANS;
ALTER TABLE SYNCH_POINT VOLATILE;

CREATE TABLE ACTIVITY_LOCK (
  PROCESS_ID BIGINT NOT NULL,
  ACTIVITY_ID BIGINT NOT NULL,
  SERVER VARCHAR(255) NOT NULL,
  THREAD_ID BIGINT NOT NULL,
  LOCK_COUNT INTEGER,
  CONSTRAINT ACTIVITY_LOCK_PK PRIMARY KEY(PROCESS_ID, ACTIVITY_ID, SERVER, THREAD_ID),
  CONSTRAINT ACTIVITY_LOCK_PFK FOREIGN KEY(PROCESS_ID) REFERENCES PROCESS(ID),
  CONSTRAINT ACTIVITY_LOCK_AFK FOREIGN KEY(ACTIVITY_ID) REFERENCES ACTIVITY(ID)
) IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE INDEX ACTIVITY_LOCK_PIDX ON ACTIVITY_LOCK (PROCESS_ID ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;
ALTER TABLE ACTIVITY_LOCK volatile;

CREATE TABLE PASSWORD_TRANSACTION (
  TRANSACTION_ID BIGINT NOT NULL,
  ACCOUNT_DN VARCHAR(2000),
  CREATION_DATE VARCHAR(50),
  PROCESS_ID BIGINT NOT NULL,
  ACTIVITY_ID BIGINT NOT NULL,
  PASSWORD VARCHAR(500),
  CONSTRAINT PWD_TRANS_PK PRIMARY KEY(TRANSACTION_ID)
) IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE TABLE PENDING (
  PROCESS_ID BIGINT NOT NULL,
  PERSON_DN VARCHAR(255),
  SERVICE_DN VARCHAR(2000),
  CONSTRAINT PENDING_FK FOREIGN KEY(PROCESS_ID)
  REFERENCES PROCESS(ID),
  CONSTRAINT PENDING_PK PRIMARY KEY(PROCESS_ID)
) IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE INDEX PENDING_FOR_PERSON ON PENDING (PERSON_DN) MINPCTUSED 10 ALLOW REVERSE SCANS;
ALTER TABLE PENDING VOLATILE;

CREATE TABLE LISTDATA
(
  DATA_ID  BIGINT NOT NULL,
  INDEX_ID  INT NOT NULL,
  VALUE CLOB(10M),
CONSTRAINT LISTDATA_PK PRIMARY KEY(DATA_ID, INDEX_ID)
) IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

ALTER TABLE LISTDATA VOLATILE;

CREATE TABLE REPORT (
  ID INT NOT NULL,
  TITLE VARCHAR(255) NOT NULL,
  TYPE VARCHAR(255) NOT NULL,
  AUTHOR VARCHAR(255),
  REPORT_SIZE INT,
  REPORT_DATA BLOB(10M),
  STYLESHEET_NAME VARCHAR(255),
  EDITABLE CHAR(1),
  REPORTCATEGORY VARCHAR(255) NOT NULL,
  REPORTSUBTYPE VARCHAR(255) NOT NULL,
  CONSTRAINT REPORT_P PRIMARY KEY (ID)
)IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE TABLE ENTITY_COLUMN (
  ENTITY_NAME VARCHAR(255) NOT NULL,
  COLUMN_NAME VARCHAR(255) NOT NULL,
  ATTRIBUTE_NAME VARCHAR(255) NOT NULL,
  MULTI_VALUED CHAR(1),
  IMPLICITLY_MAPPED CHAR(1),
  AVAILABLE_FOR_REPORTING VARCHAR(255),
  TABLE_NAME VARCHAR(255),

  CONSTRAINT ENTITY_COLUMNP PRIMARY KEY (ENTITY_NAME, ATTRIBUTE_NAME)
)IN ENROLE_DATA INDEX IN ENROLE_INDEXES;


CREATE TABLE COLUMN_REPORT (
  ENTITY_NAME VARCHAR(255) NOT NULL,
  COLUMN_NAME VARCHAR(255) NOT NULL,
  REPORT_ID INT NOT NULL,

  CONSTRAINT COLUMN_REPORT_P PRIMARY KEY (REPORT_ID, ENTITY_NAME, COLUMN_NAME)
)IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE TABLE AUTHORIZATION_OWNERS (
  USERDN VARCHAR(255) NOT NULL,
  CONTAINERDN VARCHAR(255) NOT NULL,
  PRIMARY KEY(USERDN, CONTAINERDN)
)IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE TABLE ACI (
  DN VARCHAR(255) NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  SCOPE VARCHAR(255),
  TARGET VARCHAR(255) NOT NULL,
  PARENT VARCHAR(255),
  CATEGORY VARCHAR(255),
  ObjectFilter VARCHAR(1023),
  PRIMARY KEY(DN, NAME, TARGET)
)IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE TABLE ACI_ROLEDNS (
  DN VARCHAR(255) NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  TARGET VARCHAR(255) NOT NULL,
  ROLEDN VARCHAR(255) NOT NULL
)IN ENROLE_DATA INDEX IN ENROLE_INDEXES;


CREATE TABLE ACI_PRINCIPALS (
  DN VARCHAR(255) NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  TARGET VARCHAR(255) NOT NULL,
  PRINCIPALNAME VARCHAR(255) NOT NULL
)IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE TABLE ACI_PERMISSION_ATTRIBUTERIGHT (
  DN VARCHAR(255) NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  TARGET VARCHAR(255) NOT NULL,
  ACTION VARCHAR(6) NOT NULL,
  OPERATION VARCHAR(3) NOT NULL,
  ATTRIBUTERIGHT VARCHAR(255) NOT NULL
)IN ENROLE_DATA INDEX IN ENROLE_INDEXES;


CREATE TABLE ACI_PERMISSION_CLASSRIGHT (
  DN VARCHAR(255) NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  TARGET VARCHAR(255) NOT NULL,
  ACTION VARCHAR(6) NOT NULL,
  CLASSRIGHT VARCHAR(255) NOT NULL
)IN ENROLE_DATA INDEX IN ENROLE_INDEXES;


CREATE TABLE ENTITLEMENT (
  DN VARCHAR(255) NOT NULL,
  TYPE VARCHAR(255) NOT NULL,
  SERVICETARGETTYPE VARCHAR(255),
  SERVICETARGETNAME VARCHAR(255),
  PROCESSDN VARCHAR(255)
)IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE TABLE ENTITLEMENT_PROVISIONINGPARAMS (
  DN VARCHAR(255) NOT NULL,
  ATTRIBUTEVALUE VARCHAR(4000) NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  ENFORCEMENT VARCHAR(255),
  EXPRTYPE VARCHAR(255),
  SERVICETARGETNAME VARCHAR(255),
  SERVICE_DN VARCHAR(255)
)IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE TABLE SYNCHRONIZATION_HISTORY (
  SYNC_ID BIGINT  NOT NULL ,
  REQUESTOR VARCHAR (255) NOT NULL,
  REQ_TYPE VARCHAR (255),
  REQ_NAME VARCHAR (255),
  STATUS VARCHAR (255),
  TENANT VARCHAR (255),
  STATUS_DETAIL VARCHAR (255),
  SCHEDULED_TIME BIGINT,
  SUBMITTED_TIME BIGINT,
  STARTED_TIME BIGINT NOT NULL,
  COMPLETED_TIME BIGINT,
  SERVER_NAME VARCHAR (255),
  PRIMARY KEY (SYNC_ID, STARTED_TIME)
)IN ENROLE_DATA INDEX IN ENROLE_INDEXES;


CREATE TABLE SYNCHRONIZATION_LOCK (
  HOST VARCHAR (255) NOT NULL,
  PRIMARY KEY (HOST)
)IN ENROLE_DATA INDEX IN ENROLE_INDEXES;


CREATE TABLE RESOURCES_SYNCHRONIZATIONS (
  SYNC_ID BIGINT  NOT NULL,
  DAY_OF_MONTH INTEGER  NOT NULL,
  MONTH_NUM INTEGER  NOT NULL,
  DAY_OF_WEEK INTEGER  NOT NULL,
  HOUR_NUM INTEGER  NOT NULL,
  MINUTE_NUM INTEGER  NOT NULL,
  MAX_DURATION BIGINT,
  PRIMARY KEY (SYNC_ID)
)IN ENROLE_DATA INDEX IN ENROLE_INDEXES;


CREATE TABLE CHANGELOG (
  CHANGE_NUMBER INTEGER NOT NULL
)IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE TABLE SERVICE_ACCOUNT_MAPPING (
  SERVICEPROFILE VARCHAR (255) NOT NULL,
  ACCOUNTPROFILE VARCHAR (255) NOT NULL,
  PRIMARY KEY (SERVICEPROFILE, ACCOUNTPROFILE)
)IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE TABLE RECONCILIATION (
  RECONID VARCHAR(255) NOT NULL,
  SERVICEDN VARCHAR(2000) NOT NULL,
  PROCESSEDACCOUNTS INTEGER NOT NULL,
  LOCALACCOUNTS INTEGER NOT NULL,
  TIMUSERACCOUNTS INTEGER NOT NULL,
  POLICYVIOLATIONS INTEGER NOT NULL,
  STARTED TIMESTAMP NOT NULL,
  COMPLETED TIMESTAMP NOT NULL,
  ACTIVITY_ID BIGINT,
  PRIMARY KEY (RECONID)
)IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE INDEX RECON_COMPLETED ON RECONCILIATION (COMPLETED ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE TABLE RECONCILIATION_INFO (
  RECONID VARCHAR(255) NOT NULL,
  ACCOUNTID VARCHAR(255),
  POLICYCOMPLIANCESTATUS VARCHAR(20),
  USERNAME VARCHAR(255),
  OPERATION VARCHAR(20),
  REMARKS VARCHAR(1000),
  HANDLE BIGINT,
  FOREIGN KEY (RECONID) REFERENCES RECONCILIATION (RECONID)
)IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE INDEX RECON_INFO_ACCT_ID ON RECONCILIATION_INFO (ACCOUNTID ASC, RECONID DESC) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX RECON_INFO_ID_OP ON RECONCILIATION_INFO (RECONID ASC, OPERATION ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE TABLE AUTH_KEY (
  Y VARCHAR(2000) NOT NULL,
  P VARCHAR(2000) NOT NULL,
  Q VARCHAR(2000) NOT NULL,
  G VARCHAR(2000) NOT NULL,
  X VARCHAR(2000) NOT NULL
)IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE TABLE WORKFLOW_CALLBACK (
  ID BIGINT NOT NULL,
  PROCESS_ID BIGINT NOT NULL,
  MESSAGE_OBJECT VARCHAR(2000) NOT NULL,
  EVENT_TRIGGER  CHAR(1),
  CONSTRAINT WF_CALLBACK_FK FOREIGN KEY(PROCESS_ID) REFERENCES PROCESS(ID),
  CONSTRAINT WF_CALLBACK_PK PRIMARY KEY(ID)
) IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

ALTER TABLE WORKFLOW_CALLBACK VOLATILE;
CREATE INDEX WF_CALLBACK_PID_X ON WORKFLOW_CALLBACK (PROCESS_ID ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE TABLE POLICY_ANALYSIS (
  ANALYSIS_ID VARCHAR(32) NOT NULL,
  TENANT_NAME VARCHAR(64),
  STATUS INTEGER NOT NULL,
  REASON INTEGER NOT NULL,
  CONTEXT INTEGER NOT NULL,
  CHANGE_TYPE INTEGER NOT NULL,
  LAST_ACCESSED TIMESTAMP NOT NULL,
  WORKERS_STARTED INTEGER DEFAULT 0 NOT NULL,
  WORKERS_COMPLETED INTEGER DEFAULT 0 NOT NULL,
  WORKERS_TOTAL INTEGER DEFAULT 0 NOT NULL,
  ACCOUNTS_EVALUATED INTEGER DEFAULT 0 NOT NULL,
  CONSTRAINT PK_POLICY_ANALYSIS PRIMARY KEY(ANALYSIS_ID)
)
IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE INDEX POL_ANALY_ACC_X on POLICY_ANALYSIS (LAST_ACCESSED ASC, ANALYSIS_ID) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE TABLE ACCT_CHANGE (
  CHANGE_ID VARCHAR(32) NOT NULL,
  ACCT_UID VARCHAR(60) NOT NULL,
  ACCT_IDENTIFIER VARCHAR(255) NOT NULL,
  SERVICE_NAME VARCHAR(200) NOT NULL,
  SERVICE_IDENTIFIER VARCHAR(255) NOT NULL,
  OWNER_NAME VARCHAR(200) NOT NULL,
  OWNER_IDENTIFIER VARCHAR(255) NOT NULL,
  OPERATION_TYPE INTEGER NOT NULL,
  PROVISION_PRIORITY INTEGER,
  SEQUENCE_NR INTEGER,
  REASON INTEGER NOT NULL,
  REVOKE_CHANGE INTEGER NOT NULL,
  STATUS SMALLINT,
  POLICY_ANALYSIS_ID VARCHAR(32) NOT NULL,
  CONSTRAINT FK_POLICY_ANALYSIS FOREIGN KEY(POLICY_ANALYSIS_ID) REFERENCES POLICY_ANALYSIS(ANALYSIS_ID)
  ON DELETE CASCADE,
  CONSTRAINT PK_ACCT_CHANGE PRIMARY KEY(POLICY_ANALYSIS_ID, CHANGE_ID)
)
IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

ALTER TABLE ACCT_CHANGE VOLATILE;
CREATE INDEX ACCT_CHANGE_PREV_X ON ACCT_CHANGE (POLICY_ANALYSIS_ID ASC, OPERATION_TYPE ASC, REASON ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX ACCT_CHANGE_POL_ANAL_ID on ACCT_CHANGE (POLICY_ANALYSIS_ID) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE TABLE ATTR_CHANGE (
  CHANGE_ID VARCHAR(32) NOT NULL,
  ATTR_NAME VARCHAR(100) NOT NULL,
  ATTR_VALUE VARCHAR(2000),
  OPERATION_TYPE INTEGER NOT NULL,
  PRIVILEGE_ACTION_TYPE INTEGER NOT NULL,
  ATTR_VALUE_PRESENCE INTEGER NOT NULL,
  POLICY_ANALYSIS_ID VARCHAR(32) NOT NULL,
  ACCT_CHANGE_ID VARCHAR(32) NOT NULL,
  CONSTRAINT FK_ATTR_CHANGE FOREIGN KEY(POLICY_ANALYSIS_ID, ACCT_CHANGE_ID)
  REFERENCES ACCT_CHANGE(POLICY_ANALYSIS_ID, CHANGE_ID)
  ON DELETE CASCADE,
  CONSTRAINT PK_ATTR_CHANGE PRIMARY KEY(POLICY_ANALYSIS_ID, ACCT_CHANGE_ID, CHANGE_ID)
)
IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

ALTER TABLE ATTR_CHANGE VOLATILE;

CREATE TABLE POLICY_ANALYSIS_ERROR (
  ERROR_ID  VARCHAR(32) NOT NULL,
  ENTITY_NAME VARCHAR(100),
  ENTITY_IDENTIFIER VARCHAR(255),
  ENTITY_TYPE  INTEGER,
  SERVICE_NAME VARCHAR(200),
  SERVICE_IDENTIFIER VARCHAR(255),
  PERSON_NAME  VARCHAR(200),
  PERSON_IDENTIFIER VARCHAR(255),
  POLICY_NAME VARCHAR(100),
  POLICY_IDENTIFIER VARCHAR(255),
  ATTR_NAME VARCHAR(100),
  ERROR_TYPE INTEGER NOT NULL,
  ENTITY_ERROR_TYPE  INTEGER,
  ERROR_MESSAGE CLOB(100K) NOT NULL,
  POLICY_ANALYSIS_ID VARCHAR(32) NOT NULL,
  CONSTRAINT FK_ANALYSIS_ERROR FOREIGN KEY(POLICY_ANALYSIS_ID) REFERENCES POLICY_ANALYSIS(ANALYSIS_ID)
  ON DELETE CASCADE,
  CONSTRAINT PK_ANALYSIS_ERROR PRIMARY KEY(ERROR_ID)
)
IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE TABLE COMPLIANCE_ALERT (
  CA_PROC_ID   BIGINT,
  CA_ISSUE_DN VARCHAR(512) NOT NULL,
  ACTIVITY_ID   BIGINT,
  ACCOUNT_DN  VARCHAR(512) NOT NULL,
  PARTICIPANT_DN  VARCHAR(512),
  STARTED   CHAR(1),
  CONSTRAINT PK_CA PRIMARY KEY(CA_ISSUE_DN)
)
IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE INDEX CA_PID_X ON COMPLIANCE_ALERT(CA_PROC_ID) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX CA_ACCDN_X ON COMPLIANCE_ALERT(ACCOUNT_DN) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX CA_ACTID_X ON COMPLIANCE_ALERT(ACTIVITY_ID) MINPCTUSED 10 ALLOW REVERSE SCANS;

create table AUDIT_EVENT
(
  id BIGINT NOT NULL,
  itim_event_category VARCHAR(50) NOT NULL,
  entity_name VARCHAR(1000),
  entity_dn VARCHAR(1000),
  entity_type VARCHAR(50),
  action VARCHAR(25) NOT NULL,
  workflow_process_id BIGINT,
  initiator_name VARCHAR(1000),
  initiator_dn VARCHAR(1000),
  container_name VARCHAR(1000),
  container_dn VARCHAR(1000),
  result_summary VARCHAR(25),
  timestamp VARCHAR(50) NOT NULL,
  comments VARCHAR(1000),
CONSTRAINT AUDIT_EVENT_PK PRIMARY KEY(id)
)
IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE INDEX ADT_EVENT_PID_ID_X ON AUDIT_EVENT (WORKFLOW_PROCESS_ID ASC, ID DESC) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX AUDIT_REPORT1 ON AUDIT_EVENT (TIMESTAMP ASC, ITIM_EVENT_CATEGORY ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;
create table AUDIT_MGMT_TARGET
(
  event_id BIGINT NOT NULL,
  target_entity_name VARCHAR(1000),
  target_entity_dn VARCHAR(1000),
  target_entity_type VARCHAR(50),
  CONSTRAINT AUDIT_TARGET_FK FOREIGN KEY(event_id)
  REFERENCES AUDIT_EVENT(id)
)
IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE INDEX ADT_MGMT_TGT_ID_X ON AUDIT_MGMT_TARGET (EVENT_ID ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;

create table AUDIT_MGMT_PROVISIONING
(
  event_id BIGINT NOT NULL,
  owner_name VARCHAR(1000),
  owner_dn VARCHAR(1000),
  service_name VARCHAR(1000) NOT NULL,
  service_dn VARCHAR(1000) NOT NULL,
  access_name VARCHAR (1000),
  access_dn VARCHAR (1000),
  CONSTRAINT AUDIT_PROV_FK FOREIGN KEY(event_id)
  REFERENCES AUDIT_EVENT(id)
)
IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE INDEX ADT_MGMT_PROV_ID_X ON AUDIT_MGMT_PROVISIONING (EVENT_ID ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;

create table AUDIT_MGMT_DELEGATE
(
  event_id BIGINT NOT NULL,
  delegate_name VARCHAR(1000),
  delegate_dn VARCHAR(1000),
  delegate_start_time VARCHAR(1000),
  delegate_end_time VARCHAR(1000),
  CONSTRAINT AUDIT_DELEGATE_FK FOREIGN KEY(event_id)
  REFERENCES AUDIT_EVENT(id)
)
IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE INDEX ADT_MGMT_DEL_ID_X ON AUDIT_MGMT_DELEGATE (EVENT_ID ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE TABLE I18NMESSAGES (
  PROFILE VARCHAR(256),
  NAME VARCHAR(256) NOT NULL,
  MESSAGEKEY VARCHAR(256) NOT NULL,
  MESSAGE VARCHAR(2000)
)IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE TABLE BULK_DATA_SERVICE
(
  ID BIGINT NOT NULL,
  STARTTIME TIMESTAMP,
  ENDTIME TIMESTAMP,
  MIMETYPE VARCHAR(50),
  NAME VARCHAR(50),
  DATA BLOB(50M),
  FILENAME VARCHAR(255),
  FILESIZE INTEGER,
  DESCNAME VARCHAR(255),
  CONSTRAINT BULK_DATA_SRC_PK PRIMARY KEY(ID)
)
IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE TABLE BULK_DATA_STORE
(
  ID BIGINT NOT NULL,
  SERVICEID BIGINT NOT NULL,
  XML BLOB(1M),
  CONSTRAINT BULK_DATA_STORE_FK FOREIGN KEY (SERVICEID)
  REFERENCES BULK_DATA_SERVICE (ID) ON DELETE CASCADE,
  CONSTRAINT BULK_DATA_STORE_PK PRIMARY KEY(ID)
)
IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE INDEX BDS_SID ON BULK_DATA_STORE (SERVICEID DESC) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE TABLE BULK_DATA_INDEX
(
  ID BIGINT NOT NULL,
  STOREID BIGINT NOT NULL,
  DATAOBJECTID VARCHAR(10),
  CONSTRAINT BULK_DATA_INDEX_FK FOREIGN KEY (STOREID)
  REFERENCES BULK_DATA_STORE (ID) ON DELETE CASCADE,
  CONSTRAINT BULK_DATA_INDEX_PK PRIMARY KEY(ID)
)
IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE INDEX BDI_SID ON BULK_DATA_INDEX (STOREID DESC) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX BDI_DOID ON BULK_DATA_INDEX (DATAOBJECTID DESC) MINPCTUSED 10 ALLOW REVERSE SCANS;

create table MIGRATION_STATUS (
  ID BIGINT NOT NULL,
  processCount INTEGER,
  processStatus VARCHAR(50),
  SERVICEID BIGINT,
  CONSTRAINT MIG_STATUS_PK PRIMARY KEY(ID)
) IN ENROLE_DATA INDEX IN ENROLE_INDEXES;


CREATE TABLE RECERTIFICATIONLOG (
  PROCESS_ID BIGINT NOT NULL,
  ACTIVITY_ID BIGINT NOT NULL,
  ENTITY_DN VARCHAR(255),
  ACCESS_DN VARCHAR(255),
  ACCOUNT_ID VARCHAR(100),
  ACCOUNT_OWNER_NAME VARCHAR(100),
  ACCOUNT_OWNER VARCHAR(255),
  ACCESS_NAME VARCHAR(100),
  ACCESS_TYPE VARCHAR(100),
  TYPE VARCHAR(2) NOT NULL,
  SERVICE VARCHAR(255),
  SERVICE_NAME VARCHAR(100),
  SERVICE_PROFILE VARCHAR(100),
  PARTICIPANT VARCHAR(255),
  PARTICIPANT_NAME VARCHAR(100),
  PARTICIPANT_ID VARCHAR(100),
  RECERT_RESULT VARCHAR(2),
  ACTION VARCHAR(2),
  COMMENTS VARCHAR(2000),
  STARTED VARCHAR(50),
  COMPLETED VARCHAR(50),
  RESULT_SUMMARY VARCHAR(2),
  TENANT VARCHAR(255),
  CONSTRAINT RECERT_PK PRIMARY KEY(PROCESS_ID, ACTIVITY_ID)
) IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE TABLE SCRIPT  (
		  TYPE CHAR(1) NOT NULL,
		  ID VARCHAR(50) NOT NULL,
		  JOIN_ORDER SMALLINT NOT NULL,
		  PERSON_ATTRIBUTE VARCHAR(100) NOT NULL,
		  FIRST_LAST SMALLINT,
		  CONCATENATE_CHAR CHAR(10),
		  CONSTRAINT SCRIPT_PK PRIMARY KEY(TYPE, ID, JOIN_ORDER)
) IN ENROLE_DATA INDEX IN ENROLE_INDEXES ;

CREATE VIEW ROOTPROCESSVIEW (ID, TYPE, REQUESTER) AS
(
  SELECT ID, TYPE, REQUESTER
  FROM PROCESS
  WHERE  PROCESS.ROOT_PROCESS_ID  = 0
  OR PROCESS.ROOT_PROCESS_ID  = PROCESS.ID
  AND PROCESS.TYPE IN ('OP','AA','AC','UA','UC','UD','US','UR','UO','SR','OA','OC','AD',
            'AS','AR','AP','LO','AO','LS','LR','LP','LD','MS','MR','MD','DA','DC',
            'DD','PA','PC','PD','SA','SC','SD','PS','EN','RC','PE','LC','CP','EP','RP','SM','MA','EA','ER','HR')
);

CREATE VIEW SUBPROCESSVIEW (ROOT_PROCESS_ID, SUBMITTED, COMPLETED, SUBJECT_PROFILE,
  SUBJECT_SERVICE, SUBJECT, TYPE, REQUESTER, RESULT_SUMMARY)
AS
(
  SELECT ROOT_PROCESS_ID, SUBMITTED, COMPLETED, SUBJECT_PROFILE,
    SUBJECT_SERVICE, SUBJECT, TYPE, REQUESTER,
    CASE
      WHEN RESULT_SUMMARY = '' THEN 'PE'
      ELSE RESULT_SUMMARY
    END as RESULT_SUMMARY
  FROM PROCESS
  WHERE TYPE IN ('OA', 'OC', 'AD', 'AS', 'AR', 'AP')
);

CREATE VIEW PENDING_APPROVAL (PROCESSID, RESULT_SUMMARY)
AS
(
  SELECT PROCESS.ID,
    CASE
      WHEN WORKITEM.LOCK_OWNER IS NULL THEN ACTIVITY.RESULT_SUMMARY
      ELSE 'LK'
    END
  FROM PROCESS, ACTIVITY, WORKITEM
  WHERE WORKITEM.PROCESS_ID = PROCESS.ID AND WORKITEM.ACTIVITY_ID = ACTIVITY.ID
);


CREATE VIEW SUSPENDED_USERS (REQUESTEE, COMPLETED) AS
(
  SELECT PROCESS.REQUESTEE, MAX(PROCESS.COMPLETED)
  FROM PROCESS
  WHERE PROCESS.TYPE = 'US'
  GROUP BY PROCESS.REQUESTEE
);


CREATE VIEW SUSPENDED_ACCOUNT_OPERATIONS (REQUESTEE, SUBJECT_SERVICE, SUBJECT, SUBJECT_PROFILE, COMPLETED) AS
(
  SELECT PROCESS.REQUESTEE, PROCESS.SUBJECT_SERVICE, PROCESS.SUBJECT, PROCESS.SUBJECT_PROFILE, MAX(PROCESS.COMPLETED)
  FROM PROCESS
  WHERE PROCESS.TYPE = 'AS'
  GROUP BY PROCESS.REQUESTEE, PROCESS.SUBJECT_SERVICE, PROCESS.SUBJECT, PROCESS.SUBJECT_PROFILE
);

CREATE VIEW PROCESS_VIEW (ID, REQUESTER, REQUESTEE)
AS
(
  SELECT PROCESS.ID, COALESCE(PROCESS.REQUESTER, ' ') as REQUESTER, COALESCE(PROCESS.REQUESTEE, ' ') as REQUESTEE
  FROM PROCESS
);

CREATE TABLE MANUAL_SERVICE_RECON_ACCOUNTS (
  GLOBAL_ID VARCHAR(255) NOT NULL,
  ACCOUNTS CLOB(10M),
  PRIMARY KEY (GLOBAL_ID)
)IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE TABLE VIEW_DEFINITION (
  ID INT NOT NULL,
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(2000),
  CONSTRAINT VIEW_DEFINITION_PK PRIMARY KEY(ID)
)IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE TABLE TASKS_VIEWABLE (
  TASK_ID VARCHAR(255) NOT NULL,
  VIEW_ID INT NOT NULL,
  VIEWABLE CHAR(1) NOT NULL DEFAULT 'N',
  CONSTRAINT TASKS_VIEWABLE_PK PRIMARY KEY(TASK_ID, VIEW_ID),
  CONSTRAINT VIEW_ID_FK FOREIGN KEY (VIEW_ID) REFERENCES VIEW_DEFINITION (ID)
)IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE INDEX TASKS_VIEWABLE_X on TASKS_VIEWABLE (VIEW_ID ASC, VIEWABLE ASC, TASK_ID ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE TABLE COMMON_TASKS  (
	PERSONA VARCHAR(100) NOT NULL,
	TASK_ID VARCHAR(255) NOT NULL,
	CONSTRAINT COMMON_TASKS_PK PRIMARY KEY(PERSONA, TASK_ID) )
IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE TABLE SUMMARY_ORDER (
    RESULT_SUMMARY VARCHAR(2) NOT NULL,
    RESULT_SEVERITY SMALLINT NOT NULL,
    CONSTRAINT Uni_ResultSummary PRIMARY KEY(RESULT_SUMMARY)
)IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE TABLE PASSWORD_SYNCH (
	ACTIVITY_ID BIGINT NOT NULL,
	ACCOUNT_DN VARCHAR(512),
	TIME_REQUESTED VARCHAR(50),
	PASSWORD VARCHAR(500),

	CONSTRAINT PWD_SYNCH_PK PRIMARY KEY(ACTIVITY_ID)
) IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE INDEX PS_ACCDN_X ON PASSWORD_SYNCH(ACCOUNT_DN);
CREATE INDEX PS_TIME_X ON PASSWORD_SYNCH(TIME_REQUESTED);

CREATE TABLE ROLE_INHERITANCE (
  ASCENDENT VARCHAR(2000) NOT NULL,
  DESCENDENT VARCHAR(2000) NOT NULL,
  CONSTRAINT ROLE_INH_PK PRIMARY KEY(ASCENDENT, DESCENDENT)
) IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE INDEX ROLE_INH_ASC_IDX on ROLE_INHERITANCE (ASCENDENT ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX ROLE_INH_DSC_IDX on ROLE_INHERITANCE (DESCENDENT ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE TABLE SOD_POLICY (
		ID BIGINT NOT NULL,
		GLOBAL_ID BIGINT NOT NULL,
		NAME VARCHAR(256),
		DESCRIPTION VARCHAR(1024),
		BUSINESS_UNIT_NAME VARCHAR(256),
		ENABLED CHAR(1),
		DN VARCHAR(2000),
		VERSION BIGINT NOT NULL,
		CONSTRAINT SP_PK PRIMARY KEY (ID)
	)
	IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE TABLE SOD_RULE (
		ID BIGINT NOT NULL,
		POLICY_ID BIGINT NOT NULL,
		GLOBAL_ID BIGINT NOT NULL,
		NAME VARCHAR(500),
		DESCRIPTION VARCHAR(500),
		CARDINALITY SMALLINT,
		VERSION BIGINT NOT NULL,
		CONSTRAINT SPR_PK PRIMARY KEY (ID),
		CONSTRAINT SPR_FK FOREIGN KEY (POLICY_ID) REFERENCES SOD_POLICY (ID)
	)
	IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE TABLE SOD_OWNER (
		ID BIGINT NOT NULL,
		POLICY_ID BIGINT NOT NULL,
		OWNER_NAME VARCHAR(256),
		BUSINESS_UNIT_NAME VARCHAR(256),
		TYPE VARCHAR(2),
		DN VARCHAR(2000),
		CONSTRAINT SPO_PK PRIMARY KEY (ID),
		CONSTRAINT SPO_FK FOREIGN KEY (POLICY_ID) REFERENCES SOD_POLICY (ID)
	)
	IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE TABLE SOD_RULE_ROLE (
		ID BIGINT NOT NULL,
		POLICY_RULE_ID BIGINT NOT NULL,
		GLOBAL_ID BIGINT NOT NULL,
		NAME VARCHAR(256),
		DESCRIPTION VARCHAR(1024),
		BUSINESS_UNIT_NAME VARCHAR(100),
		DN VARCHAR(2000),
		CONSTRAINT SPRR_PK PRIMARY KEY (ID),
		CONSTRAINT SPRR_FK FOREIGN KEY (POLICY_RULE_ID) REFERENCES SOD_RULE (ID)
	)
	IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE TABLE SOD_VIOLATION_HISTORY (
		ID BIGINT NOT NULL,
		POLICY_GLOBAL_ID BIGINT NOT NULL,
		RULE_GLOBAL_ID BIGINT NOT NULL,
		PERSON_GLOBAL_ID BIGINT NOT NULL,
		PERSON_NAME VARCHAR(256),
		PERSON_BU VARCHAR(256),
		PERSON_DN VARCHAR(2000),
		PROCESS_ID BIGINT,
		ADMIN_NAME VARCHAR(256),
		ADMIN_BU VARCHAR(256),
		ADMIN_DN VARCHAR(2000),
		ADMIN_NOTES VARCHAR(4000),
		STATUS CHAR(1),
		TS BIGINT NOT NULL,
		CONSTRAINT SVIOHIST_PK PRIMARY KEY (ID)
	)
	IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE TABLE SOD_VIOLATION_STATUS (
		ID BIGINT NOT NULL,
		POLICY_GLOBAL_ID BIGINT NOT NULL,
		RULE_GLOBAL_ID BIGINT NOT NULL,
		PERSON_GLOBAL_ID BIGINT NOT NULL,
		PERSON_NAME VARCHAR(256),
		PERSON_BU VARCHAR(256),
		PERSON_DN VARCHAR(2000),
		PROCESS_ID BIGINT,
		ADMIN_NAME VARCHAR(256),
		ADMIN_BU VARCHAR(256),
		ADMIN_DN VARCHAR(2000),
		ADMIN_NOTES VARCHAR(4000),
		STATUS CHAR(1),
		TS BIGINT NOT NULL,
		EVAL_TS BIGINT NOT NULL,
		CONSTRAINT SVIOSTAT_PK PRIMARY KEY (ID)
	)
	IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE TABLE SOD_VIOLATION_ROLE_MAP (
		ID BIGINT NOT NULL,
		VIOLATION_ID BIGINT NOT NULL,
		RULEROLE VARCHAR(2000),
		PERSONROLE VARCHAR(2000),
		CONSTRAINT SPRVR_PK PRIMARY KEY (ID),
		CONSTRAINT SPRVR_FK FOREIGN KEY (VIOLATION_ID) REFERENCES SOD_VIOLATION_HISTORY (ID)
	)
	IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE INDEX SP_1 ON SOD_POLICY (GLOBAL_ID ASC, VERSION DESC) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX SR_1 ON SOD_RULE (GLOBAL_ID ASC, POLICY_ID ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX SVS_1 ON SOD_VIOLATION_STATUS (POLICY_GLOBAL_ID ASC, EVAL_TS DESC) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX SVS_2 ON SOD_VIOLATION_STATUS (PERSON_GLOBAL_ID ASC, RULE_GLOBAL_ID ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX SVS_3 ON SOD_VIOLATION_STATUS (RULE_GLOBAL_ID ASC, STATUS ASC, ID ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX SVRM_1 ON SOD_VIOLATION_ROLE_MAP (VIOLATION_ID ASC, PERSONROLE ASC, RULEROLE ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;
ALTER TABLE SOD_VIOLATION_STATUS ADD CONSTRAINT SVS_UC UNIQUE (RULE_GLOBAL_ID, PERSON_GLOBAL_ID);

CREATE TABLE USERRECERT_HISTORY (
  ID BIGINT NOT NULL,
  PROCESS_ID BIGINT NOT NULL,
  ACTIVITY_ID BIGINT NOT NULL,
  PERSON_DN VARCHAR(255),
  PERSON_NAME VARCHAR(240),
  PERSON_PROFILE VARCHAR(128),
  PERSON_EMAIL VARCHAR(240),
  PERSON_CUSTOM_DISPLAY VARCHAR(240),
  PERSON_STATUS INTEGER,
  PERSON_CONTAINER_DN VARCHAR(255),
  PERSON_CONTAINER_NAME VARCHAR(128),
  POLICY_DN VARCHAR(255),
  POLICY_NAME VARCHAR(240),
  SUBMITTED_DATE VARCHAR(50),
  TIMEOUT SMALLINT,
  CONSTRAINT USERRECERT_PK PRIMARY KEY (ID)
) IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

ALTER TABLE USERRECERT_HISTORY ADD CONSTRAINT USERRECERT_PROC_FK FOREIGN KEY (PROCESS_ID) REFERENCES PROCESS (ID) ON DELETE CASCADE;
ALTER TABLE USERRECERT_HISTORY ADD CONSTRAINT USERRECERT_ACTV_FK FOREIGN KEY (ACTIVITY_ID) REFERENCES ACTIVITY (ID) ON DELETE CASCADE;

CREATE INDEX URH_SUBMITTED ON USERRECERT_HISTORY (SUBMITTED_DATE ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE TABLE USERRECERT_ROLE (
  ID BIGINT NOT NULL,
  RECERT_ID BIGINT NOT NULL,
  ROLE_DN VARCHAR(255) NOT NULL,
  ROLE_NAME VARCHAR(240),
  ROLE_DESCRIPTION VARCHAR(1024),
  DECISION CHAR(2),
  CONSTRAINT USERRECERT_ROLE_PK PRIMARY KEY (ID)
) IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

ALTER TABLE USERRECERT_ROLE ADD CONSTRAINT USERRECERT_ROLE_FK FOREIGN KEY (RECERT_ID)	REFERENCES USERRECERT_HISTORY (ID) ON DELETE CASCADE;

CREATE INDEX URR_ID_DEC ON USERRECERT_ROLE (RECERT_ID ASC, DECISION ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE TABLE USERRECERT_ACCOUNT (
  ID BIGINT NOT NULL,
  RECERT_ID BIGINT NOT NULL,
  ACCOUNT_DN VARCHAR(255) NOT NULL,
  ACCOUNT_UID VARCHAR(240) NOT NULL,
  SERVICE_DN VARCHAR(255) NOT NULL,
  SERVICE_NAME VARCHAR(240),
  SERVICE_DESCRIPTION VARCHAR(240),
  DECISION CHAR(2),
  CONSTRAINT USERRECERT_ACCT_PK PRIMARY KEY (ID)
) IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

ALTER TABLE USERRECERT_ACCOUNT ADD CONSTRAINT USERRECERT_ACCT_FK FOREIGN KEY (RECERT_ID)	REFERENCES USERRECERT_HISTORY (ID) ON DELETE CASCADE;

CREATE INDEX URA_ID_DEC ON USERRECERT_ACCOUNT (RECERT_ID ASC, DECISION ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE TABLE USERRECERT_GROUP (
  ID BIGINT NOT NULL,
  RECERT_ID BIGINT NOT NULL,
  ACCOUNT_ID BIGINT NOT NULL,
  GROUP_DN VARCHAR(500) NOT NULL,
  GROUP_NAME VARCHAR(240),
  GROUP_DESCRIPTION VARCHAR(1024),
  DECISION CHAR(2),
  CONSTRAINT USERRECERT_GRP_PK PRIMARY KEY (ID)
) IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

ALTER TABLE USERRECERT_GROUP ADD CONSTRAINT USERRECERT_GRP_FK FOREIGN KEY (RECERT_ID) REFERENCES USERRECERT_HISTORY (ID);
ALTER TABLE USERRECERT_GROUP ADD CONSTRAINT USERRECERT_GA_FK FOREIGN KEY (ACCOUNT_ID) REFERENCES USERRECERT_ACCOUNT (ID) ON DELETE CASCADE;

CREATE INDEX URG_ID_DEC ON USERRECERT_GROUP (RECERT_ID ASC, ACCOUNT_ID DESC, DECISION ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE TABLE RECERTIFIER_DETAILS_INFO (
  DN VARCHAR(255) NOT NULL,
  RECERTIFIER_TYPE VARCHAR(255),
  RECERTIFIER_NAME VARCHAR(255),
  CONSTRAINT RECERT_DETAILS_PK PRIMARY KEY (DN)
)
IN ENROLE_DATA INDEX IN ENROLE_INDEXES;



CREATE TABLE ACI_CATEGORIES (
  ID SMALLINT NOT NULL,
  NAME VARCHAR(255) NOT NULL,
  CONSTRAINT ACI_CATEGORIES_PK PRIMARY KEY(NAME)
)IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE TABLE SA_POLICY (
		ID BIGINT NOT NULL,
		DN VARCHAR(2000),
		BU_DN VARCHAR(2000),
		SCOPE SMALLINT,
		STATUS SMALLINT,
		POLICY_NAME VARCHAR(255),
		CONSTRAINT SAP_PK PRIMARY KEY (ID)
	)
	IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE TABLE SA_POLICY_MEMBERSHIP (
		ID BIGINT NOT NULL,
		POLICY_ID BIGINT NOT NULL,
		ROLE_DN VARCHAR(2000),
		CONSTRAINT SAP_MEMBERSHIP_PK PRIMARY KEY (ID)
	)
	IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE INDEX SA_MEMBERSHIP_POLICY_ID_X ON SA_POLICY_MEMBERSHIP (POLICY_ID ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE TABLE SA_POLICY_ENTITLEMENT (
		ID BIGINT NOT NULL,
		POLICY_ID BIGINT NOT NULL,
		TYPE SMALLINT,
		DEFINITION_TYPE SMALLINT,
	    NAME VARCHAR(256),		
		TARGET_NAME	VARCHAR(256),	
		SERVICE_TYPE VARCHAR(256),	
		SERVICE_NAME VARCHAR(256),	
		SERVICE_GROUP VARCHAR(500), 	
		TARGET_DN VARCHAR(2000),
		CONSTRAINT SAP_ENTITLEMENT_PK PRIMARY KEY (ID)
	)
	IN ENROLE_DATA INDEX IN ENROLE_INDEXES;
	
CREATE INDEX SA_ENTITLEMENT_POLICY_ID_X ON SA_POLICY_ENTITLEMENT (POLICY_ID ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX SA_ENTITLEMENT_TYPE_X ON SA_POLICY_ENTITLEMENT (TYPE ASC, DEFINITION_TYPE) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX SA_ENTITLEMENT_FILTER_X ON SA_POLICY_ENTITLEMENT (SERVICE_TYPE ASC, SERVICE_GROUP, TARGET_NAME, SERVICE_NAME) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE TABLE SA_POLICY_DESCRIPTION (
		POLICY_ID BIGINT NOT NULL,
		DESCRIPTION VARCHAR (2000)
	)
	IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE INDEX SA_POLICY_DESC_POLICY_ID_X ON SA_POLICY_DESCRIPTION (POLICY_ID ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE TABLE SA_POLICY_ERURI (
		POLICY_ID BIGINT NOT NULL,
		ERURI VARCHAR (2000)
	)
	IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE INDEX SA_POLICY_ERURI_POLICY_ID_X ON SA_POLICY_ERURI (POLICY_ID ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE VIEW V_SAPOLICY_ENTITLEMENT_DETAIL 
(SAPENTITLE_DN, SAPENTITLE_TYPE, SAPENTITLE_DEFINITION_TYPE, SAPENTITLE_NAME, SAPENTITLE_TARGET_NAME, SAPENTITLE_SERVICE_TYPE, SAPENTITLE_SERVICE_NAME, SAPENTITLE_SERVICE_GROUP, SAPENTITLE_TARGET_DN) 
AS (SELECT SA_POLICY.DN, CASE SA_POLICY_ENTITLEMENT.TYPE WHEN 1 THEN '1' WHEN 0 THEN '0' END, CASE SA_POLICY_ENTITLEMENT.DEFINITION_TYPE WHEN 1 THEN '1' WHEN 0 THEN '0' END, SA_POLICY_ENTITLEMENT.NAME, SA_POLICY_ENTITLEMENT.TARGET_NAME, SA_POLICY_ENTITLEMENT.SERVICE_TYPE, SA_POLICY_ENTITLEMENT.SERVICE_NAME, SA_POLICY_ENTITLEMENT.SERVICE_GROUP, SA_POLICY_ENTITLEMENT.TARGET_DN 
FROM SA_POLICY, SA_POLICY_ENTITLEMENT 
WHERE SA_POLICY.ID=SA_POLICY_ENTITLEMENT.POLICY_ID);

CREATE TABLE SA_EVALUATION_CREDENTIAL  ( 
        DN VARCHAR(2000) NOT NULL,
		ACCOUNT_DN VARCHAR(2000),	 
		ACCOUNT_UID VARCHAR(256), 
		USE_GLOBAL_SETTINGS SMALLINT, 
		IS_SEARCHABLE SMALLINT, 
		IS_EXCLUSIVE SMALLINT,
		IS_PASSWORD_VIEWABLE SMALLINT,
		ACCOUNT_STATUS SMALLINT,
		SERVICE_DN VARCHAR(2000),
		RESET_PASSWORD SMALLINT,
		MAX_CHECKOUT_TIME INTEGER,
		OBJECTPROFILE_NAME VARCHAR(255),
		NAME VARCHAR(255),
		OWNERSHIP_TYPE VARCHAR(255),
		OWNER_DN VARCHAR(2000),
		CONSTRAINT SA_EVAL_CREDENTIAL_PK PRIMARY KEY (DN)
	)
	IN ENROLE_DATA INDEX IN ENROLE_INDEXES;
	
CREATE INDEX SA_EVAL_CRED_UID_X ON SA_EVALUATION_CREDENTIAL (ACCOUNT_UID ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX SA_EVAL_CRED_ACCOUNT_DN_X ON SA_EVALUATION_CREDENTIAL (ACCOUNT_DN ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX SA_EVAL_CRED_GLOBAL_X ON SA_EVALUATION_CREDENTIAL (USE_GLOBAL_SETTINGS ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX SA_EVAL_CRED_SETTING_X ON SA_EVALUATION_CREDENTIAL (IS_EXCLUSIVE ASC, IS_SEARCHABLE, ACCOUNT_STATUS, IS_PASSWORD_VIEWABLE) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE TABLE SA_EVAL_CRED_DESCRIPTION (
		DN VARCHAR (2000) NOT NULL,
		DESCRIPTION VARCHAR (2000)
	)
	IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE INDEX SA_EVAL_CRED_DESC_X ON SA_EVAL_CRED_DESCRIPTION (DN ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;	



CREATE TABLE SA_EVALUATION_CREDENTIAL_POOL (
        DN VARCHAR(2000) NOT NULL,
		NAME VARCHAR(256),
		SERVICE_DN VARCHAR(2000),
		BU_DN VARCHAR(2000),
		USE_GLOBAL_SETTINGS SMALLINT,
		OBJECTPROFILE_NAME VARCHAR(255),
		CONSTRAINT SA_EVAL_POOL_PK PRIMARY KEY (DN)
	)
	IN ENROLE_DATA INDEX IN ENROLE_INDEXES;
	
CREATE INDEX SA_EVAL_POOL_NAME_X ON SA_EVALUATION_CREDENTIAL_POOL (NAME ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;	

CREATE TABLE SA_CREDPOOL_DESCRIPTION (
		DN VARCHAR (2000) NOT NULL,
		DESCRIPTION VARCHAR (2000)
	)
	IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE INDEX SA_CREDPOOL_DESCRIPTION_DN_X ON SA_CREDPOOL_DESCRIPTION (DN ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE TABLE SA_CREDPOOL_OWNER (
		DN VARCHAR (2000) NOT NULL,
		OWNER VARCHAR (2000)
	)
	IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE INDEX SA_CREDPOOL_OWNER_DN_X ON SA_CREDPOOL_OWNER (DN ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE TABLE SA_CREDPOOL_GROUP (
		DN VARCHAR (2000) NOT NULL,
		ERSERVICEGROUP VARCHAR(2000)
	)
	IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE INDEX SA_CREDPOOL_GROUP_DN_X ON SA_CREDPOOL_GROUP (DN ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE TABLE SA_EVALUATION_SERVICE (
        DN VARCHAR(2000) NOT NULL,
		NAME VARCHAR(256),
		TYPE VARCHAR(256),	
		BU_DN VARCHAR(2000),
		CONSTRAINT SA_EVAL_SERVICE_PK PRIMARY KEY (DN)
	)
	IN ENROLE_DATA INDEX IN ENROLE_INDEXES;
CREATE INDEX SA_EVAL_SERVICE_INFO_X ON SA_EVALUATION_SERVICE (TYPE ASC, NAME) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE TABLE SA_EVALUATION_SERVICE_TAG (
        SERVICE_DN VARCHAR(2000),
		TAG VARCHAR(500)
	)
	IN ENROLE_DATA INDEX IN ENROLE_INDEXES;
	
CREATE TABLE SA_EVALUATION_BU_HIERARCHY (
		BU_DN VARCHAR(2000) NOT NULL,
		CHILD_DN VARCHAR(2000) NOT NULL,
		CONSTRAINT SA_EVAL_BU_HIERARCHY_PK PRIMARY KEY (BU_DN, CHILD_DN)
	)
	IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE TABLE SA_EVALUATION_BU (
		DN VARCHAR(2000) NOT NULL,
		NAME VARCHAR(256),
		CONSTRAINT SA_EVAL_BU_PK PRIMARY KEY (DN)
	)
	IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE TABLE erCredentialLease
(
        dn VARCHAR(2000) NOT NULL,
		erCVCatalog VARCHAR(2000) NOT NULL,
    	erLessee VARCHAR(2000) NOT NULL,
    	erLesseeName VARCHAR(256),
      	erLeaseExpirationTime TIMESTAMP,
      	erJustification VARCHAR(2000),
      	erLeaseStatus SMALLINT,
      	erCredentialPoolDN VARCHAR(2000),
  		erCustomAttribute1 VARCHAR(2000),
  		erCustomAttribute2 VARCHAR(2000),
  		erCustomAttribute3 VARCHAR(2000),
  		erCustomAttribute4 VARCHAR(2000),
  		erCustomAttribute5 VARCHAR(2000),
      	erLastNotification TIMESTAMP,
      	erLeaseCreateTime TIMESTAMP,
		CONSTRAINT CREDENTIAL_LEASE_PK PRIMARY KEY (dn)
	)
	IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE INDEX CRED_LEASE_LESSEE_X ON erCredentialLease (erLessee ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX CRED_LEASE_EXPIRE_TIME_X ON erCredentialLease (erLeaseExpirationTime ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;

SET INTEGRITY FOR SA_POLICY OFF;
SET INTEGRITY FOR SA_POLICY_MEMBERSHIP OFF;
SET INTEGRITY FOR SA_POLICY_ENTITLEMENT OFF;
SET INTEGRITY FOR SA_EVALUATION_CREDENTIAL OFF;
SET INTEGRITY FOR SA_EVALUATION_CREDENTIAL_POOL OFF;
SET INTEGRITY FOR SA_EVALUATION_SERVICE OFF;
SET INTEGRITY FOR SA_EVALUATION_SERVICE_TAG OFF;
SET INTEGRITY FOR SA_EVALUATION_BU OFF;
SET INTEGRITY FOR SA_EVALUATION_BU_HIERARCHY OFF;
SET INTEGRITY FOR erCredentialLease OFF;
SET INTEGRITY FOR SA_EVAL_CRED_DESCRIPTION OFF;

ALTER TABLE SA_POLICY ADD COLUMN L_BU_DN VARCHAR(2000) GENERATED ALWAYS AS (LOWER(BU_DN));
ALTER TABLE SA_POLICY_ENTITLEMENT ADD COLUMN L_TARGET_DN VARCHAR(2000) GENERATED ALWAYS AS (LOWER(TARGET_DN));
ALTER TABLE SA_EVALUATION_CREDENTIAL ADD COLUMN L_SERVICE_DN VARCHAR(2000) GENERATED ALWAYS AS (LOWER(SERVICE_DN));
ALTER TABLE SA_EVALUATION_CREDENTIAL_POOL ADD COLUMN L_SERVICE_DN VARCHAR(2000) GENERATED ALWAYS AS (LOWER(SERVICE_DN));
ALTER TABLE SA_EVALUATION_CREDENTIAL_POOL ADD COLUMN L_BU_DN VARCHAR(2000) GENERATED ALWAYS AS (LOWER(BU_DN));
ALTER TABLE SA_EVALUATION_SERVICE ADD COLUMN L_DN VARCHAR(2000) GENERATED ALWAYS AS (LOWER(DN));
ALTER TABLE SA_EVALUATION_SERVICE ADD COLUMN L_BU_DN VARCHAR(2000) GENERATED ALWAYS AS (LOWER(BU_DN));
ALTER TABLE SA_EVALUATION_SERVICE_TAG ADD COLUMN L_SERVICE_DN VARCHAR(2000) GENERATED ALWAYS AS (LOWER(SERVICE_DN));
ALTER TABLE SA_EVALUATION_BU_HIERARCHY ADD COLUMN L_BU_DN VARCHAR(2000) GENERATED ALWAYS AS (LOWER(BU_DN));
ALTER TABLE SA_EVALUATION_BU ADD COLUMN L_DN VARCHAR(2000) GENERATED ALWAYS AS (LOWER(DN));
ALTER TABLE erCredentialLease ADD COLUMN L_erCVCatalog VARCHAR(2000) GENERATED ALWAYS AS (LOWER(erCVCatalog));
ALTER TABLE erCredentialLease ADD COLUMN L_DN VARCHAR(2000) GENERATED ALWAYS AS (LOWER(DN));
ALTER TABLE SA_EVALUATION_CREDENTIAL ADD COLUMN L_DN VARCHAR(2000) GENERATED ALWAYS AS (LOWER(DN));
ALTER TABLE SA_EVAL_CRED_DESCRIPTION ADD COLUMN L_DN VARCHAR(2000) GENERATED ALWAYS AS (LOWER(DN));

SET INTEGRITY FOR SA_POLICY IMMEDIATE CHECKED FORCE GENERATED;
SET INTEGRITY FOR SA_POLICY_MEMBERSHIP IMMEDIATE CHECKED FORCE GENERATED;
SET INTEGRITY FOR SA_POLICY_ENTITLEMENT IMMEDIATE CHECKED FORCE GENERATED;
SET INTEGRITY FOR SA_EVALUATION_CREDENTIAL IMMEDIATE CHECKED FORCE GENERATED;
SET INTEGRITY FOR SA_EVALUATION_CREDENTIAL_POOL IMMEDIATE CHECKED FORCE GENERATED;
SET INTEGRITY FOR SA_EVALUATION_SERVICE IMMEDIATE CHECKED FORCE GENERATED;
SET INTEGRITY FOR SA_EVALUATION_SERVICE_TAG IMMEDIATE CHECKED FORCE GENERATED;
SET INTEGRITY FOR SA_EVALUATION_BU IMMEDIATE CHECKED FORCE GENERATED;
SET INTEGRITY FOR SA_EVALUATION_BU_HIERARCHY IMMEDIATE CHECKED FORCE GENERATED;
SET INTEGRITY FOR erCredentialLease IMMEDIATE CHECKED FORCE GENERATED;
SET INTEGRITY FOR SA_EVAL_CRED_DESCRIPTION IMMEDIATE CHECKED FORCE GENERATED;

CREATE INDEX SA_POLICY_BU_SCOPE_X ON SA_POLICY (STATUS ASC, SCOPE, L_BU_DN) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX SA_ENTITLEMENT_TARGET_DN_X ON SA_POLICY_ENTITLEMENT (L_TARGET_DN ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX SA_EVAL_CRED_SERVICE_DN_X ON SA_EVALUATION_CREDENTIAL (L_SERVICE_DN ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX SA_EVAL_POOL_SERVICE_DN_X ON SA_EVALUATION_CREDENTIAL_POOL (L_SERVICE_DN ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX SA_EVAL_POOL_BU_DN_X ON SA_EVALUATION_CREDENTIAL_POOL (L_BU_DN ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX SA_EVAL_SERVICE_DN_X ON SA_EVALUATION_SERVICE (L_DN ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX SA_EVAL_SERVICE_BU_DN_X ON SA_EVALUATION_SERVICE (L_BU_DN ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX SA_EVAL_SERVICE_TAG_X ON SA_EVALUATION_SERVICE_TAG (L_SERVICE_DN ASC, TAG ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX SA_EVAL_BU_HIERARCHY_X ON SA_EVALUATION_BU_HIERARCHY (L_BU_DN ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX SA_EVAL_BU_X ON SA_EVALUATION_BU (L_DN ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE UNIQUE INDEX CRED_LEASE_CVCATALOG_X ON erCredentialLease (L_erCVCatalog ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX L_CRED_LEASE_DN_X ON erCredentialLease (L_DN ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX SA_EVAL_LDN_X ON SA_EVALUATION_CREDENTIAL (L_DN ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX SA_EVAL_CRED_DESC_LDN_X ON SA_EVAL_CRED_DESCRIPTION (L_DN ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE TABLE DB_REPLICATION_CONFIG (
		ID INT NOT NULL,
		OBJECT_CLASS_NAME VARCHAR(256) NOT NULL,
		ATTRIBUTE_NAME VARCHAR(256) NOT NULL,
		DB_TABLE_NAME VARCHAR(256) NOT NULL,
		KEY_COLUMN_NAME VARCHAR(256) NOT NULL,
	    REPLICATE_COLUMN_NAME VARCHAR(256) NOT NULL,
		MULTI_VALUE CHAR(1) NOT NULL,
		UPDATE_ONLY CHAR(1) NOT NULL,
		CASE_SENSITIVE CHAR(1),		
		CONSTRAINT DB_REPLICATION_CONFIG_PK PRIMARY KEY (ID)
	)
	IN ENROLE_DATA INDEX IN ENROLE_INDEXES;
	
create table AUDIT_MGMT_LEASE
(
  	event_id BIGINT NOT NULL,
  	lease_expiration_time VARCHAR(500),
  	justification VARCHAR(2000),
  	pool_name VARCHAR(256),
  	pool_dn VARCHAR(2000),
  	custom_attribute_1 VARCHAR(2000),
  	custom_attribute_2 VARCHAR(2000),
  	custom_attribute_3 VARCHAR(2000),
  	custom_attribute_4 VARCHAR(2000),
  	custom_attribute_5 VARCHAR(2000),
  	lease_dn VARCHAR(2000),
  	CONSTRAINT AUDIT_LEASE_FK FOREIGN KEY(event_id)
  	REFERENCES AUDIT_EVENT(id)
)
IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE INDEX ADT_MGMT_LEASE_ID_X ON AUDIT_MGMT_LEASE (EVENT_ID ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;
CREATE INDEX ADT_MGMT_LEASE_DN_X ON AUDIT_MGMT_LEASE (LEASE_DN ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;


CREATE TABLE SA_GLOBAL_CONFIGURATION ( 
		ID INT NOT NULL,
        ACCESS_MODE SMALLINT, 
        MAX_CHECKOUT_DURATION INT, 
		PASSWORD_VIEWABLE SMALLINT,
		SHAREDACCOUNTS_SEARCH SMALLINT,
		PASSWORD_RESET SMALLINT,
		OPERATION_NAME VARCHAR(256),
		LEASE_EXP_HANDLING CHAR(1) , 
		LEASE_EXP_HANDLING_OPTION SMALLINT , 
		VIOLATION_NOTIFY_PARTICIPANT VARCHAR(10) , 
		NOTIFICATION_PARTICIPANT_DN VARCHAR(256) , 
		SCHEDULE_FREQUENCY_MINUTES BIGINT , 
		NOTIFY_FREQUENCY_MINUTES BIGINT, 
        CONSTRAINT SA_GLOBAL_CONFIGURATION_PK PRIMARY KEY(ID) 
) 
IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE TABLE TASK_TREE (
      PARENT      VARCHAR(500) NOT NULL,   
      TASK_ID     VARCHAR(500) NOT NULL,    
      SEQUENCE_NO SMALLINT NOT NULL,
      ADMIN_ONLY  CHAR(1),
      CONSTRAINT TASK_TREE_PK PRIMARY KEY (TASK_ID)
)
IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE INDEX TASK_TREE_PARENT_X on TASK_TREE (PARENT ASC, SEQUENCE_NO ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE TABLE SA_BULK_LOAD (
  LOAD_ID VARCHAR (255) NOT NULL,
  DATA CLOB(10M),
  CONSTRAINT SA_BULK_LOAD_PK PRIMARY KEY(LOAD_ID)
)  
IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE TABLE ROLE_ASSIGNMENT_ATTRIBUTES (
	ROLE_DN VARCHAR(2000) NOT NULL,
	ATTRIBUTE_NAME VARCHAR(256) NOT NULL,
	ROLE_NAME VARCHAR(256),
	CONSTRAINT ROLE_ASSIGNMENT_ATTRIBUTES_PK PRIMARY KEY (ROLE_DN, ATTRIBUTE_NAME)
)
IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE TABLE PERSON_ROLE_ASSIGNMENT (
  ID BIGINT NOT NULL,
  PERSON_DN VARCHAR(2000) NOT NULL,
  ROLE_DEFINED_DN VARCHAR(2000) NOT NULL,
  ROLE_ASSIGNED_DN VARCHAR(2000) NOT NULL,
  CONSTRAINT ROLE_ASSIGNMENT_PK PRIMARY KEY(ID)
)IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE TABLE PERSON_ROLE_ASSIGNMENT_VALUES (
  RA_ID BIGINT NOT NULL,
  ATTRIBUTE_NAME VARCHAR(256) NOT NULL,
  ATTRIBUTE_VALUE VARCHAR(2000) NOT NULL
)IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE INDEX PERSON_ROLE_ASSIGN_X ON PERSON_ROLE_ASSIGNMENT (PERSON_DN ASC, ROLE_DEFINED_DN ASC, ROLE_ASSIGNED_DN ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE TABLE SYNCH_OBJECT_LOCK (
  OBJ_ID VARCHAR(2000) NOT NULL,
  CONSTRAINT SYNCH_OBJECT_LOCK_PK PRIMARY KEY(OBJ_ID)
) IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE VIEW V_AUTHORIZED_CREDENTIALS ( CRED_DN, CRED_ACCOUNT_DN, CRED_ACCOUNT_UID, Exclusice_Access, SA_MEMBER_ROLE_DN,Service_Dn, Service, Service_BUDN, 
Service_BU, SA_POLICY_ID, POLICY_NAME,SA_ENTITLEMENT_ID) AS (SELECT distinct cred.dn, cred.account_dn, cred.account_uid, cred.is_exclusive, member.ROLE_DN, 
service.dn, service.name, bu.dn, bu.name, p.id, p.POLICY_NAME ,ent.id     	FROM  sa_evaluation_credential cred, sa_policy  p, sa_policy_entitlement      
ent, sa_evaluation_bu bu, sa_policy_membership    member, SA_GLOBAL_CONFIGURATION global_config, sa_evaluation_service     service   LEFT OUTER JOIN  
sa_evaluation_service_tag service_tag on (service.dn = service_tag.service_dn)  WHERE  (p.status = 0)  AND  (ent.policy_id = p.id)   AND   (ent.type = 0)   
AND  (member.policy_id = p.id)     	  AND     	  (cred.service_dn = service.dn)  AND  (service.bu_dn = bu.dn) AND( ( (cred.use_global_settings = 1) AND 
(cred.is_exclusive != 2) ) OR ( (cred.use_global_settings = 0) AND (global_config.access_mode != 2) ) )  AND  ( ( (ent.definition_type = 0 AND ent.target_dn = 
cred.dn) )  OR   (       (ent.definition_type = 1) AND ( (ent.target_name  = '')  OR ( SUBSTR(ent.target_name, LENGTH(ent.target_name)) != '*'  AND   
LOWER(ent.target_name) = LOWER(cred.account_uid)  )  OR  ( SUBSTR(ent.target_name, LENGTH(ent.target_name)) = '*'  AND  LOCATE(LOWER(SUBSTR(ent.target_name, 1, 
LENGTH(ent.target_name)-1)), LOWER(cred.account_uid)) = 1 )  ) AND ( (ent.service_name  = '')  OR   ( SUBSTR(ent.service_name, LENGTH(ent.service_name)) != 
'*'  AND   LOWER(ent.service_name) = LOWER(service.NAME )  )   OR  ( 	SUBSTR(ent.service_name, LENGTH(ent.service_name)) = '*'  AND              
LOCATE(LOWER(SUBSTR(ent.service_name, 1, LENGTH(ent.service_name)-1)), LOWER(service.NAME) )= 1             )          )         AND 		( 		  
(ent.service_group  = '')  OR  ( 	SUBSTR(ent.service_group, LENGTH(ent.service_group)) != '*'  AND LOWER(ent.service_group) = LOWER(service_tag.tag) 		  )  
OR   ( SUBSTR(ent.service_group, LENGTH(ent.service_group)) = '*'  AND LOCATE(LOWER(SUBSTR(ent.service_group, 1, LENGTH(ent.service_group)-1)), 
LOWER(service_tag.tag) )= 1   )    )    AND (ent.service_type = '' OR ent.service_type = service.type)  AND ( (  	(p.scope = 1) AND (service.bu_dn = p.bu_dn)  
)  OR 	 (   (p.scope = 2) AND 	 ( (service.bu_dn = p.bu_dn)  OR (service.bu_dn in (SELECT child_dn FROM sa_evaluation_bu_hierarchy WHERE bu_dn = 
p.bu_dn) ) )  ) 	  )   )  )  );

CREATE VIEW V_AUTHORIZED_CREDENTIALPOOLS ( CREDPOOL_DN, CREDPOOL_NAME, GROUP_DN ,SA_MEMBER_ROLE_DN, Service_Dn, Service, Service_BUDN, Service_BU, 
SA_POLICY_ID, SA_POLICY_NAME, SA_ENTITLEMENT_ID) AS (SELECT distinct credpool.dn, credpool.name, poolgroup.ERSERVICEGROUP,member.ROLE_DN, 
service.dn, service.name, bu.dn, bu.name, p.id, p.POLICY_NAME, ent.id     	FROM    sa_evaluation_credential_pool credpool,  
sa_policy   p, sa_policy_entitlement      ent,  sa_evaluation_bu      bu,  sa_policy_membership    member,  sa_credpool_group  poolgroup,   
sa_evaluation_service     service   LEFT OUTER JOIN  sa_evaluation_service_tag service_tag on (service.dn = service_tag.service_dn) WHERE     	  (p.status = 
0) AND (ent.policy_id = p.id)  AND   (ent.type = 1)  AND (credpool.service_dn = service.dn)  AND ( service.bu_dn = bu.dn)  
AND (credpool.dn = poolgroup.dn) AND  (member.policy_id = p.id)  AND ( 	( (ent.definition_type = 0 AND ent.target_dn = credpool.dn) ) OR (  
(ent.definition_type = 1)  AND  ( (ent.target_name  = '') OR  (  SUBSTR(ent.target_name, LENGTH(ent.target_name)) != '*'  AND LOWER(ent.target_name) = 
LOWER(credpool.name)) OR (  SUBSTR(ent.target_name, LENGTH(ent.target_name)) = '*'  AND 	LOCATE(LOWER(SUBSTR(ent.target_name, 1, LENGTH(ent.target_name)-1)), 
LOWER(credpool.name)) = 1 )  )  AND  ( (ent.service_name  = '') OR  ( 	 SUBSTR(ent.service_name, LENGTH(ent.service_name)) != '*'   AND  
LOWER(ent.service_name) = LOWER(service.NAME ) )  OR 	( 	 SUBSTR(ent.service_name, LENGTH(ent.service_name)) = '*' AND 					  
LOCATE(LOWER(SUBSTR(ent.service_name, 1, LENGTH(ent.service_name)-1)), LOWER(service.NAME) )= 1 )   )  AND  ( (ent.service_group  = '') OR  ( 
SUBSTR(ent.service_group, LENGTH(ent.service_group)) != '*' AND  LOWER(ent.service_group) = LOWER(service_tag.tag) 	) OR (  SUBSTR(ent.service_group, 
LENGTH(ent.service_group)) = '*' AND   LOCATE(LOWER(SUBSTR(ent.service_group, 1, LENGTH(ent.service_group)-1)),LOWER(service_tag.tag)) = 1 )   )  AND  
(ent.service_type = '' OR ent.service_type = service.TYPE) AND ( (   (p.scope = 1) AND (service.bu_dn = p.bu_dn) ) OR (  (p.scope = 2)  AND  ( 	
(service.bu_dn = p.bu_dn) OR (service.bu_dn in (SELECT child_dn FROM sa_evaluation_bu_hierarchy WHERE bu_dn = p.bu_dn) ) ) )   )  ) ) );
