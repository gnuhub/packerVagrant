/**********************************************************
 *							  
 *  The section below contains the database schema 
 *  changes introduced in the ITIMx 4.6 fixpacks
 *                                                        
 **********************************************************/ 
 
CREATE VIEW SUSPENDED_USERS (REQUESTEE, COMPLETED) AS
(
	SELECT PROCESS.REQUESTEE, MAX(PROCESS.COMPLETED)
	FROM PROCESS 
	WHERE PROCESS.TYPE = 'US'
	GROUP BY PROCESS.REQUESTEE
);


/**********************************************************
 *							  
 *  The section below contains the database schema 
 *  changes from the latest ITIMX 4.6 fix pack level to ITIM 5.0
 *                                                        
 **********************************************************/
CREATE TABLE SUMMARY_ORDER (
    RESULT_SUMMARY VARCHAR(2) NOT NULL,
    RESULT_SEVERITY SMALLINT NOT NULL UNIQUE,
    CONSTRAINT Uni_ResultSummary PRIMARY KEY(RESULT_SUMMARY),
    CONSTRAINT Range_Value CHECK (RESULT_SEVERITY >= 0 AND RESULT_SEVERITY <= 100)
);

ALTER TABLE RESOURCE_PROVIDERS 
  ALTER SERVER SET DATA TYPE VARCHAR(255);
  
ALTER TABLE REMOTE_RESOURCES_RECONS 
  ADD COLUMN RECON_NAME VARCHAR (300)
  ADD COLUMN DESCRIPTION VARCHAR (300);

ALTER TABLE REMOTE_RESOURCES_RECON_QUERIES 
  ADD COLUMN SUPPORT_DATA_ONLY SMALLINT;

ALTER TABLE PO_TOPIC_TABLE 
  ALTER SERVER SET DATA TYPE VARCHAR(255);

ALTER TABLE SCHEDULED_MESSAGE 
  ADD COLUMN SMALL_MESSAGE VARCHAR(4000)
  ALTER SERVER SET DATA TYPE VARCHAR(255);
  
ALTER TABLE PROCESS
  ADD COLUMN SUBJECT_ACCESS_ID VARCHAR(2000)
  ADD COLUMN SUBJECT_ACCESS_NAME VARCHAR(100)
  ADD COLUMN SHORT_DETAIL VARCHAR(4000);

ALTER TABLE ACTIVITY
  ADD COLUMN SHORT_DETAIL VARCHAR(4000);
  
ALTER TABLE PROCESSLOG
  ADD COLUMN SMALL_NEW_DATA VARCHAR(4000);
  
ALTER TABLE ENTITLEMENT_PROVISIONINGPARAMS
  ALTER ATTRIBUTEVALUE SET DATA TYPE VARCHAR(4000);
  
  
/* ALTER TABLE POLICY_ANALYSIS_ERROR 
  ALTER ERROR_MESSAGE SET DATA TYPE CLOB(100K) NOT NULL; */
  
ALTER TABLE AUDIT_MGMT_PROVISIONING
  ADD COLUMN access_name VARCHAR (1000) 
  ADD COLUMN access_dn VARCHAR (1000);

CREATE TABLE RECERTIFICATIONLOG (
  PROCESS_ID BIGINT NOT NULL,
  ACTIVITY_ID BIGINT NOT NULL,
  ENTITY_DN VARCHAR(255),
  ACCESS_DN VARCHAR(255),
  ACCOUNT_ID VARCHAR(100),
  ACCOUNT_OWNER_NAME VARCHAR(100),
  ACCOUNT_OWNER VARCHAR(255),
  ACCESS_NAME VARCHAR(100),
  ACCESS_TYPE VARCHAR(100),
  TYPE VARCHAR(2) NOT NULL,
  SERVICE VARCHAR(255),
  SERVICE_NAME VARCHAR(100),
  SERVICE_PROFILE VARCHAR(100),
  PARTICIPANT VARCHAR(255),
  PARTICIPANT_NAME VARCHAR(100),
  PARTICIPANT_ID VARCHAR(100),
  RECERT_RESULT VARCHAR(2),
  ACTION VARCHAR(2),
  COMMENTS VARCHAR(2000),
  STARTED VARCHAR(50),
  COMPLETED VARCHAR(50),
  RESULT_SUMMARY VARCHAR(2),
  TENANT VARCHAR(255),
  CONSTRAINT RECERT_PK PRIMARY KEY(PROCESS_ID, ACTIVITY_ID)
) IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE TABLE SCRIPT  (
		  TYPE CHAR(1) NOT NULL,
		  ID VARCHAR(50) NOT NULL,
		  JOIN_ORDER SMALLINT NOT NULL,
		  PERSON_ATTRIBUTE VARCHAR(100) NOT NULL,
		  FIRST_LAST SMALLINT,
		  CONCATENATE_CHAR CHAR(10),
		  CONSTRAINT SCRIPT_PK PRIMARY KEY(TYPE, ID, JOIN_ORDER)
) IN ENROLE_DATA INDEX IN ENROLE_INDEXES ; 

DROP VIEW ROOTPROCESSVIEW;

CREATE VIEW ROOTPROCESSVIEW (ID, TYPE, REQUESTER) AS
(
  SELECT ID, TYPE, REQUESTER
  FROM PROCESS
  WHERE  PROCESS.ROOT_PROCESS_ID  = 0
  OR PROCESS.ROOT_PROCESS_ID  = PROCESS.ID
  AND PROCESS.TYPE IN ('OP','AA','AC','UA','UC','UD','US','UR','UO','SR','OA','OC','AD',
            'AS','AR','AP','LO','AO','LS','LR','LP','LD','MS','MR','MD','DA','DC',
            'DD','PA','PC','PD','SA','SC','SD','PS','EN','RC','PE','LC','CP','EP','RP','SM','MA','EA','ER','HR')
);

DROP VIEW SUBPROCESSVIEW;

CREATE VIEW SUBPROCESSVIEW (ROOT_PROCESS_ID, SUBMITTED, COMPLETED, SUBJECT_PROFILE,
  SUBJECT_SERVICE, SUBJECT, TYPE, REQUESTER, RESULT_SUMMARY)
AS
(
  SELECT ROOT_PROCESS_ID, SUBMITTED, COMPLETED, SUBJECT_PROFILE,
    SUBJECT_SERVICE, SUBJECT, TYPE, REQUESTER,
    CASE
      WHEN RESULT_SUMMARY = '' THEN 'PE'
      ELSE RESULT_SUMMARY
    END as RESULT_SUMMARY
  FROM PROCESS 
  WHERE TYPE IN ('OA', 'OC', 'AD', 'AS', 'AR', 'AP')
);

DROP VIEW PENDING_APPROVAL;

CREATE VIEW PENDING_APPROVAL (PROCESSID, RESULT_SUMMARY)
AS
(
  SELECT PROCESS.ID,
    CASE
      WHEN WORKITEM.LOCK_OWNER IS NULL THEN ACTIVITY.RESULT_SUMMARY
      ELSE 'LK'
    END
  FROM PROCESS, ACTIVITY, WORKITEM
  WHERE WORKITEM.PROCESS_ID = PROCESS.ID AND WORKITEM.ACTIVITY_ID = ACTIVITY.ID
);


CREATE VIEW SUSPENDED_ACCOUNT_OPERATIONS (REQUESTEE, SUBJECT_SERVICE, SUBJECT, SUBJECT_PROFILE, COMPLETED) AS
(
  SELECT PROCESS.REQUESTEE, PROCESS.SUBJECT_SERVICE, PROCESS.SUBJECT, PROCESS.SUBJECT_PROFILE, MAX(PROCESS.COMPLETED)
  FROM PROCESS 
  WHERE PROCESS.TYPE = 'AS'
  GROUP BY PROCESS.REQUESTEE, PROCESS.SUBJECT_SERVICE, PROCESS.SUBJECT, PROCESS.SUBJECT_PROFILE
);

CREATE VIEW PROCESS_VIEW (ID, REQUESTER, REQUESTEE)
AS
(
  SELECT PROCESS.ID, COALESCE(PROCESS.REQUESTER, ' ') as REQUESTER, COALESCE(PROCESS.REQUESTEE, ' ') as REQUESTEE
  FROM PROCESS
);

CREATE TABLE VIEW_DEFINITION (
  ID INT NOT NULL,
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(2000),
  CONSTRAINT VIEW_DEFINITION_PK PRIMARY KEY(ID)
)IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE TABLE TASKS_VIEWABLE (
  TASK_ID VARCHAR(255) NOT NULL,
  VIEW_ID INT NOT NULL,
  VIEWABLE CHAR(1) NOT NULL DEFAULT 'N',
  CONSTRAINT TASKS_VIEWABLE_PK PRIMARY KEY(TASK_ID, VIEW_ID),
  CONSTRAINT VIEW_ID_FK FOREIGN KEY (VIEW_ID) REFERENCES VIEW_DEFINITION (ID)
)IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

ALTER TABLE PENDING VOLATILE;
ALTER TABLE SYNCH_POINT VOLATILE;

ALTER TABLE BULK_DATA_SERVICE
  ADD COLUMN FILENAME VARCHAR(255)
  ADD COLUMN DESCNAME VARCHAR(255);

ALTER TABLE MIGRATION_STATUS 
  ADD COLUMN SERVICEID BIGINT;
  
CREATE TABLE COMMON_TASKS  (
	PERSONA VARCHAR(100) NOT NULL, 
	TASK_ID VARCHAR(255) NOT NULL,
	CONSTRAINT COMMON_TASKS_PK PRIMARY KEY(PERSONA, TASK_ID) )   
IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE TABLE ACTIVITY_LOCK (
  PROCESS_ID BIGINT NOT NULL,
  ACTIVITY_ID BIGINT NOT NULL,
  SERVER VARCHAR(255) NOT NULL,
  THREAD_ID BIGINT NOT NULL,
  LOCK_COUNT INTEGER,
  CONSTRAINT ACTIVITY_LOCK_PK PRIMARY KEY(PROCESS_ID, ACTIVITY_ID, SERVER, THREAD_ID),
  CONSTRAINT ACTIVITY_LOCK_PFK FOREIGN KEY(PROCESS_ID) REFERENCES PROCESS(ID),
  CONSTRAINT ACTIVITY_LOCK_AFK FOREIGN KEY(ACTIVITY_ID) REFERENCES ACTIVITY(ID) 
) IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE INDEX ACTIVITY_LOCK_PIDX ON ACTIVITY_LOCK (PROCESS_ID ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;
ALTER TABLE ACTIVITY_LOCK volatile;

DROP INDEX ACTIVITY_ID_X;

DROP INDEX ACTIVITY_STATE_X;

CREATE INDEX PROCESSLOG_PID_X on PROCESSLOG (PROCESS_ID ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE INDEX PROCESSLOG_AID_X on PROCESSLOG (ACTIVITY_ID ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE INDEX ADT_EVENT_PID_ID_X ON AUDIT_EVENT (WORKFLOW_PROCESS_ID ASC, ID DESC) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE INDEX ADT_MGMT_TGT_ID_X ON AUDIT_MGMT_TARGET (EVENT_ID ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE INDEX ADT_MGMT_PROV_ID_X ON AUDIT_MGMT_PROVISIONING (EVENT_ID ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE INDEX ADT_MGMT_DEL_ID_X ON AUDIT_MGMT_DELEGATE (EVENT_ID ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;

ALTER TABLE ATTR_CHANGE VOLATILE;

ALTER TABLE ACCT_CHANGE VOLATILE;

CREATE INDEX ACCT_CHANGE_PREV_X ON ACCT_CHANGE (POLICY_ANALYSIS_ID ASC, OPERATION_TYPE ASC, REASON ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;

ALTER TABLE RESOURCE_PROVIDERS 
ADD RESOURCE_TEST_STATUS SMALLINT
ADD LAST_TEST_STATUS_TIME TIMESTAMP;

ALTER TABLE PO_TOPIC_TABLE VOLATILE;

ALTER TABLE PO_NOTIFICATION_TABLE VOLATILE;

ALTER TABLE PO_NOTIFICATION_HTMLBODY_TABLE VOLATILE;

CREATE INDEX PROCESS_PACT_ID_X ON PROCESS (PARENT_ACTIVITY_ID ASC, ID DESC) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE INDEX PROCESS_USERREQ_X ON PROCESS (REQUESTER ASC, PARENT_ID ASC, TENANT ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE INDEX RECON_INFO_ACCT_ID ON RECONCILIATION_INFO (ACCOUNTID ASC, RECONID DESC) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE INDEX RECON_INFO_ID_OP ON RECONCILIATION_INFO (RECONID ASC, OPERATION ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE INDEX RECON_COMPLETED ON RECONCILIATION (COMPLETED ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;

CREATE INDEX AUDIT_REPORT1 ON AUDIT_EVENT (TIMESTAMP ASC, ITIM_EVENT_CATEGORY ASC) MINPCTUSED 10 ALLOW REVERSE SCANS;

/**********************************************************
 *							  
 *  The section below contains the database schema 
 *  changes from the ITIM 5.0 FP01 to FP02
 *                                                        
 **********************************************************/

CREATE TABLE PASSWORD_SYNCH (
	ACTIVITY_ID BIGINT NOT NULL,
	ACCOUNT_DN VARCHAR(512),
	TIME_REQUESTED VARCHAR(50),
	PASSWORD VARCHAR(500),

	CONSTRAINT PWD_SYNCH_PK PRIMARY KEY(ACTIVITY_ID)
) IN ENROLE_DATA INDEX IN ENROLE_INDEXES;

CREATE INDEX PS_ACCDN_X ON PASSWORD_SYNCH(ACCOUNT_DN);
CREATE INDEX PS_TIME_X ON PASSWORD_SYNCH(TIME_REQUESTED);

